{
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockbuttonlogtaskcontroller\/init(storemanager:)",
                "title" : "init(storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ockbuttonlogtaskcontroller",
            "title" : "OCKButtonLogTaskController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewcontroller\/init(controller:viewsynchronizer:)",
                "title" : "init(controller: OCKButtonLogTaskController, viewSynchronizer: OCKButtonLogTaskViewSynchronizer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewcontroller\/init(task:eventquery:storemanager:)",
                "title" : "init(task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewcontroller\/init(taskid:eventquery:storemanager:)",
                "title" : "init(taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewcontroller\/init(viewsynchronizer:task:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: OCKButtonLogTaskViewSynchronizer, task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewcontroller\/init(viewsynchronizer:taskid:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: OCKButtonLogTaskViewSynchronizer, taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewcontroller\/init(viewsynchronizer:taskids:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: OCKButtonLogTaskViewSynchronizer, taskIDs: [String], eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewcontroller",
            "title" : "OCKButtonLogTaskViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewsynchronizer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKButtonLogTaskView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKButtonLogTaskView, context: OCKSynchronizationContext<OCKTaskEvents>)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewsynchronizer\/makeanyview()",
                    "title" : "func makeAnyView() -> UIView & OCKTaskDisplayable",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewsynchronizer\/updateanyview(_:context:)",
                    "title" : "func updateAnyView(UIView & OCKTaskDisplayable, context: OCKSynchronizationContext<OCKTaskEvents>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewsynchronizer\/ockanytaskviewsynchronizerprotocol-implementations",
                "title" : "OCKAnyTaskViewSynchronizerProtocol Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewsynchronizer",
            "title" : "OCKButtonLogTaskViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarcontroller\/init(dateinterval:storemanager:)",
                "title" : "init(dateInterval: DateInterval, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarcontroller\/completionstates",
                "title" : "var completionStates: [OCKCompletionState]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarcontroller\/dateinterval",
                "title" : "let dateInterval: DateInterval",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarcontroller\/error",
                "title" : "var error: Error?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarcontroller\/storemanager",
                "title" : "let storeManager: OCKSynchronizedStoreManager",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarcontroller\/fetchandobserveadherence(usingaggregator:)",
                "title" : "func fetchAndObserveAdherence(usingAggregator: OCKAdherenceAggregator)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ockcalendarcontroller\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockcalendarcontroller\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcalendarcontroller",
            "title" : "OCKCalendarController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewcontroller\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewcontroller\/init(controller:viewsynchronizer:)",
                "title" : "init(controller: Controller, viewSynchronizer: ViewSynchronizer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewcontroller\/init(nibname:bundle:)",
                "title" : "init(nibName: String?, bundle: Bundle?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewcontroller\/init(viewsynchronizer:dateinterval:aggregator:storemanager:)",
                "title" : "init(viewSynchronizer: ViewSynchronizer, dateInterval: DateInterval, aggregator: OCKAdherenceAggregator, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewcontroller\/calendarview",
                "title" : "var calendarView: ViewSynchronizer.View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewcontroller\/controller",
                "title" : "let controller: Controller",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewcontroller\/delegate",
                "title" : "var delegate: OCKCalendarViewControllerDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewcontroller\/viewsynchronizer",
                "title" : "let viewSynchronizer: ViewSynchronizer",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewcontroller\/calendarview(_:didselectdate:at:sender:)",
                "title" : "func calendarView(UIView & OCKCalendarDisplayable, didSelectDate: Date, at: Int, sender: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewcontroller\/loadview()",
                "title" : "func loadView()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcalendarviewcontroller",
            "title" : "OCKCalendarViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcartesianchartviewcontroller\/init(controller:viewsynchronizer:)",
                "title" : "init(controller: OCKCartesianChartController, viewSynchronizer: OCKCartesianChartViewSynchronizer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockcartesianchartviewcontroller\/init(plottype:selecteddate:configurations:storemanager:)",
                "title" : "init(plotType: OCKCartesianGraphView.PlotType, selectedDate: Date, configurations: [OCKDataSeriesConfiguration], storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockcartesianchartviewcontroller\/init(viewsynchronizer:weekofdate:configurations:storemanager:)",
                "title" : "init(viewSynchronizer: OCKCartesianChartViewSynchronizer, weekOfDate: Date, configurations: [OCKDataSeriesConfiguration], storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcartesianchartviewcontroller",
            "title" : "OCKCartesianChartViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcartesianchartviewsynchronizer\/init(plottype:selecteddate:)",
                "title" : "init(plotType: OCKCartesianGraphView.PlotType, selectedDate: Date)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcartesianchartviewsynchronizer\/plottype",
                "title" : "let plotType: OCKCartesianGraphView.PlotType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcartesianchartviewsynchronizer\/selecteddate",
                "title" : "let selectedDate: Date",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcartesianchartviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKCartesianChartView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcartesianchartviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKCartesianChartView, context: OCKSynchronizationContext<[OCKDataSeries]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcartesianchartviewsynchronizer",
            "title" : "OCKCartesianChartViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartcontroller\/init(weekofdate:storemanager:)",
                "title" : "init(weekOfDate: Date, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartcontroller\/dataseries",
                "title" : "var dataSeries: [OCKDataSeries]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartcontroller\/error",
                "title" : "var error: Error?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartcontroller\/storemanager",
                "title" : "let storeManager: OCKSynchronizedStoreManager",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartcontroller\/fetchandobserveinsights(forconfigurations:)",
                "title" : "func fetchAndObserveInsights(forConfigurations: [OCKDataSeriesConfiguration])",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ockchartcontroller\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockchartcontroller\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/ockchartcontroller",
            "title" : "OCKChartController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontroller\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontroller\/init(controller:viewsynchronizer:)",
                "title" : "init(controller: Controller, viewSynchronizer: ViewSynchronizer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontroller\/init(nibname:bundle:)",
                "title" : "init(nibName: String?, bundle: Bundle?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontroller\/init(viewsynchronizer:weekofdate:configurations:storemanager:)",
                "title" : "init(viewSynchronizer: ViewSynchronizer, weekOfDate: Date, configurations: [OCKDataSeriesConfiguration], storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontroller\/chartview",
                "title" : "var chartView: ViewSynchronizer.View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontroller\/controller",
                "title" : "let controller: Controller",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontroller\/delegate",
                "title" : "var delegate: OCKChartViewControllerDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontroller\/viewsynchronizer",
                "title" : "let viewSynchronizer: ViewSynchronizer",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontroller\/didselectchartview(_:)",
                "title" : "func didSelectChartView(UIView & OCKChartDisplayable)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontroller\/loadview()",
                "title" : "func loadView()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockchartviewcontroller",
            "title" : "OCKChartViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchecklisttaskviewcontroller\/init(controller:viewsynchronizer:)",
                "title" : "init(controller: OCKChecklistTaskController, viewSynchronizer: OCKChecklistTaskViewSynchronizer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockchecklisttaskviewcontroller\/init(task:eventquery:storemanager:)",
                "title" : "init(task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockchecklisttaskviewcontroller\/init(taskid:eventquery:storemanager:)",
                "title" : "init(taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockchecklisttaskviewcontroller\/init(viewsynchronizer:task:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: OCKChecklistTaskViewSynchronizer, task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockchecklisttaskviewcontroller\/init(viewsynchronizer:taskid:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: OCKChecklistTaskViewSynchronizer, taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockchecklisttaskviewcontroller\/init(viewsynchronizer:taskids:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: OCKChecklistTaskViewSynchronizer, taskIDs: [String], eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ockchecklisttaskviewcontroller",
            "title" : "OCKChecklistTaskViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchecklisttaskviewsynchronizer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchecklisttaskviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKChecklistTaskView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockchecklisttaskviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKChecklistTaskView, context: OCKSynchronizationContext<OCKTaskEvents>)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ockchecklisttaskviewsynchronizer\/makeanyview()",
                    "title" : "func makeAnyView() -> UIView & OCKTaskDisplayable",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ockchecklisttaskviewsynchronizer\/updateanyview(_:context:)",
                    "title" : "func updateAnyView(UIView & OCKTaskDisplayable, context: OCKSynchronizationContext<OCKTaskEvents>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockchecklisttaskviewsynchronizer\/ockanytaskviewsynchronizerprotocol-implementations",
                "title" : "OCKAnyTaskViewSynchronizerProtocol Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/ockchecklisttaskviewsynchronizer",
            "title" : "OCKChecklistTaskViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactcontroller\/init(storemanager:)",
                "title" : "init(storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactcontroller\/contact",
                "title" : "var contact: OCKAnyContact?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactcontroller\/error",
                "title" : "var error: Error?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactcontroller\/storemanager",
                "title" : "let storeManager: OCKSynchronizedStoreManager",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactcontroller\/fetchandobservecontact(forquery:)",
                "title" : "func fetchAndObserveContact(forQuery: OCKContactQuery)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactcontroller\/fetchandobservecontact(withid:)",
                "title" : "func fetchAndObserveContact(withID: String)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactcontroller\/initiateaddresslookup(completion:)",
                "title" : "func initiateAddressLookup(completion: (Result<MKMapItem, Error>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactcontroller\/initiatecall()",
                "title" : "func initiateCall() throws -> URL",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactcontroller\/initiateemail()",
                "title" : "func initiateEmail() throws -> MFMailComposeViewController",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactcontroller\/initiatemessage()",
                "title" : "func initiateMessage() throws -> MFMessageComposeViewController",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactcontroller\/initiatesystemcontactlookup()",
                "title" : "func initiateSystemContactLookup() throws -> CNContactViewController",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactcontroller\/observecontact(_:)",
                "title" : "func observeContact(OCKAnyContact)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ockcontactcontroller\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockcontactcontroller\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcontactcontroller",
            "title" : "OCKContactController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/init(controller:viewsynchronizer:)",
                "title" : "init(controller: Controller, viewSynchronizer: ViewSynchronizer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/init(nibname:bundle:)",
                "title" : "init(nibName: String?, bundle: Bundle?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/init(viewsynchronizer:contact:storemanager:)",
                "title" : "init(viewSynchronizer: ViewSynchronizer, contact: OCKAnyContact, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/init(viewsynchronizer:contactid:storemanager:)",
                "title" : "init(viewSynchronizer: ViewSynchronizer, contactID: String, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/contactview",
                "title" : "var contactView: ViewSynchronizer.View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/controller",
                "title" : "let controller: Controller",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/delegate",
                "title" : "var delegate: OCKContactViewControllerDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/viewsynchronizer",
                "title" : "let viewSynchronizer: ViewSynchronizer",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/contactview(_:senderdidinitiateaddresslookup:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateAddressLookup: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/contactview(_:senderdidinitiatecall:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateCall: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/contactview(_:senderdidinitiateemail:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateEmail: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/contactview(_:senderdidinitiatemessage:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateMessage: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/didselectcontactview(_:)",
                "title" : "func didSelectContactView(UIView & OCKContactDisplayable)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/loadview()",
                "title" : "func loadView()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/mailcomposecontroller(_:didfinishwith:error:)",
                "title" : "func mailComposeController(MFMailComposeViewController, didFinishWith: MFMailComposeResult, error: Error?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/messagecomposeviewcontroller(_:didfinishwith:)",
                "title" : "func messageComposeViewController(MFMessageComposeViewController, didFinishWith: MessageComposeResult)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcontactviewcontroller",
            "title" : "OCKContactViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactslistviewcontroller\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactslistviewcontroller\/init(nibname:bundle:)",
                "title" : "init(nibName: String?, bundle: Bundle?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactslistviewcontroller\/init(storemanager:)",
                "title" : "init(storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactslistviewcontroller\/contactdelegate",
                "title" : "var contactDelegate: OCKContactViewControllerDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactslistviewcontroller\/delegate",
                "title" : "var delegate: OCKContactsListViewControllerDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactslistviewcontroller\/storemanager",
                "title" : "let storeManager: OCKSynchronizedStoreManager",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactslistviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcontactslistviewcontroller",
            "title" : "OCKContactsListViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/init(nibname:bundle:)",
                "title" : "init(nibName: String?, bundle: Bundle?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/init(storemanager:adherenceaggregator:)",
                "title" : "init(storeManager: OCKSynchronizedStoreManager, adherenceAggregator: OCKAdherenceAggregator)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/currentpage",
                "title" : "var currentPage: OCKListViewController?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/datasource",
                "title" : "var dataSource: OCKDailyPageViewControllerDataSource?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/delegate",
                "title" : "var delegate: OCKDailyPageViewControllerDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/selecteddate",
                "title" : "var selectedDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/storemanager",
                "title" : "let storeManager: OCKSynchronizedStoreManager",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/dailypageviewcontroller(_:didfailwitherror:)",
                "title" : "func dailyPageViewController(OCKDailyPageViewController, didFailWithError: Error)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/dailypageviewcontroller(_:prepare:for:)",
                "title" : "func dailyPageViewController(OCKDailyPageViewController, prepare: OCKListViewController, for: Date)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/loadview()",
                "title" : "func loadView()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/pageviewcontroller(_:didfinishanimating:previousviewcontrollers:transitioncompleted:)",
                "title" : "func pageViewController(UIPageViewController, didFinishAnimating: Bool, previousViewControllers: [UIViewController], transitionCompleted: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/pageviewcontroller(_:viewcontrollerafter:)",
                "title" : "func pageViewController(UIPageViewController, viewControllerAfter: UIViewController) -> UIViewController?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/pageviewcontroller(_:viewcontrollerbefore:)",
                "title" : "func pageViewController(UIPageViewController, viewControllerBefore: UIViewController) -> UIViewController?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/reload()",
                "title" : "func reload()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/selectdate(_:animated:)",
                "title" : "func selectDate(Date, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/viewsafeareainsetsdidchange()",
                "title" : "func viewSafeAreaInsetsDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/weekcalendarpageviewcontroller(_:didchangedateinterval:)",
                "title" : "func weekCalendarPageViewController(OCKWeekCalendarPageViewController, didChangeDateInterval: DateInterval)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/weekcalendarpageviewcontroller(_:didencountererror:)",
                "title" : "func weekCalendarPageViewController(OCKWeekCalendarPageViewController, didEncounterError: Error)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/weekcalendarpageviewcontroller(_:didselectdate:previousdate:)",
                "title" : "func weekCalendarPageViewController(OCKWeekCalendarPageViewController, didSelectDate: Date, previousDate: Date)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdailypageviewcontroller",
            "title" : "OCKDailyPageViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailytaskspageviewcontroller\/init(storemanager:adherenceaggregator:)",
                "title" : "init(storeManager: OCKSynchronizedStoreManager, adherenceAggregator: OCKAdherenceAggregator)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailytaskspageviewcontroller\/tasksdelegate",
                "title" : "var tasksDelegate: OCKDailyTasksPageViewControllerDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailytaskspageviewcontroller\/dailypageviewcontroller(_:prepare:for:)",
                "title" : "func dailyPageViewController(OCKDailyPageViewController, prepare: OCKListViewController, for: Date)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailytaskspageviewcontroller\/dailytaskspageviewcontroller(_:viewcontrollerfortask:events:eventquery:)",
                "title" : "func dailyTasksPageViewController(OCKDailyTasksPageViewController, viewControllerForTask: OCKAnyTask, events: [OCKAnyEvent], eventQuery: OCKEventQuery) -> UIViewController?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdailytaskspageviewcontroller",
            "title" : "OCKDailyTasksPageViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailviewcontroller\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailviewcontroller\/init(html:imageoverlaystyle:showsclosebutton:)",
                "title" : "init(html: OCKDetailView.StyledHTML?, imageOverlayStyle: UIUserInterfaceStyle, showsCloseButton: Bool)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailviewcontroller\/init(nibname:bundle:)",
                "title" : "init(nibName: String?, bundle: Bundle?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailviewcontroller\/detailview",
                "title" : "var detailView: OCKDetailView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailviewcontroller\/loadview()",
                "title" : "func loadView()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdetailviewcontroller",
            "title" : "OCKDetailViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailedcontactviewcontroller\/init(contact:storemanager:)",
                "title" : "init(contact: OCKAnyContact, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailedcontactviewcontroller\/init(contactid:storemanager:)",
                "title" : "init(contactID: String, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailedcontactviewcontroller\/init(controller:viewsynchronizer:)",
                "title" : "init(controller: OCKDetailedContactController, viewSynchronizer: OCKDetailedContactViewSynchronizer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailedcontactviewcontroller\/init(viewsynchronizer:contact:storemanager:)",
                "title" : "init(viewSynchronizer: OCKDetailedContactViewSynchronizer, contact: OCKAnyContact, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailedcontactviewcontroller\/init(viewsynchronizer:contactid:storemanager:)",
                "title" : "init(viewSynchronizer: OCKDetailedContactViewSynchronizer, contactID: String, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdetailedcontactviewcontroller",
            "title" : "OCKDetailedContactViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailedcontactviewsynchronizer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailedcontactviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKDetailedContactView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailedcontactviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKDetailedContactView, context: OCKSynchronizationContext<OCKAnyContact?>)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ockdetailedcontactviewsynchronizer\/makeanyview()",
                    "title" : "func makeAnyView() -> UIView & OCKContactDisplayable",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ockdetailedcontactviewsynchronizer\/updateanyview(_:context:)",
                    "title" : "func updateAnyView(UIView & OCKContactDisplayable, context: OCKSynchronizationContext<OCKAnyContact?>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockdetailedcontactviewsynchronizer\/ockanycontactviewsynchronizerprotocol-implementations",
                "title" : "OCKAnyContactViewSynchronizerProtocol Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdetailedcontactviewsynchronizer",
            "title" : "OCKDetailedContactViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewcontroller\/init(controller:viewsynchronizer:)",
                "title" : "init(controller: OCKGridTaskController, viewSynchronizer: OCKGridTaskViewSynchronizer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewcontroller\/init(task:eventquery:storemanager:)",
                "title" : "init(task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewcontroller\/init(taskid:eventquery:storemanager:)",
                "title" : "init(taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewcontroller\/init(viewsynchronizer:task:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: OCKGridTaskViewSynchronizer, task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewcontroller\/init(viewsynchronizer:taskid:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: OCKGridTaskViewSynchronizer, taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewcontroller\/init(viewsynchronizer:taskids:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: OCKGridTaskViewSynchronizer, taskIDs: [String], eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewcontroller\/collectionview(_:cellforitemat:)",
                "title" : "func collectionView(UICollectionView, cellForItemAt: IndexPath) -> UICollectionViewCell",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewcontroller\/collectionview(_:numberofitemsinsection:)",
                "title" : "func collectionView(UICollectionView, numberOfItemsInSection: Int) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockgridtaskviewcontroller",
            "title" : "OCKGridTaskViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewsynchronizer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKGridTaskView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKGridTaskView, context: OCKSynchronizationContext<OCKTaskEvents>)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ockgridtaskviewsynchronizer\/makeanyview()",
                    "title" : "func makeAnyView() -> UIView & OCKTaskDisplayable",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ockgridtaskviewsynchronizer\/updateanyview(_:context:)",
                    "title" : "func updateAnyView(UIView & OCKTaskDisplayable, context: OCKSynchronizationContext<OCKTaskEvents>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockgridtaskviewsynchronizer\/ockanytaskviewsynchronizerprotocol-implementations",
                "title" : "OCKAnyTaskViewSynchronizerProtocol Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/ockgridtaskviewsynchronizer",
            "title" : "OCKGridTaskViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockinstructionstaskcontroller\/init(storemanager:)",
                "title" : "init(storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockinstructionstaskcontroller\/viewmodel",
                "title" : "var viewModel: InstructionsTaskViewModel?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/ockinstructionstaskcontroller",
            "title" : "OCKInstructionsTaskController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockinstructionstaskviewcontroller\/init(controller:viewsynchronizer:)",
                "title" : "init(controller: OCKInstructionsTaskController, viewSynchronizer: OCKInstructionsTaskViewSynchronizer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockinstructionstaskviewcontroller\/init(task:eventquery:storemanager:)",
                "title" : "init(task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockinstructionstaskviewcontroller\/init(taskid:eventquery:storemanager:)",
                "title" : "init(taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockinstructionstaskviewcontroller\/init(viewsynchronizer:task:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: OCKInstructionsTaskViewSynchronizer, task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockinstructionstaskviewcontroller\/init(viewsynchronizer:taskid:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: OCKInstructionsTaskViewSynchronizer, taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockinstructionstaskviewcontroller\/init(viewsynchronizer:taskids:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: OCKInstructionsTaskViewSynchronizer, taskIDs: [String], eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ockinstructionstaskviewcontroller",
            "title" : "OCKInstructionsTaskViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockinstructionstaskviewsynchronizer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockinstructionstaskviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKInstructionsTaskView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockinstructionstaskviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKInstructionsTaskView, context: OCKSynchronizationContext<OCKTaskEvents>)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ockinstructionstaskviewsynchronizer\/makeanyview()",
                    "title" : "func makeAnyView() -> UIView & OCKTaskDisplayable",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ockinstructionstaskviewsynchronizer\/updateanyview(_:context:)",
                    "title" : "func updateAnyView(UIView & OCKTaskDisplayable, context: OCKSynchronizationContext<OCKTaskEvents>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockinstructionstaskviewsynchronizer\/ockanytaskviewsynchronizerprotocol-implementations",
                "title" : "OCKAnyTaskViewSynchronizerProtocol Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/ockinstructionstaskviewsynchronizer",
            "title" : "OCKInstructionsTaskViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocklabeledvaluetaskcontroller\/init(storemanager:)",
                "title" : "init(storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocklabeledvaluetaskcontroller\/viewmodel",
                "title" : "var viewModel: LabeledValueTaskViewModel?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/ocklabeledvaluetaskcontroller",
            "title" : "OCKLabeledValueTaskController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/init(nibname:bundle:)",
                "title" : "init(nibName: String?, bundle: Bundle?)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/appendview(_:animated:)",
                "title" : "func appendView(UIView, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/appendviewcontroller(_:animated:)",
                "title" : "func appendViewController(UIViewController, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/clear()",
                "title" : "func clear()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/insertview(_:at:animated:)",
                "title" : "func insertView(UIView, at: Int, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/insertviewcontroller(_:at:animated:)",
                "title" : "func insertViewController(UIViewController, at: Int, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/loadview()",
                "title" : "func loadView()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/remove(at:)",
                "title" : "func remove(at: Int)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ocklistviewcontroller",
            "title" : "OCKListViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocknumericprogresstaskcontroller\/init(storemanager:)",
                "title" : "init(storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocknumericprogresstaskcontroller\/viewmodel",
                "title" : "var viewModel: NumericProgressTaskViewModel?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/ocknumericprogresstaskcontroller",
            "title" : "OCKNumericProgressTaskController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimplecontactviewcontroller\/init(contact:storemanager:)",
                "title" : "init(contact: OCKAnyContact, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimplecontactviewcontroller\/init(contactid:storemanager:)",
                "title" : "init(contactID: String, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimplecontactviewcontroller\/init(controller:viewsynchronizer:)",
                "title" : "init(controller: OCKSimpleContactController, viewSynchronizer: OCKSimpleContactViewSynchronizer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimplecontactviewcontroller\/init(viewsynchronizer:contact:storemanager:)",
                "title" : "init(viewSynchronizer: OCKSimpleContactViewSynchronizer, contact: OCKAnyContact, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimplecontactviewcontroller\/init(viewsynchronizer:contactid:storemanager:)",
                "title" : "init(viewSynchronizer: OCKSimpleContactViewSynchronizer, contactID: String, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ocksimplecontactviewcontroller",
            "title" : "OCKSimpleContactViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimplecontactviewsynchronizer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimplecontactviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKSimpleContactView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimplecontactviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKSimpleContactView, context: OCKSynchronizationContext<OCKAnyContact?>)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocksimplecontactviewsynchronizer\/makeanyview()",
                    "title" : "func makeAnyView() -> UIView & OCKContactDisplayable",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocksimplecontactviewsynchronizer\/updateanyview(_:context:)",
                    "title" : "func updateAnyView(UIView & OCKContactDisplayable, context: OCKSynchronizationContext<OCKAnyContact?>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/ocksimplecontactviewsynchronizer\/ockanycontactviewsynchronizerprotocol-implementations",
                "title" : "OCKAnyContactViewSynchronizerProtocol Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/ocksimplecontactviewsynchronizer",
            "title" : "OCKSimpleContactViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimpletaskcontroller\/init(storemanager:)",
                "title" : "init(storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimpletaskcontroller\/viewmodel",
                "title" : "var viewModel: SimpleTaskViewModel?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/ocksimpletaskcontroller",
            "title" : "OCKSimpleTaskController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimpletaskviewcontroller\/init(controller:viewsynchronizer:)",
                "title" : "init(controller: OCKSimpleTaskController, viewSynchronizer: OCKSimpleTaskViewSynchronizer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimpletaskviewcontroller\/init(task:eventquery:storemanager:)",
                "title" : "init(task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimpletaskviewcontroller\/init(taskid:eventquery:storemanager:)",
                "title" : "init(taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimpletaskviewcontroller\/init(viewsynchronizer:task:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: OCKSimpleTaskViewSynchronizer, task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimpletaskviewcontroller\/init(viewsynchronizer:taskid:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: OCKSimpleTaskViewSynchronizer, taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimpletaskviewcontroller\/init(viewsynchronizer:taskids:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: OCKSimpleTaskViewSynchronizer, taskIDs: [String], eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ocksimpletaskviewcontroller",
            "title" : "OCKSimpleTaskViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimpletaskviewsynchronizer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimpletaskviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKSimpleTaskView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimpletaskviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKSimpleTaskView, context: OCKSynchronizationContext<OCKTaskEvents>)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocksimpletaskviewsynchronizer\/makeanyview()",
                    "title" : "func makeAnyView() -> UIView & OCKTaskDisplayable",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocksimpletaskviewsynchronizer\/updateanyview(_:context:)",
                    "title" : "func updateAnyView(UIView & OCKTaskDisplayable, context: OCKSynchronizationContext<OCKTaskEvents>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/ocksimpletaskviewsynchronizer\/ockanytaskviewsynchronizerprotocol-implementations",
                "title" : "OCKAnyTaskViewSynchronizerProtocol Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/ocksimpletaskviewsynchronizer",
            "title" : "OCKSimpleTaskViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/init(wrapping:)",
                "title" : "init(wrapping: OCKAnyStoreProtocol)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/notificationpublisher",
                "title" : "var notificationPublisher: AnyPublisher<Publishers.Share<PassthroughSubject<OCKStoreNotification, Never>>.Output, Publishers.Share<PassthroughSubject<OCKStoreNotification, Never>>.Failure>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/store",
                "title" : "let store: OCKAnyStoreProtocol",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/careplanstore(_:didaddcareplans:)",
                "title" : "func carePlanStore(OCKAnyReadOnlyCarePlanStore, didAddCarePlans: [OCKAnyCarePlan])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/careplanstore(_:diddeletecareplans:)",
                "title" : "func carePlanStore(OCKAnyReadOnlyCarePlanStore, didDeleteCarePlans: [OCKAnyCarePlan])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/careplanstore(_:didupdatecareplans:)",
                "title" : "func carePlanStore(OCKAnyReadOnlyCarePlanStore, didUpdateCarePlans: [OCKAnyCarePlan])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/contactstore(_:didaddcontacts:)",
                "title" : "func contactStore(OCKAnyReadOnlyContactStore, didAddContacts: [OCKAnyContact])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/contactstore(_:diddeletecontacts:)",
                "title" : "func contactStore(OCKAnyReadOnlyContactStore, didDeleteContacts: [OCKAnyContact])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/contactstore(_:didupdatecontacts:)",
                "title" : "func contactStore(OCKAnyReadOnlyContactStore, didUpdateContacts: [OCKAnyContact])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/outcomestore(_:didaddoutcomes:)",
                "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, didAddOutcomes: [OCKAnyOutcome])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/outcomestore(_:diddeleteoutcomes:)",
                "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, didDeleteOutcomes: [OCKAnyOutcome])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/outcomestore(_:didencounterunknownchange:)",
                "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, didEncounterUnknownChange: String)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/outcomestore(_:didupdateoutcomes:)",
                "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, didUpdateOutcomes: [OCKAnyOutcome])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/patientstore(_:didaddpatients:)",
                "title" : "func patientStore(OCKAnyReadOnlyPatientStore, didAddPatients: [OCKAnyPatient])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/patientstore(_:diddeletepatients:)",
                "title" : "func patientStore(OCKAnyReadOnlyPatientStore, didDeletePatients: [OCKAnyPatient])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/patientstore(_:didupdatepatients:)",
                "title" : "func patientStore(OCKAnyReadOnlyPatientStore, didUpdatePatients: [OCKAnyPatient])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/taskstore(_:didaddtasks:)",
                "title" : "func taskStore(OCKAnyReadOnlyTaskStore, didAddTasks: [OCKAnyTask])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/taskstore(_:diddeletetasks:)",
                "title" : "func taskStore(OCKAnyReadOnlyTaskStore, didDeleteTasks: [OCKAnyTask])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager\/taskstore(_:didupdatetasks:)",
                "title" : "func taskStore(OCKAnyReadOnlyTaskStore, didUpdateTasks: [OCKAnyTask])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ocksynchronizedstoremanager",
            "title" : "OCKSynchronizedStoreManager",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskcontroller\/init(storemanager:)",
                "title" : "init(storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskcontroller\/error",
                "title" : "var error: Error?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskcontroller\/storemanager",
                "title" : "let storeManager: OCKSynchronizedStoreManager",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskcontroller\/taskevents",
                "title" : "var taskEvents: OCKTaskEvents",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskcontroller\/appendoutcomevalue(value:at:completion:)",
                "title" : "func appendOutcomeValue(value: OCKOutcomeValueUnderlyingType, at: IndexPath, completion: ((Result<OCKAnyOutcome, Error>) -> Void)?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskcontroller\/appendoutcomevalue(withtype:at:completion:)",
                "title" : "func appendOutcomeValue(withType: OCKOutcomeValueUnderlyingType, at: IndexPath, completion: ((Result<OCKAnyOutcome, Error>) -> Void)?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskcontroller\/eventfor(indexpath:)",
                "title" : "func eventFor(indexPath: IndexPath) -> OCKAnyEvent?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskcontroller\/fetchandobserveevents(fortaskids:eventquery:)",
                "title" : "func fetchAndObserveEvents(forTaskIDs: [String], eventQuery: OCKEventQuery)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskcontroller\/fetchandobserveevents(fortaskquery:eventquery:)",
                "title" : "func fetchAndObserveEvents(forTaskQuery: OCKTaskQuery, eventQuery: OCKEventQuery)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskcontroller\/fetchandobserveevents(fortasks:eventquery:)",
                "title" : "func fetchAndObserveEvents(forTasks: [OCKAnyTask], eventQuery: OCKEventQuery)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskcontroller\/initiatedeletionforoutcomevalue(atindex:eventindexpath:deletioncompletion:)",
                "title" : "func initiateDeletionForOutcomeValue(atIndex: Int, eventIndexPath: IndexPath, deletionCompletion: ((Result<OCKAnyOutcome, Error>) -> Void)?) throws -> UIAlertController",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskcontroller\/initiatedetailsviewcontroller(forindexpath:)",
                "title" : "func initiateDetailsViewController(forIndexPath: IndexPath) throws -> OCKDetailViewController",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskcontroller\/makeoutcomefor(event:withvalues:)",
                "title" : "func makeOutcomeFor(event: OCKAnyEvent, withValues: [OCKOutcomeValue]) throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskcontroller\/setevent(atindexpath:iscomplete:completion:)",
                "title" : "func setEvent(atIndexPath: IndexPath, isComplete: Bool, completion: ((Result<OCKAnyOutcome, Error>) -> Void)?)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskcontroller\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekit\/ocktaskcontroller\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/ocktaskcontroller",
            "title" : "OCKTaskController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/init(controller:viewsynchronizer:)",
                "title" : "init(controller: Controller, viewSynchronizer: ViewSynchronizer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/init(nibname:bundle:)",
                "title" : "init(nibName: String?, bundle: Bundle?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/init(viewsynchronizer:task:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: ViewSynchronizer, task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/init(viewsynchronizer:taskid:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: ViewSynchronizer, taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/init(viewsynchronizer:taskids:eventquery:storemanager:)",
                "title" : "init(viewSynchronizer: ViewSynchronizer, taskIDs: [String], eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/controller",
                "title" : "let controller: Controller",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/delegate",
                "title" : "var delegate: OCKTaskViewControllerDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/taskview",
                "title" : "var taskView: ViewSynchronizer.View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/viewsynchronizer",
                "title" : "let viewSynchronizer: ViewSynchronizer",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/didselecttaskview(_:eventindexpath:)",
                "title" : "func didSelectTaskView(UIView & OCKTaskDisplayable, eventIndexPath: IndexPath)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/loadview()",
                "title" : "func loadView()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/taskview(_:didcompleteevent:at:sender:)",
                "title" : "func taskView(UIView & OCKTaskDisplayable, didCompleteEvent: Bool, at: IndexPath, sender: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/taskview(_:didcreateoutcomevalueat:eventindexpath:sender:)",
                "title" : "func taskView(UIView & OCKTaskDisplayable, didCreateOutcomeValueAt: Int, eventIndexPath: IndexPath, sender: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/taskview(_:didselectoutcomevalueat:eventindexpath:sender:)",
                "title" : "func taskView(UIView & OCKTaskDisplayable, didSelectOutcomeValueAt: Int, eventIndexPath: IndexPath, sender: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ocktaskviewcontroller",
            "title" : "OCKTaskViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarcontroller\/init(dateinterval:storemanager:)",
                "title" : "init(dateInterval: DateInterval, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarcontroller\/init(weekofdate:storemanager:)",
                "title" : "init(weekOfDate: Date, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ockweekcalendarcontroller",
            "title" : "OCKWeekCalendarController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/init(storemanager:aggregator:)",
                "title" : "init(storeManager: OCKSynchronizedStoreManager, aggregator: OCKAdherenceAggregator)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/init(transitionstyle:navigationorientation:options:)",
                "title" : "init(transitionStyle: UIPageViewController.TransitionStyle, navigationOrientation: UIPageViewController.NavigationOrientation, options: [UIPageViewController.OptionsKey : Any]?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/calendardelegate",
                "title" : "var calendarDelegate: OCKWeekCalendarPageViewControllerDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/selecteddate",
                "title" : "var selectedDate: Date",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/calendarview(_:didselectdate:at:sender:)",
                "title" : "func calendarView(UIView & OCKCalendarDisplayable, didSelectDate: Date, at: Int, sender: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/pageviewcontroller(_:didfinishanimating:previousviewcontrollers:transitioncompleted:)",
                "title" : "func pageViewController(UIPageViewController, didFinishAnimating: Bool, previousViewControllers: [UIViewController], transitionCompleted: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/pageviewcontroller(_:viewcontrollerafter:)",
                "title" : "func pageViewController(UIPageViewController, viewControllerAfter: UIViewController) -> UIViewController?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/pageviewcontroller(_:viewcontrollerbefore:)",
                "title" : "func pageViewController(UIPageViewController, viewControllerBefore: UIViewController) -> UIViewController?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/pageviewcontroller(_:willtransitionto:)",
                "title" : "func pageViewController(UIPageViewController, willTransitionTo: [UIViewController])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/selectdate(_:animated:)",
                "title" : "func selectDate(Date, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller",
            "title" : "OCKWeekCalendarPageViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarviewcontroller\/init(controller:viewsynchronizer:)",
                "title" : "init(controller: OCKWeekCalendarController, viewSynchronizer: OCKWeekCalendarViewSynchronizer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarviewcontroller\/init(viewsynchronizer:dateinterval:aggregator:storemanager:)",
                "title" : "init(viewSynchronizer: OCKWeekCalendarViewSynchronizer, dateInterval: DateInterval, aggregator: OCKAdherenceAggregator, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarviewcontroller\/init(weekofdate:aggregator:storemanager:)",
                "title" : "init(weekOfDate: Date, aggregator: OCKAdherenceAggregator, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ockweekcalendarviewcontroller",
            "title" : "OCKWeekCalendarViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarviewsynchronizer\/init(weekofdate:)",
                "title" : "init(weekOfDate: Date)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKWeekCalendarView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKWeekCalendarView, context: OCKSynchronizationContext<[OCKCompletionState]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockweekcalendarviewsynchronizer",
            "title" : "OCKWeekCalendarViewSynchronizer",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekit\/ockcontactviewsynchronizerprotocol\/makeanyview()",
                        "title" : "func makeAnyView() -> UIView & OCKContactDisplayable",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactViewSynchronizerProtocol Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockanycontactviewsynchronizerprotocol\/makeanyview()",
                "title" : "func makeAnyView() -> UIView & OCKContactDisplayable",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekit\/ockcontactviewsynchronizerprotocol\/updateanyview(_:context:)",
                        "title" : "func updateAnyView(UIView & OCKContactDisplayable, context: OCKSynchronizationContext<OCKAnyContact?>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactViewSynchronizerProtocol Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockanycontactviewsynchronizerprotocol\/updateanyview(_:context:)",
                "title" : "func updateAnyView(UIView & OCKContactDisplayable, context: OCKSynchronizationContext<OCKAnyContact?>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockanycontactviewsynchronizerprotocol",
            "title" : "OCKAnyContactViewSynchronizerProtocol",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekit\/ocktaskviewsynchronizerprotocol\/makeanyview()",
                        "title" : "func makeAnyView() -> UIView & OCKTaskDisplayable",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskViewSynchronizerProtocol Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockanytaskviewsynchronizerprotocol\/makeanyview()",
                "title" : "func makeAnyView() -> UIView & OCKTaskDisplayable",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekit\/ocktaskviewsynchronizerprotocol\/updateanyview(_:context:)",
                        "title" : "func updateAnyView(UIView & OCKTaskDisplayable, context: OCKSynchronizationContext<OCKTaskEvents>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskViewSynchronizerProtocol Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockanytaskviewsynchronizerprotocol\/updateanyview(_:context:)",
                "title" : "func updateAnyView(UIView & OCKTaskDisplayable, context: OCKSynchronizationContext<OCKTaskEvents>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockanytaskviewsynchronizerprotocol",
            "title" : "OCKAnyTaskViewSynchronizerProtocol",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewcontrollerdelegate\/calendarviewcontroller(_:didencountererror:)",
                "title" : "func calendarViewController<C, VS>(OCKCalendarViewController<C, VS>, didEncounterError: Error)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcalendarviewcontrollerdelegate",
            "title" : "OCKCalendarViewControllerDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewsynchronizerprotocol\/view",
                "title" : "View",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewsynchronizerprotocol\/makeview()",
                "title" : "func makeView() -> View",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewsynchronizerprotocol\/updateview(_:context:)",
                "title" : "func updateView(View, context: OCKSynchronizationContext<[OCKCompletionState]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcalendarviewsynchronizerprotocol",
            "title" : "OCKCalendarViewSynchronizerProtocol",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontrollerdelegate\/chartviewcontroller(_:didencountererror:)",
                "title" : "func chartViewController<C, VS>(OCKChartViewController<C, VS>, didEncounterError: Error)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockchartviewcontrollerdelegate",
            "title" : "OCKChartViewControllerDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewsynchronizerprotocol\/view",
                "title" : "View",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewsynchronizerprotocol\/makeview()",
                "title" : "func makeView() -> View",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewsynchronizerprotocol\/updateview(_:context:)",
                "title" : "func updateView(View, context: OCKSynchronizationContext<[OCKDataSeries]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockchartviewsynchronizerprotocol",
            "title" : "OCKChartViewSynchronizerProtocol",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontrollerdelegate\/contactviewcontroller(_:didencountererror:)",
                "title" : "func contactViewController<C, VS>(OCKContactViewController<C, VS>, didEncounterError: Error)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcontactviewcontrollerdelegate",
            "title" : "OCKContactViewControllerDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewsynchronizerprotocol\/view",
                "title" : "View",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewsynchronizerprotocol\/makeview()",
                "title" : "func makeView() -> View",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewsynchronizerprotocol\/updateview(_:context:)",
                "title" : "func updateView(View, context: OCKSynchronizationContext<OCKAnyContact?>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcontactviewsynchronizerprotocol",
            "title" : "OCKContactViewSynchronizerProtocol",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactslistviewcontrollerdelegate\/contactslistviewcontroller(_:didencountererror:)",
                "title" : "func contactsListViewController(OCKContactsListViewController, didEncounterError: Error)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcontactslistviewcontrollerdelegate",
            "title" : "OCKContactsListViewControllerDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontrollerdatasource\/dailypageviewcontroller(_:prepare:for:)",
                "title" : "func dailyPageViewController(OCKDailyPageViewController, prepare: OCKListViewController, for: Date)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdailypageviewcontrollerdatasource",
            "title" : "OCKDailyPageViewControllerDataSource",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekit\/ockdailypageviewcontrollerdelegate\/dailypageviewcontroller(_:didfailwitherror:)-2692e",
                        "title" : "func dailyPageViewController(OCKDailyPageViewController, didFailWithError: Error)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKDailyPageViewControllerDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockdailypageviewcontrollerdelegate\/dailypageviewcontroller(_:didfailwitherror:)-2d52y",
                "title" : "func dailyPageViewController(OCKDailyPageViewController, didFailWithError: Error)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdailypageviewcontrollerdelegate",
            "title" : "OCKDailyPageViewControllerDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailytaskspageviewcontrollerdelegate\/dailytaskspageviewcontroller(_:viewcontrollerfortask:events:eventquery:)",
                "title" : "func dailyTasksPageViewController(OCKDailyTasksPageViewController, viewControllerForTask: OCKAnyTask, events: [OCKAnyEvent], eventQuery: OCKEventQuery) -> UIViewController?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdailytaskspageviewcontrollerdelegate",
            "title" : "OCKDailyTasksPageViewControllerDelegate",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/carekit\/ockstorenotification",
            "title" : "OCKStoreNotification",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontrollerdelegate\/taskviewcontroller(_:didencountererror:)",
                "title" : "func taskViewController<C, VS>(OCKTaskViewController<C, VS>, didEncounterError: Error)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ocktaskviewcontrollerdelegate",
            "title" : "OCKTaskViewControllerDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewsynchronizerprotocol\/view",
                "title" : "View",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewsynchronizerprotocol\/makeview()",
                "title" : "func makeView() -> View",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewsynchronizerprotocol\/updateview(_:context:)",
                "title" : "func updateView(View, context: OCKSynchronizationContext<OCKTaskEvents>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ocktaskviewsynchronizerprotocol",
            "title" : "OCKTaskViewSynchronizerProtocol",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontrollerdelegate\/weekcalendarpageviewcontroller(_:didchangedateinterval:)",
                "title" : "func weekCalendarPageViewController(OCKWeekCalendarPageViewController, didChangeDateInterval: DateInterval)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontrollerdelegate\/weekcalendarpageviewcontroller(_:didencountererror:)",
                "title" : "func weekCalendarPageViewController(OCKWeekCalendarPageViewController, didEncounterError: Error)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontrollerdelegate\/weekcalendarpageviewcontroller(_:didselectdate:previousdate:)",
                "title" : "func weekCalendarPageViewController(OCKWeekCalendarPageViewController, didSelectDate: Date, previousDate: Date)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontrollerdelegate",
            "title" : "OCKWeekCalendarPageViewControllerDelegate",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/instructionstaskview\/init(controller:)",
                "title" : "init(controller: OCKInstructionsTaskController)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/instructionstaskview\/init(controller:content:)",
                "title" : "init(controller: OCKInstructionsTaskController, content: (_ controller: OCKInstructionsTaskController) -> CareKitUI.InstructionsTaskView<Header, Footer>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/instructionstaskview\/init(task:eventquery:storemanager:)",
                "title" : "init(task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/instructionstaskview\/init(task:eventquery:storemanager:content:)",
                "title" : "init(task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager, content: (_ controller: OCKInstructionsTaskController) -> CareKitUI.InstructionsTaskView<Header, Footer>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/instructionstaskview\/init(taskid:eventquery:storemanager:)",
                "title" : "init(taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/instructionstaskview\/init(taskid:eventquery:storemanager:content:)",
                "title" : "init(taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager, content: (_ controller: OCKInstructionsTaskController) -> CareKitUI.InstructionsTaskView<Header, Footer>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/instructionstaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/instructionstaskview\/onerror(_:)",
                "title" : "func onError((Error) -> Void) -> InstructionsTaskView<Header, Footer>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibility(activationpoint:)-2n6an",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibility(activationpoint:)-6tn52",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityaction(named:_:)",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityactivationpoint(_:)-7qtrk",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityactivationpoint(_:)-8a0vu",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-1c8b1",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-1rtp1",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-489jp",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-4dnmv",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-4gyc8",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-816f2",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-8krr4",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-9d143",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityhint(_:)-58l3r",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityhint(_:)-7wkk1",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityhint(_:)-8c07s",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityinputlabels(_:)-139q0",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityinputlabels(_:)-5wbfl",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityinputlabels(_:)-6hir9",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitylabel(_:)-36v77",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitylabel(_:)-5kjca",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitylabel(_:)-5qs1i",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:entries:)-2o3vq",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:entries:)-40mwu",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:entries:)-8pfrr",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:entries:)-91udf",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-3gdob",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-3krnr",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-7zmxv",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9s2ob",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-4eu37",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-6e4tk",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-7v0ic",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-to02",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:textranges:)-35yi1",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:textranges:)-3lze3",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:textranges:)-47v67",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotor(_:textranges:)-491ev",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityvalue(_:)-1p91p",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityvalue(_:)-3dhgp",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/accessibilityvalue(_:)-55avp",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(_:ispresented:actions:)-2zxgd",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(_:ispresented:actions:)-54g0p",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(_:ispresented:actions:)-8e59",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(_:ispresented:actions:message:)-2vlbi",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(_:ispresented:actions:message:)-6t2j8",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(_:ispresented:actions:message:)-8v3ls",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(_:ispresented:presenting:actions:)-3so4k",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(_:ispresented:presenting:actions:)-74vgd",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(_:ispresented:presenting:actions:)-7vq18",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(_:ispresented:presenting:actions:message:)-6ftje",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(_:ispresented:presenting:actions:message:)-8r5vt",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(_:ispresented:presenting:actions:message:)-8v9ny",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alignmentguide(_:computevalue:)-3mkwh",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/alignmentguide(_:computevalue:)-8uwuf",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/aspectratio(_:contentmode:)-4duoy",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/aspectratio(_:contentmode:)-53l7s",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/background(_:in:fillstyle:)-15wn4",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/background(_:in:fillstyle:)-r9aq",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/background(in:fillstyle:)-153h2",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/background(in:fillstyle:)-2aa1q",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/badge(_:)-1t1fu",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/badge(_:)-2sr6q",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/badge(_:)-3js0y",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/badge(_:)-7yw84",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/buttonstyle(_:)-53bsb",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/buttonstyle(_:)-6nra8",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4ng0x",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-6oa8h",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-8tthz",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1d3i4",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1m68f",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-2l8g0",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-167ay",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4j0pg",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4pu1e",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-1dbrx",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-316j0",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-5j9eu",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/dynamictypesize(_:)-25ivc",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/dynamictypesize(_:)-zoda",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-3utuz",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6772x",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-3p70p",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-7z6jq",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/focusedscenevalue(_:_:)",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/focusedvalue(_:_:)",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/help(_:)-69afw",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/help(_:)-8ich9",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/help(_:)-rib1",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/keyboardshortcut(_:)-1infn",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/keyboardshortcut(_:)-7yogr",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/listitemtint(_:)-3t3xc",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/listitemtint(_:)-6q5vj",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationbartitle(_:)-1tlo4",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationbartitle(_:)-7waxk",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationbartitle(_:)-932fh",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationbartitle(_:displaymode:)-1ilff",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationbartitle(_:displaymode:)-71ndg",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationbartitle(_:displaymode:)-7rnh6",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationtitle(_:)-4d77c",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationtitle(_:)-64gtq",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationtitle(_:)-78f7n",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationtitle(_:)-8aewe",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/ondrop(of:delegate:)-1ank4",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/ondrop(of:delegate:)-7ezqy",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/ondrop(of:istargeted:perform:)-2r63u",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/ondrop(of:istargeted:perform:)-7bbmu",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/ondrop(of:istargeted:perform:)-7tqo9",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/ondrop(of:istargeted:perform:)-8tfoi",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/padding(_:)-4ekzr",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/padding(_:)-9eduz",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/safeareainset(edge:alignment:spacing:content:)-4p1r",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/safeareainset(edge:alignment:spacing:content:)-9l5dy",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/scaleeffect(_:anchor:)-7536x",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/scaleeffect(_:anchor:)-chth",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchcompletion(_:)-98knx",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchcompletion(_:)-9tvid",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:placement:prompt:)-5vaww",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:placement:prompt:)-6b57x",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:placement:prompt:)-75jhw",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:placement:prompt:suggestions:)-5mywd",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:placement:prompt:suggestions:)-7ke8x",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:placement:prompt:suggestions:)-93vc3",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:scope:placement:prompt:scopes:)-39is9",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:scope:placement:prompt:scopes:)-59wj1",
                    "title" : "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:scope:placement:prompt:scopes:)-932lk",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-4i9ck",
                    "title" : "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-6ipf1",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-d0bz",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:)-3pyot",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:)-4x8vp",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:)-5k50y",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-2oua6",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-2uvon",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-65nsb",
                    "title" : "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-2owf0",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-5vg1",
                    "title" : "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-9p4a4",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-3tzgn",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-4vos1",
                    "title" : "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-9289f",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-1fx33",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-4yh43",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9cybz",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/instructionstaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/texttransition(_:)",
                    "title" : "func textTransition(Text.Transition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/toolbar(_:in:)",
                    "title" : "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/toolbar(content:)-2tqum",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/toolbar(content:)-3anzf",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/toolbarbackground(_:in:)-2wyed",
                    "title" : "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/toolbarbackground(_:in:)-720pz",
                    "title" : "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/toolbarcolorscheme(_:in:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/instructionstaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/instructionstaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/instructionstaskview",
            "title" : "InstructionsTaskView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/instructionstaskviewmodel\/action",
                "title" : "let action: () -> Void",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/instructionstaskviewmodel\/detail",
                "title" : "let detail: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/instructionstaskviewmodel\/instructions",
                "title" : "let instructions: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/instructionstaskviewmodel\/iscomplete",
                "title" : "let isComplete: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/instructionstaskviewmodel\/title",
                "title" : "let title: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/instructionstaskviewmodel",
            "title" : "InstructionsTaskViewModel",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/labeledvaluetaskview\/init(controller:)",
                "title" : "init(controller: OCKLabeledValueTaskController)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/labeledvaluetaskview\/init(controller:content:)",
                "title" : "init(controller: OCKLabeledValueTaskController, content: (_ controller: OCKLabeledValueTaskController) -> CareKitUI.LabeledValueTaskView<Header, DetailDisclosure>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/labeledvaluetaskview\/init(task:eventquery:storemanager:)",
                "title" : "init(task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/labeledvaluetaskview\/init(task:eventquery:storemanager:content:)",
                "title" : "init(task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager, content: (_ controller: OCKLabeledValueTaskController) -> CareKitUI.LabeledValueTaskView<Header, DetailDisclosure>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/labeledvaluetaskview\/init(taskid:eventquery:storemanager:)",
                "title" : "init(taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/labeledvaluetaskview\/init(taskid:eventquery:storemanager:content:)",
                "title" : "init(taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager, content: (_ controller: OCKLabeledValueTaskController) -> CareKitUI.LabeledValueTaskView<Header, DetailDisclosure>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/labeledvaluetaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/labeledvaluetaskview\/onerror(_:)",
                "title" : "func onError((Error) -> Void) -> LabeledValueTaskView<Header, DetailDisclosure>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibility(activationpoint:)-1n8pc",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibility(activationpoint:)-4wc2",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityaction(named:_:)",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityactivationpoint(_:)-43lwm",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityactivationpoint(_:)-7w8gd",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-1ex62",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-2s627",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-4g9ub",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-6azs",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-7rkw0",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-8oyd1",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-y7x5",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-zbpe",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityhint(_:)-33nic",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityhint(_:)-3oi9p",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityhint(_:)-48237",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityinputlabels(_:)-5e80f",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityinputlabels(_:)-5sk67",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityinputlabels(_:)-91k4u",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitylabel(_:)-2m9fz",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitylabel(_:)-4q7t8",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitylabel(_:)-8ps61",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-3whj0",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-4btc",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-64vxm",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-6w184",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-2fur3",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-2ra2x",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-34ifl",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-7g5y1",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-2d0n1",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-4aoxb",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-5o3dj",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-7tkda",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-4ozye",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-7ipm0",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-8cb7d",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-9fzn5",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityvalue(_:)-2b3x9",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityvalue(_:)-2cye5",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/accessibilityvalue(_:)-74mn4",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(_:ispresented:actions:)-45sf0",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(_:ispresented:actions:)-4vfe8",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(_:ispresented:actions:)-bsxg",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(_:ispresented:actions:message:)-1h6fs",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(_:ispresented:actions:message:)-4mxw4",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(_:ispresented:actions:message:)-5izdk",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:)-1gbwz",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:)-4ati2",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:)-7nytt",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:message:)-13xfy",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:message:)-5mna8",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:message:)-80aki",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alignmentguide(_:computevalue:)-52x3b",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/alignmentguide(_:computevalue:)-8dtq6",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/aspectratio(_:contentmode:)-67404",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/aspectratio(_:contentmode:)-90zox",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/background(_:in:fillstyle:)-1tomn",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/background(_:in:fillstyle:)-71bb5",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/background(in:fillstyle:)-2wg1o",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/background(in:fillstyle:)-5gc5o",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/badge(_:)-2sdhz",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/badge(_:)-527v5",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/badge(_:)-7mf1p",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/badge(_:)-r21c",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/buttonstyle(_:)-4bxce",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/buttonstyle(_:)-73ft",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1f0ip",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5pqwf",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-ixwy",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-2ahw8",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4cl9i",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6kczy",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3l2fg",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-71aro",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-9wofl",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-38tio",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-9dxk3",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-9rn7k",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/dynamictypesize(_:)-1ljf0",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/dynamictypesize(_:)-3qc5l",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-800n7",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-y2ih",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-282pv",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-68e9i",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/focusedscenevalue(_:_:)",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/focusedvalue(_:_:)",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/help(_:)-12ph6",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/help(_:)-4a9xt",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/help(_:)-cvdc",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/keyboardshortcut(_:)-91p1y",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/keyboardshortcut(_:)-9vrrp",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/listitemtint(_:)-2sl0i",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/listitemtint(_:)-89wd7",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationbartitle(_:)-5mxca",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationbartitle(_:)-8sucg",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationbartitle(_:)-9qum2",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationbartitle(_:displaymode:)-58uxn",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationbartitle(_:displaymode:)-8jbem",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationbartitle(_:displaymode:)-b8lc",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationtitle(_:)-1xzfa",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationtitle(_:)-4brlu",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationtitle(_:)-67les",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationtitle(_:)-6mm5o",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/ondrop(of:delegate:)-53z8a",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/ondrop(of:delegate:)-61c68",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-4awlo",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-6yu9b",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-798nm",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-8cu6d",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/padding(_:)-3e1z7",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/padding(_:)-ht51",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/safeareainset(edge:alignment:spacing:content:)-5i6h2",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/safeareainset(edge:alignment:spacing:content:)-lbn0",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/scaleeffect(_:anchor:)-47w47",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/scaleeffect(_:anchor:)-8z7o5",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchcompletion(_:)-2trxq",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchcompletion(_:)-525mr",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:placement:prompt:)-36mpw",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:placement:prompt:)-3aqvx",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:placement:prompt:)-4303f",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:placement:prompt:suggestions:)-208fr",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:placement:prompt:suggestions:)-5ip3l",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:placement:prompt:suggestions:)-9d99j",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:scope:placement:prompt:scopes:)-2dlgi",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:scope:placement:prompt:scopes:)-3ppkz",
                    "title" : "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:scope:placement:prompt:scopes:)-8gh2r",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-1kv9h",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-3llsy",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-8bl0q",
                    "title" : "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:)-45uio",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:)-7cscj",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:)-80trp",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-1v0l5",
                    "title" : "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-22lw3",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-6dt81",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-4yc0x",
                    "title" : "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-55kw7",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-m28r",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-82ae4",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-8t360",
                    "title" : "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-9y64v",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-2lbs3",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-62qjv",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8qpxu",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/texttransition(_:)",
                    "title" : "func textTransition(Text.Transition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/toolbar(_:in:)",
                    "title" : "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/toolbar(content:)-4dhc8",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/toolbar(content:)-6trfq",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/toolbarbackground(_:in:)-42cxp",
                    "title" : "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/toolbarbackground(_:in:)-62348",
                    "title" : "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/toolbarcolorscheme(_:in:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/labeledvaluetaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/labeledvaluetaskview",
            "title" : "LabeledValueTaskView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/labeledvaluetaskviewmodel\/detail",
                "title" : "var detail: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/labeledvaluetaskviewmodel\/state-swift.property",
                "title" : "var state: State",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/labeledvaluetaskviewmodel\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskviewmodel\/state-swift.enum\/complete(_:_:)",
                    "title" : "case complete(String, String?)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekit\/labeledvaluetaskviewmodel\/state-swift.enum\/incomplete(_:)",
                    "title" : "case incomplete(String)",
                    "type" : "case"
                  }
                ],
                "path" : "\/documentation\/carekit\/labeledvaluetaskviewmodel\/state-swift.enum",
                "title" : "LabeledValueTaskViewModel.State",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/carekit\/labeledvaluetaskviewmodel",
            "title" : "LabeledValueTaskViewModel",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/numericprogresstaskview\/init(controller:)",
                "title" : "init(controller: OCKNumericProgressTaskController)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/numericprogresstaskview\/init(controller:content:)",
                "title" : "init(controller: OCKNumericProgressTaskController, content: (_ controller: OCKNumericProgressTaskController) -> CareKitUI.NumericProgressTaskView<Header, Content>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/numericprogresstaskview\/init(task:eventquery:storemanager:)",
                "title" : "init(task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/numericprogresstaskview\/init(task:eventquery:storemanager:content:)",
                "title" : "init(task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager, content: (_ controller: OCKNumericProgressTaskController) -> CareKitUI.NumericProgressTaskView<Header, Content>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/numericprogresstaskview\/init(taskid:eventquery:storemanager:)",
                "title" : "init(taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/numericprogresstaskview\/init(taskid:eventquery:storemanager:content:)",
                "title" : "init(taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager, content: (_ controller: OCKNumericProgressTaskController) -> CareKitUI.NumericProgressTaskView<Header, Content>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/numericprogresstaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/numericprogresstaskview\/onerror(_:)",
                "title" : "func onError((Error) -> Void) -> NumericProgressTaskView<Header, Content>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibility(activationpoint:)-9nfp2",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibility(activationpoint:)-9yknl",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityaction(named:_:)",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityactivationpoint(_:)-5zetu",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityactivationpoint(_:)-9uxss",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-1jsh8",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-2xe3d",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-31arw",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-3hzoa",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-41p0c",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-7cohm",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-9gvv3",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-mxqz",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityhint(_:)-1ltl8",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityhint(_:)-5rgav",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityhint(_:)-9bxfw",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityinputlabels(_:)-6tkwg",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityinputlabels(_:)-8h1er",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityinputlabels(_:)-s5pv",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitylabel(_:)-56jq0",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitylabel(_:)-8fo3r",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitylabel(_:)-nq4k",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:entries:)-1za9x",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:entries:)-4t6lr",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:entries:)-5j6jl",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:entries:)-9pst6",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-658zi",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-69oei",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8rv41",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9lmlo",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-1rnsx",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-7o4o6",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-9d3zb",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-vqw4",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-93jo0",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-98dqd",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-9o4wc",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-ldkc",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityvalue(_:)-7fhxz",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityvalue(_:)-8ck9e",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/accessibilityvalue(_:)-hcru",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(_:ispresented:actions:)-2ihb0",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(_:ispresented:actions:)-3qukz",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(_:ispresented:actions:)-4iubt",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(_:ispresented:actions:message:)-2ymtq",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(_:ispresented:actions:message:)-3knmd",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(_:ispresented:actions:message:)-3sia0",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:)-2tm3z",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:)-667jj",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:)-6td82",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:message:)-3b03l",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:message:)-7o3al",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:message:)-8jlpr",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alignmentguide(_:computevalue:)-4pa75",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/alignmentguide(_:computevalue:)-5tk0q",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/aspectratio(_:contentmode:)-1yrna",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/aspectratio(_:contentmode:)-4yra8",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/background(_:in:fillstyle:)-4k3ht",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/background(_:in:fillstyle:)-5dyji",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/background(in:fillstyle:)-71fx9",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/background(in:fillstyle:)-839d5",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/badge(_:)-1wylt",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/badge(_:)-5td5f",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/badge(_:)-6kkht",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/badge(_:)-r6ya",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/buttonstyle(_:)-1up1u",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/buttonstyle(_:)-72txx",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-3uef7",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-445o7",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-6xl5r",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4wbka",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-7iim6",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-h71p",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-11ubd",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-2jr6e",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-5414q",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-4u8uj",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-6v5y4",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7y9vw",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/dynamictypesize(_:)-4jrm2",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/dynamictypesize(_:)-707ix",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-8ufn4",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-9hfuu",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-7d4ut",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-7k0mo",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/focusedscenevalue(_:_:)",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/focusedvalue(_:_:)",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/help(_:)-1bkbh",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/help(_:)-1o816",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/help(_:)-6ib08",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/keyboardshortcut(_:)-3d59y",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/keyboardshortcut(_:)-8t5jp",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/listitemtint(_:)-86z59",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/listitemtint(_:)-8opam",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationbartitle(_:)-3zq4c",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationbartitle(_:)-4mlnd",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationbartitle(_:)-6ksgb",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationbartitle(_:displaymode:)-28g70",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationbartitle(_:displaymode:)-72ymv",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationbartitle(_:displaymode:)-92f35",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationtitle(_:)-2vkmg",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationtitle(_:)-4c35a",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationtitle(_:)-5mukp",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationtitle(_:)-62e9y",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/ondrop(of:delegate:)-4csq7",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/ondrop(of:delegate:)-gfjg",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-3a3mx",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-5tyj1",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-71mil",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-taoz",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/padding(_:)-41acb",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/padding(_:)-9wevt",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/safeareainset(edge:alignment:spacing:content:)-68o0d",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/safeareainset(edge:alignment:spacing:content:)-9frxj",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/scaleeffect(_:anchor:)-4tkmi",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/scaleeffect(_:anchor:)-8eo3u",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchcompletion(_:)-46z5u",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchcompletion(_:)-7ul6j",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:placement:prompt:)-4dn9z",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:placement:prompt:)-5pj52",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:placement:prompt:)-5x2gk",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:placement:prompt:suggestions:)-48yrw",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:placement:prompt:suggestions:)-7mp7p",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:placement:prompt:suggestions:)-ogm0",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:scope:placement:prompt:scopes:)-4qasy",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:scope:placement:prompt:scopes:)-8sq1f",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:scope:placement:prompt:scopes:)-fgfe",
                    "title" : "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-3gvlz",
                    "title" : "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-6hw25",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-9os6c",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:)-2p8v9",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:)-5y16a",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:)-71z8r",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-19quw",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-2rcmn",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-8t2y4",
                    "title" : "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-3h6ok",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-5v8dg",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-8pqcp",
                    "title" : "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-69x74",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-9dvxu",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-9qasy",
                    "title" : "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-1nuna",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-4ggtr",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-6uun",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/texttransition(_:)",
                    "title" : "func textTransition(Text.Transition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/toolbar(_:in:)",
                    "title" : "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/toolbar(content:)-8hbpn",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/toolbar(content:)-8r04c",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/toolbarbackground(_:in:)-1e24a",
                    "title" : "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/toolbarbackground(_:in:)-53ma9",
                    "title" : "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/toolbarcolorscheme(_:in:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/numericprogresstaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/numericprogresstaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/numericprogresstaskview",
            "title" : "NumericProgressTaskView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/numericprogresstaskviewmodel\/detail",
                "title" : "let detail: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/numericprogresstaskviewmodel\/goal",
                "title" : "let goal: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/numericprogresstaskviewmodel\/instructions",
                "title" : "let instructions: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/numericprogresstaskviewmodel\/iscomplete",
                "title" : "let isComplete: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/numericprogresstaskviewmodel\/progress",
                "title" : "let progress: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/numericprogresstaskviewmodel\/title",
                "title" : "let title: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/numericprogresstaskviewmodel",
            "title" : "NumericProgressTaskViewModel",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcareplannotification\/careplan",
                "title" : "let carePlan: OCKAnyCarePlan",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcareplannotification\/category",
                "title" : "let category: OCKStoreNotificationCategory",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcareplannotification\/storemanager",
                "title" : "let storeManager: OCKSynchronizedStoreManager",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcareplannotification",
            "title" : "OCKCarePlanNotification",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactnotification\/category",
                "title" : "let category: OCKStoreNotificationCategory",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactnotification\/contact",
                "title" : "let contact: OCKAnyContact",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactnotification\/storemanager",
                "title" : "let storeManager: OCKSynchronizedStoreManager",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcontactnotification",
            "title" : "OCKContactNotification",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdataseriesconfiguration\/init(taskid:legendtitle:gradientstartcolor:gradientendcolor:markersize:eventaggregator:)",
                "title" : "init(taskID: String, legendTitle: String, gradientStartColor: UIColor, gradientEndColor: UIColor, markerSize: CGFloat, eventAggregator: OCKEventAggregator)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdataseriesconfiguration\/aggregator",
                "title" : "var aggregator: OCKEventAggregator",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdataseriesconfiguration\/gradientendcolor",
                "title" : "var gradientEndColor: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdataseriesconfiguration\/gradientstartcolor",
                "title" : "var gradientStartColor: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdataseriesconfiguration\/legendtitle",
                "title" : "var legendTitle: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdataseriesconfiguration\/markersize",
                "title" : "var markerSize: CGFloat",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdataseriesconfiguration\/taskid",
                "title" : "var taskID: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdataseriesconfiguration",
            "title" : "OCKDataSeriesConfiguration",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocklog\/level",
                "title" : "static var level: OSLogType",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/ocklog",
            "title" : "OCKLog",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockoutcomenotification\/category",
                "title" : "let category: OCKStoreNotificationCategory",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockoutcomenotification\/outcome",
                "title" : "let outcome: OCKAnyOutcome",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockoutcomenotification\/storemanager",
                "title" : "let storeManager: OCKSynchronizedStoreManager",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/ockoutcomenotification",
            "title" : "OCKOutcomeNotification",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockpatientnotification\/category",
                "title" : "let category: OCKStoreNotificationCategory",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockpatientnotification\/patient",
                "title" : "let patient: OCKAnyPatient",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockpatientnotification\/storemanager",
                "title" : "let storeManager: OCKSynchronizedStoreManager",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/ockpatientnotification",
            "title" : "OCKPatientNotification",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizationcontext\/init(viewmodel:oldviewmodel:animated:)",
                "title" : "init(viewModel: ViewModel, oldViewModel: ViewModel, animated: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizationcontext\/animated",
                "title" : "let animated: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizationcontext\/oldviewmodel",
                "title" : "let oldViewModel: ViewModel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizationcontext\/viewmodel",
                "title" : "let viewModel: ViewModel",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/ocksynchronizationcontext",
            "title" : "OCKSynchronizationContext",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/init(events:)",
                "title" : "init(events: [OCKAnyEvent])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/endindex",
                "title" : "var endIndex: Index",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/id-94pa3",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/startindex",
                "title" : "var startIndex: Index",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/tasks",
                "title" : "var tasks: [OCKAnyTask]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/append(event:)",
                "title" : "func append(event: OCKAnyEvent) -> (OCKAnyEvent?, Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/contains(event:)",
                "title" : "func contains(event: OCKAnyEvent) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/events(fortask:)",
                "title" : "func events(forTask: OCKAnyTask) -> [OCKAnyEvent]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/index(after:)",
                "title" : "func index(after: Index) -> Index",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/makeiterator()",
                "title" : "func makeIterator() -> Iterator",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/remove(event:)",
                "title" : "func remove(event: OCKAnyEvent) -> OCKAnyEvent?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/update(event:)",
                "title" : "func update(event: OCKAnyEvent) -> OCKAnyEvent?",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/subscript(_:)-429hr",
                "title" : "subscript(Index) -> Iterator.Element",
                "type" : "subscript"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/subscript(_:)-vzqu",
                "title" : "subscript(Range<IndexPath.Index>) -> SubSequence",
                "type" : "subscript"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/element",
                "title" : "OCKTaskEvents.Element",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/index",
                "title" : "OCKTaskEvents.Index",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/iterator",
                "title" : "OCKTaskEvents.Iterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/subsequence",
                "title" : "OCKTaskEvents.SubSequence",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/count",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/indices",
                    "title" : "var indices: DefaultIndices<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/underestimatedcount-79joa",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/distance(from:to:)",
                    "title" : "func distance(from: Self.Index, to: Self.Index) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/firstindex(of:)",
                    "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/formindex(after:)",
                    "title" : "func formIndex(after: inout Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/index(_:offsetby:)",
                    "title" : "func index(Self.Index, offsetBy: Int) -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/map(_:)-1dlmp",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/popfirst()",
                    "title" : "func popFirst() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/removefirst()",
                    "title" : "func removeFirst() -> Self.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/removefirst(_:)",
                    "title" : "func removeFirst(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/split(separator:maxsplits:omittingemptysubsequences:)-2dydm",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/subscript(_:)-7ieke",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/subscript(_:)-bt8k",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/carekit\/ocktaskevents\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/id-5xu74",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekit\/ocktaskevents\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/underestimatedcount-5kqgv",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/contains(_:)",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/flatmap(_:)-2jj61",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/flatmap(_:)-4vl00",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/joined()",
                    "title" : "func joined() -> FlattenSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/map(_:)-4wyjy",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/sorted(using:)-8wz7j",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/sorted(using:)-987k8",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/split(separator:maxsplits:omittingemptysubsequences:)-g1m4",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/ocktaskevents\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/ocktaskevents",
            "title" : "OCKTaskEvents",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktasknotification\/category",
                "title" : "let category: OCKStoreNotificationCategory",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocktasknotification\/storemanager",
                "title" : "let storeManager: OCKSynchronizedStoreManager",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocktasknotification\/task",
                "title" : "let task: OCKAnyTask",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/ocktasknotification",
            "title" : "OCKTaskNotification",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/simpletaskview\/init(controller:)",
                "title" : "init(controller: OCKSimpleTaskController)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/simpletaskview\/init(controller:content:)",
                "title" : "init(controller: OCKSimpleTaskController, content: (_ controller: OCKSimpleTaskController) -> CareKitUI.SimpleTaskView<Header, DetailDisclosure>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/simpletaskview\/init(task:eventquery:storemanager:)",
                "title" : "init(task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/simpletaskview\/init(task:eventquery:storemanager:content:)",
                "title" : "init(task: OCKAnyTask, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager, content: (_ controller: OCKSimpleTaskController) -> CareKitUI.SimpleTaskView<Header, DetailDisclosure>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/simpletaskview\/init(taskid:eventquery:storemanager:)",
                "title" : "init(taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/simpletaskview\/init(taskid:eventquery:storemanager:content:)",
                "title" : "init(taskID: String, eventQuery: OCKEventQuery, storeManager: OCKSynchronizedStoreManager, content: (_ controller: OCKSimpleTaskController) -> CareKitUI.SimpleTaskView<Header, DetailDisclosure>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/simpletaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/simpletaskview\/onerror(_:)",
                "title" : "func onError((Error) -> Void) -> SimpleTaskView<Header, DetailDisclosure>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibility(activationpoint:)-3y4iy",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibility(activationpoint:)-9krou",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityaction(named:_:)",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityactivationpoint(_:)-1bc2l",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityactivationpoint(_:)-7d1n1",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-1hors",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-3g0gd",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-3xlha",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-5dnxr",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-6rmx",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-719ut",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-93xsz",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-p1nw",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityhint(_:)-4adux",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityhint(_:)-7fa2o",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityhint(_:)-hjov",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityinputlabels(_:)-16729",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityinputlabels(_:)-1kat7",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityinputlabels(_:)-mul",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitylabel(_:)-1t0ni",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitylabel(_:)-2m3p9",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitylabel(_:)-6qkbp",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:entries:)-1i9hz",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:entries:)-4ph35",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:entries:)-58syc",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:entries:)-9qnt5",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-3osss",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6bdqg",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8xhzr",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9n18",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-3q6ih",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-44ry6",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-4a614",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-68yfa",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:textranges:)-15wxw",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:textranges:)-1b21",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:textranges:)-5ml8j",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotor(_:textranges:)-9efhy",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityvalue(_:)-46qmo",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityvalue(_:)-46w7r",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/accessibilityvalue(_:)-7pglz",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(_:ispresented:actions:)-1ptza",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(_:ispresented:actions:)-2hf3q",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(_:ispresented:actions:)-60pl0",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(_:ispresented:actions:message:)-5cubk",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(_:ispresented:actions:message:)-719hf",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(_:ispresented:actions:message:)-fg17",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(_:ispresented:presenting:actions:)-5dg33",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(_:ispresented:presenting:actions:)-79ate",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(_:ispresented:presenting:actions:)-8r9rb",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(_:ispresented:presenting:actions:message:)-2wa1z",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(_:ispresented:presenting:actions:message:)-4b5dj",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(_:ispresented:presenting:actions:message:)-6atqg",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alignmentguide(_:computevalue:)-5du0o",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/alignmentguide(_:computevalue:)-7zbol",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/aspectratio(_:contentmode:)-4y1hv",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/aspectratio(_:contentmode:)-52uwd",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/background(_:in:fillstyle:)-35ykb",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/background(_:in:fillstyle:)-9kijr",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/background(in:fillstyle:)-503iy",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/background(in:fillstyle:)-8lzfr",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/badge(_:)-275ei",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/badge(_:)-38q82",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/badge(_:)-63x7b",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/badge(_:)-97c7n",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/buttonstyle(_:)-8nd9h",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/buttonstyle(_:)-w5c8",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2raqp",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-8ynnt",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-94wmc",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-63yc6",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-69wgf",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6us0g",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-205bv",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-2dvvo",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-5ukwn",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-5m4v4",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-87zkz",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-h6op",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/dynamictypesize(_:)-3yibh",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/dynamictypesize(_:)-3z9zu",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-1hg94",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5eeqt",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-345os",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-9ngbq",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/focusedscenevalue(_:_:)",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/focusedvalue(_:_:)",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/help(_:)-28n2h",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/help(_:)-3fhh4",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/help(_:)-710ao",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/keyboardshortcut(_:)-1qed9",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/keyboardshortcut(_:)-870xt",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/listitemtint(_:)-3a3rn",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/listitemtint(_:)-3xa7a",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationbartitle(_:)-3ky5s",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationbartitle(_:)-717cq",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationbartitle(_:)-8zzhm",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationbartitle(_:displaymode:)-4n34p",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationbartitle(_:displaymode:)-5lsvr",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationbartitle(_:displaymode:)-7psud",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationtitle(_:)-56gnw",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationtitle(_:)-7zuxo",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationtitle(_:)-9ogr",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationtitle(_:)-9yxhb",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/ondrop(of:delegate:)-30lqn",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/ondrop(of:delegate:)-85sfg",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/ondrop(of:istargeted:perform:)-4s8qz",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/ondrop(of:istargeted:perform:)-6qwco",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/ondrop(of:istargeted:perform:)-7phlb",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/ondrop(of:istargeted:perform:)-8nw9c",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/padding(_:)-64w2h",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/padding(_:)-6x9bn",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/safeareainset(edge:alignment:spacing:content:)-2yyt7",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/safeareainset(edge:alignment:spacing:content:)-9vcz4",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/scaleeffect(_:anchor:)-5j6d5",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/scaleeffect(_:anchor:)-hub5",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchcompletion(_:)-6u9tn",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchcompletion(_:)-8wf0n",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:placement:prompt:)-2afv8",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:placement:prompt:)-7jmhx",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:placement:prompt:)-830z9",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:placement:prompt:suggestions:)-488gp",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:placement:prompt:suggestions:)-49lgk",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:placement:prompt:suggestions:)-5wr8m",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:scope:placement:prompt:scopes:)-2n1in",
                    "title" : "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:scope:placement:prompt:scopes:)-3setx",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:scope:placement:prompt:scopes:)-q8my",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-6kc71",
                    "title" : "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-8g7yw",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-iwvd",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:tokens:placement:prompt:token:)-1049m",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:tokens:placement:prompt:token:)-1f78u",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:tokens:placement:prompt:token:)-2o81i",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-1luuj",
                    "title" : "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-2r2aw",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-8xc7t",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-74xqf",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-797rm",
                    "title" : "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-8l892",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-57jc8",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-5gm31",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-6jctm",
                    "title" : "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-4i38",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-4y0f5",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-684j5",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekit\/simpletaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/texttransition(_:)",
                    "title" : "func textTransition(Text.Transition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/toolbar(_:in:)",
                    "title" : "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/toolbar(content:)-3v8wc",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/toolbar(content:)-7czj5",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/toolbarbackground(_:in:)-31wkv",
                    "title" : "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/toolbarbackground(_:in:)-8ra7g",
                    "title" : "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/toolbarcolorscheme(_:in:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/simpletaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/simpletaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/simpletaskview",
            "title" : "SimpleTaskView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/simpletaskviewmodel\/action",
                "title" : "let action: () -> Void",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/simpletaskviewmodel\/detail",
                "title" : "let detail: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/simpletaskviewmodel\/iscomplete",
                "title" : "let isComplete: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/simpletaskviewmodel\/title",
                "title" : "let title: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/simpletaskviewmodel",
            "title" : "SimpleTaskViewModel",
            "type" : "struct"
          },
          {
            "title" : "Type Aliases",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/carekit\/ockcartesianchartcontroller",
            "title" : "OCKCartesianChartController",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/carekit\/ockchecklisttaskcontroller",
            "title" : "OCKChecklistTaskController",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/carekit\/ockdetailedcontactcontroller",
            "title" : "OCKDetailedContactController",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/carekit\/ockgridtaskcontroller",
            "title" : "OCKGridTaskController",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/carekit\/ocksimplecontactcontroller",
            "title" : "OCKSimpleContactController",
            "type" : "typealias"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockstorenotificationcategory\/add",
                "title" : "case add",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekit\/ockstorenotificationcategory\/delete",
                "title" : "case delete",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekit\/ockstorenotificationcategory\/update",
                "title" : "case update",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ockstorenotificationcategory\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockstorenotificationcategory\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/ockstorenotificationcategory",
            "title" : "OCKStoreNotificationCategory",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/carekit",
        "title" : "CareKit",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/init(store:)",
                "title" : "init(store: OCKStore)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/outcomedelegate",
                "title" : "var outcomeDelegate: OCKOutcomeStoreDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/resetdelegate",
                "title" : "var resetDelegate: OCKResetDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/taskdelegate",
                "title" : "var taskDelegate: OCKTaskStoreDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchtasks(for:)",
                "title" : "func fetchTasks(for: [OCKHealthKitOutcome]) throws -> [OCKHealthKitTask]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/requesthealthkitpermissionsforalltasksinstore(completion:)",
                "title" : "func requestHealthKitPermissionsForAllTasksInStore(completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/reset()",
                "title" : "func reset() throws",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/outcome",
                "title" : "OCKHealthKitPassthroughStore.Outcome",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/task",
                "title" : "OCKHealthKitPassthroughStore.Task",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanyoutcome(_:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanyoutcomes(_:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanyoutcome(_:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanyoutcomes(_:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanyoutcome(_:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanyoutcomes(_:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockanyoutcomestore-implementations",
                "title" : "OCKAnyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchadherence(query:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery) async throws -> [OCKAdherence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchadherence(query:callbackqueue:completion:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAdherence]>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyevent(fortask:occurrence:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int) async throws -> OCKAnyEvent",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyevent(fortask:occurrence:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyEvent>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyevents(taskid:query:)",
                    "title" : "func fetchAnyEvents(taskID: String, query: OCKEventQuery) async throws -> [OCKAnyEvent]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyevents(taskid:query:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvents(taskID: String, query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyEvent]>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchinsights(query:)",
                    "title" : "func fetchInsights(query: OCKInsightQuery) async throws -> [Double]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchinsights(query:callbackqueue:completion:)",
                    "title" : "func fetchInsights(query: OCKInsightQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Double]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockanyreadonlyeventstore-implementations",
                "title" : "OCKAnyReadOnlyEventStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyoutcome(query:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyoutcome(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyoutcomes(query:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyoutcomes(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockanyreadonlyoutcomestore-implementations",
                "title" : "OCKAnyReadOnlyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanytask(withid:)",
                    "title" : "func fetchAnyTask(withID: String) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanytask(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanytasks(query:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanytasks(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockanyreadonlytaskstore-implementations",
                "title" : "OCKAnyReadOnlyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanytask(_:)",
                    "title" : "func addAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanytask(_:callbackqueue:completion:)",
                    "title" : "func addAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanytasks(_:)",
                    "title" : "func addAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanytasks(_:callbackqueue:completion:)",
                    "title" : "func addAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanytask(_:)",
                    "title" : "func deleteAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanytask(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanytasks(_:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanytasks(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanytask(_:)",
                    "title" : "func updateAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanytask(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanytasks(_:)",
                    "title" : "func updateAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanytasks(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockanytaskstore-implementations",
                "title" : "OCKAnyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addoutcome(_:)",
                    "title" : "func addOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addoutcome(_:callbackqueue:completion:)",
                    "title" : "func addOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addoutcomes(_:)",
                    "title" : "func addOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addoutcomes(_:callbackqueue:completion:)",
                    "title" : "func addOutcomes([OCKHealthKitOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteoutcome(_:)",
                    "title" : "func deleteOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteoutcome(_:callbackqueue:completion:)",
                    "title" : "func deleteOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteoutcomes(_:)",
                    "title" : "func deleteOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteoutcomes(_:callbackqueue:completion:)",
                    "title" : "func deleteOutcomes([OCKHealthKitOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateoutcome(_:)",
                    "title" : "func updateOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateoutcome(_:callbackqueue:completion:)",
                    "title" : "func updateOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateoutcomes(_:)",
                    "title" : "func updateOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateoutcomes(_:callbackqueue:completion:)",
                    "title" : "func updateOutcomes([OCKHealthKitOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockoutcomestore-implementations",
                "title" : "OCKOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchevent(fortask:occurrence:)",
                    "title" : "func fetchEvent(forTask: Task, occurrence: Int) async throws -> Event",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchevent(fortask:occurrence:callbackqueue:completion:)",
                    "title" : "func fetchEvent(forTask: Task, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<Event>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchevents(taskid:query:)",
                    "title" : "func fetchEvents(taskID: String, query: OCKEventQuery) async throws -> [Event]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchevents(taskid:query:callbackqueue:completion:)",
                    "title" : "func fetchEvents(taskID: String, query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKEvent<Task, Outcome>]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockreadonlyeventstore-implementations",
                "title" : "OCKReadOnlyEventStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchoutcome(query:)",
                    "title" : "func fetchOutcome(query: OCKOutcomeQuery) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchoutcome(query:callbackqueue:completion:)",
                    "title" : "func fetchOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchoutcomes(query:)",
                    "title" : "func fetchOutcomes(query: OCKOutcomeQuery) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchoutcomes(query:callbackqueue:completion:)",
                    "title" : "func fetchOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKHealthKitOutcome], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockreadableoutcomestore-implementations",
                "title" : "OCKReadableOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchtask(withid:)",
                    "title" : "func fetchTask(withID: String) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchtask(withid:callbackqueue:completion:)",
                    "title" : "func fetchTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchtasks(query:)",
                    "title" : "func fetchTasks(query: OCKTaskQuery) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchtasks(query:callbackqueue:completion:)",
                    "title" : "func fetchTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKHealthKitTask], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockreadabletaskstore-implementations",
                "title" : "OCKReadableTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addtask(_:)",
                    "title" : "func addTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addtask(_:callbackqueue:completion:)",
                    "title" : "func addTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addtasks(_:)",
                    "title" : "func addTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addtasks(_:callbackqueue:completion:)",
                    "title" : "func addTasks([OCKHealthKitTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deletetask(_:)",
                    "title" : "func deleteTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deletetask(_:callbackqueue:completion:)",
                    "title" : "func deleteTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deletetasks(_:)",
                    "title" : "func deleteTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deletetasks(_:callbackqueue:completion:)",
                    "title" : "func deleteTasks([OCKHealthKitTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updatetask(_:)",
                    "title" : "func updateTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updatetask(_:callbackqueue:completion:)",
                    "title" : "func updateTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updatetasks(_:)",
                    "title" : "func updateTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updatetasks(_:callbackqueue:completion:)",
                    "title" : "func updateTasks([OCKHealthKitTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ocktaskstore-implementations",
                "title" : "OCKTaskStore Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore",
            "title" : "OCKHealthKitPassthroughStore",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpostaladdress\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpostaladdress\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpostaladdress\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockpostaladdress",
            "title" : "OCKPostalAddress",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/==(_:_:)",
                "title" : "static func == (OCKStore, OCKStore) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/init(name:securityapplicationgroupidentifier:type:remote:)",
                "title" : "init(name: String, securityApplicationGroupIdentifier: String?, type: OCKCoreDataStoreType, remote: OCKRemoteSynchronizable?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/careplandelegate",
                "title" : "var carePlanDelegate: OCKCarePlanStoreDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/contactdelegate",
                "title" : "var contactDelegate: OCKContactStoreDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/name",
                "title" : "let name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/outcomedelegate",
                "title" : "var outcomeDelegate: OCKOutcomeStoreDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/patientdelegate",
                "title" : "var patientDelegate: OCKPatientStoreDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/resetdelegate",
                "title" : "var resetDelegate: OCKResetDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/securityapplicationgroupidentifier",
                "title" : "let securityApplicationGroupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/taskdelegate",
                "title" : "var taskDelegate: OCKTaskStoreDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/delete()",
                "title" : "func delete() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/reset()",
                "title" : "func reset() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/synchronize(completion:)",
                "title" : "func synchronize(completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycareplan(_:)",
                    "title" : "func addAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycareplan(_:callbackqueue:completion:)",
                    "title" : "func addAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycareplans(_:)",
                    "title" : "func addAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycareplans(_:callbackqueue:completion:)",
                    "title" : "func addAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycareplan(_:)",
                    "title" : "func deleteAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycareplan(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycareplans(_:)",
                    "title" : "func deleteAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycareplans(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycareplan(_:)",
                    "title" : "func updateAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycareplan(_:callbackqueue:completion:)",
                    "title" : "func updateAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycareplans(_:)",
                    "title" : "func updateAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycareplans(_:callbackqueue:completion:)",
                    "title" : "func updateAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanycareplanstore-implementations",
                "title" : "OCKAnyCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycontact(_:)",
                    "title" : "func addAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycontact(_:callbackqueue:completion:)",
                    "title" : "func addAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycontacts(_:)",
                    "title" : "func addAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycontacts(_:callbackqueue:completion:)",
                    "title" : "func addAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycontact(_:)",
                    "title" : "func deleteAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycontact(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycontacts(_:)",
                    "title" : "func deleteAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycontacts(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycontact(_:)",
                    "title" : "func updateAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycontact(_:callbackqueue:completion:)",
                    "title" : "func updateAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycontacts(_:)",
                    "title" : "func updateAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycontacts(_:callbackqueue:completion:)",
                    "title" : "func updateAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanycontactstore-implementations",
                "title" : "OCKAnyContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanyoutcome(_:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanyoutcomes(_:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanyoutcome(_:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanyoutcomes(_:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanyoutcome(_:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanyoutcomes(_:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyoutcomestore-implementations",
                "title" : "OCKAnyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanypatient(_:)",
                    "title" : "func addAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanypatient(_:callbackqueue:completion:)",
                    "title" : "func addAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanypatients(_:)",
                    "title" : "func addAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanypatients(_:callbackqueue:completion:)",
                    "title" : "func addAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanypatient(_:)",
                    "title" : "func deleteAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanypatient(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanypatients(_:)",
                    "title" : "func deleteAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanypatients(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanypatient(_:)",
                    "title" : "func updateAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanypatient(_:callbackqueue:completion:)",
                    "title" : "func updateAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanypatients(_:)",
                    "title" : "func updateAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanypatients(_:callbackqueue:completion:)",
                    "title" : "func updateAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanypatientstore-implementations",
                "title" : "OCKAnyPatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycareplan(withid:)",
                    "title" : "func fetchAnyCarePlan(withID: String) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycareplan(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycareplans(query:)",
                    "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycareplans(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlycareplanstore-implementations",
                "title" : "OCKAnyReadOnlyCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycontact(withid:)",
                    "title" : "func fetchAnyContact(withID: String) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycontact(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycontacts(query:)",
                    "title" : "func fetchAnyContacts(query: OCKContactQuery) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycontacts(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlycontactstore-implementations",
                "title" : "OCKAnyReadOnlyContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchadherence(query:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery) async throws -> [OCKAdherence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchadherence(query:callbackqueue:completion:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAdherence]>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyevent(fortask:occurrence:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int) async throws -> OCKAnyEvent",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyevent(fortask:occurrence:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyEvent>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyevents(taskid:query:)",
                    "title" : "func fetchAnyEvents(taskID: String, query: OCKEventQuery) async throws -> [OCKAnyEvent]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyevents(taskid:query:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvents(taskID: String, query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyEvent]>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchinsights(query:)",
                    "title" : "func fetchInsights(query: OCKInsightQuery) async throws -> [Double]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchinsights(query:callbackqueue:completion:)",
                    "title" : "func fetchInsights(query: OCKInsightQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Double]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlyeventstore-implementations",
                "title" : "OCKAnyReadOnlyEventStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyoutcome(query:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyoutcome(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyoutcomes(query:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyoutcomes(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlyoutcomestore-implementations",
                "title" : "OCKAnyReadOnlyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanypatient(withid:)",
                    "title" : "func fetchAnyPatient(withID: String) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanypatient(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanypatients(query:)",
                    "title" : "func fetchAnyPatients(query: OCKPatientQuery) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanypatients(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlypatientstore-implementations",
                "title" : "OCKAnyReadOnlyPatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanytask(withid:)",
                    "title" : "func fetchAnyTask(withID: String) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanytask(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanytasks(query:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanytasks(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlytaskstore-implementations",
                "title" : "OCKAnyReadOnlyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanytask(_:)",
                    "title" : "func addAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanytask(_:callbackqueue:completion:)",
                    "title" : "func addAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanytasks(_:)",
                    "title" : "func addAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanytasks(_:callbackqueue:completion:)",
                    "title" : "func addAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanytask(_:)",
                    "title" : "func deleteAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanytask(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanytasks(_:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanytasks(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanytask(_:)",
                    "title" : "func updateAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanytask(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanytasks(_:)",
                    "title" : "func updateAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanytasks(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanytaskstore-implementations",
                "title" : "OCKAnyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcareplan(_:)",
                    "title" : "func addCarePlan(Plan) async throws -> Plan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcareplan(_:callbackqueue:completion:)",
                    "title" : "func addCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcareplans(_:)",
                    "title" : "func addCarePlans([Plan]) async throws -> [Plan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcareplans(_:callbackqueue:completion:)",
                    "title" : "func addCarePlans([OCKCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecareplan(_:)",
                    "title" : "func deleteCarePlan(Plan) async throws -> Plan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecareplan(_:callbackqueue:completion:)",
                    "title" : "func deleteCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecareplans(_:)",
                    "title" : "func deleteCarePlans([Plan]) async throws -> [Plan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecareplans(_:callbackqueue:completion:)",
                    "title" : "func deleteCarePlans([OCKCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecareplan(_:)",
                    "title" : "func updateCarePlan(Plan) async throws -> Plan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecareplan(_:callbackqueue:completion:)",
                    "title" : "func updateCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecareplans(_:)",
                    "title" : "func updateCarePlans([Plan]) async throws -> [Plan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecareplans(_:callbackqueue:completion:)",
                    "title" : "func updateCarePlans([OCKCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockcareplanstore-implementations",
                "title" : "OCKCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcontact(_:)",
                    "title" : "func addContact(Contact) async throws -> Contact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcontact(_:callbackqueue:completion:)",
                    "title" : "func addContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcontacts(_:)",
                    "title" : "func addContacts([Contact]) async throws -> [Contact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcontacts(_:callbackqueue:completion:)",
                    "title" : "func addContacts([OCKContact], callbackQueue: DispatchQueue, completion: ((Result<[OCKContact], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecontact(_:)",
                    "title" : "func deleteContact(Contact) async throws -> Contact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecontact(_:callbackqueue:completion:)",
                    "title" : "func deleteContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecontacts(_:)",
                    "title" : "func deleteContacts([Contact]) async throws -> [Contact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecontacts(_:callbackqueue:completion:)",
                    "title" : "func deleteContacts([OCKContact], callbackQueue: DispatchQueue, completion: ((Result<[OCKContact], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecontact(_:)",
                    "title" : "func updateContact(Contact) async throws -> Contact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecontact(_:callbackqueue:completion:)",
                    "title" : "func updateContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecontacts(_:)",
                    "title" : "func updateContacts([Contact]) async throws -> [Contact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecontacts(_:callbackqueue:completion:)",
                    "title" : "func updateContacts([OCKContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKContact]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockcontactstore-implementations",
                "title" : "OCKContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addoutcome(_:)",
                    "title" : "func addOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addoutcome(_:callbackqueue:completion:)",
                    "title" : "func addOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addoutcomes(_:)",
                    "title" : "func addOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addoutcomes(_:callbackqueue:completion:)",
                    "title" : "func addOutcomes([OCKOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteoutcome(_:)",
                    "title" : "func deleteOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteoutcome(_:callbackqueue:completion:)",
                    "title" : "func deleteOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteoutcomes(_:)",
                    "title" : "func deleteOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteoutcomes(_:callbackqueue:completion:)",
                    "title" : "func deleteOutcomes([OCKOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateoutcome(_:)",
                    "title" : "func updateOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateoutcome(_:callbackqueue:completion:)",
                    "title" : "func updateOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateoutcomes(_:)",
                    "title" : "func updateOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateoutcomes(_:callbackqueue:completion:)",
                    "title" : "func updateOutcomes([OCKOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockoutcomestore-implementations",
                "title" : "OCKOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addpatient(_:)",
                    "title" : "func addPatient(Patient) async throws -> Patient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addpatient(_:callbackqueue:completion:)",
                    "title" : "func addPatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addpatients(_:)",
                    "title" : "func addPatients([Patient]) async throws -> [Patient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addpatients(_:callbackqueue:completion:)",
                    "title" : "func addPatients([OCKPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletepatient(_:)",
                    "title" : "func deletePatient(Patient) async throws -> Patient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletepatient(_:callbackqueue:completion:)",
                    "title" : "func deletePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletepatients(_:)",
                    "title" : "func deletePatients([Patient]) async throws -> [Patient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletepatients(_:callbackqueue:completion:)",
                    "title" : "func deletePatients([OCKPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatepatient(_:)",
                    "title" : "func updatePatient(Patient) async throws -> Patient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatepatient(_:callbackqueue:completion:)",
                    "title" : "func updatePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatepatients(_:)",
                    "title" : "func updatePatients([Patient]) async throws -> [Patient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatepatients(_:callbackqueue:completion:)",
                    "title" : "func updatePatients([OCKPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockpatientstore-implementations",
                "title" : "OCKPatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchevent(fortask:occurrence:)",
                    "title" : "func fetchEvent(forTask: Task, occurrence: Int) async throws -> Event",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchevent(fortask:occurrence:callbackqueue:completion:)",
                    "title" : "func fetchEvent(forTask: Task, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<Event>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchevents(taskid:query:)",
                    "title" : "func fetchEvents(taskID: String, query: OCKEventQuery) async throws -> [Event]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchevents(taskid:query:callbackqueue:completion:)",
                    "title" : "func fetchEvents(taskID: String, query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKEvent<Task, Outcome>]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadonlyeventstore-implementations",
                "title" : "OCKReadOnlyEventStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcareplan(withid:)",
                    "title" : "func fetchCarePlan(withID: String) async throws -> Plan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcareplan(withid:callbackqueue:completion:)",
                    "title" : "func fetchCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcareplans(query:)",
                    "title" : "func fetchCarePlans(query: OCKCarePlanQuery) async throws -> [Plan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcareplans(query:callbackqueue:completion:)",
                    "title" : "func fetchCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKCarePlan], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadablecareplanstore-implementations",
                "title" : "OCKReadableCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcontact(withid:)",
                    "title" : "func fetchContact(withID: String) async throws -> Contact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcontact(withid:callbackqueue:completion:)",
                    "title" : "func fetchContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcontacts(query:)",
                    "title" : "func fetchContacts(query: OCKContactQuery) async throws -> [Contact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcontacts(query:callbackqueue:completion:)",
                    "title" : "func fetchContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKContact], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadablecontactstore-implementations",
                "title" : "OCKReadableContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchoutcome(query:)",
                    "title" : "func fetchOutcome(query: OCKOutcomeQuery) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchoutcome(query:callbackqueue:completion:)",
                    "title" : "func fetchOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchoutcomes(query:)",
                    "title" : "func fetchOutcomes(query: OCKOutcomeQuery) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchoutcomes(query:callbackqueue:completion:)",
                    "title" : "func fetchOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKOutcome], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadableoutcomestore-implementations",
                "title" : "OCKReadableOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchpatient(withid:)",
                    "title" : "func fetchPatient(withID: String) async throws -> Patient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchpatient(withid:callbackqueue:completion:)",
                    "title" : "func fetchPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchpatients(query:)",
                    "title" : "func fetchPatients(query: OCKPatientQuery) async throws -> [Patient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchpatients(query:callbackqueue:completion:)",
                    "title" : "func fetchPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKPatient], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadablepatientstore-implementations",
                "title" : "OCKReadablePatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchtask(withid:)",
                    "title" : "func fetchTask(withID: String) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchtask(withid:callbackqueue:completion:)",
                    "title" : "func fetchTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchtasks(query:)",
                    "title" : "func fetchTasks(query: OCKTaskQuery) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchtasks(query:callbackqueue:completion:)",
                    "title" : "func fetchTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKTask], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadabletaskstore-implementations",
                "title" : "OCKReadableTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/didrequestsynchronization(_:)",
                    "title" : "func didRequestSynchronization(OCKRemoteSynchronizable)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/remote(_:didupdateprogress:)",
                    "title" : "func remote(OCKRemoteSynchronizable, didUpdateProgress: Double)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockremotesynchronizationdelegate-implementations",
                "title" : "OCKRemoteSynchronizationDelegate Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addtask(_:)",
                    "title" : "func addTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addtask(_:callbackqueue:completion:)",
                    "title" : "func addTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addtasks(_:)",
                    "title" : "func addTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addtasks(_:callbackqueue:completion:)",
                    "title" : "func addTasks([OCKTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletetask(_:)",
                    "title" : "func deleteTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletetask(_:callbackqueue:completion:)",
                    "title" : "func deleteTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletetasks(_:)",
                    "title" : "func deleteTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletetasks(_:callbackqueue:completion:)",
                    "title" : "func deleteTasks([OCKTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatetask(_:)",
                    "title" : "func updateTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatetask(_:callbackqueue:completion:)",
                    "title" : "func updateTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatetasks(_:)",
                    "title" : "func updateTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatetasks(_:callbackqueue:completion:)",
                    "title" : "func updateTasks([OCKTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ocktaskstore-implementations",
                "title" : "OCKTaskStore Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockstore",
            "title" : "OCKStore",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/careplandelegate",
                "title" : "var carePlanDelegate: OCKCarePlanStoreDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/contactdelegate",
                "title" : "var contactDelegate: OCKContactStoreDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/outcomedelegate",
                "title" : "var outcomeDelegate: OCKOutcomeStoreDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/patientdelegate",
                "title" : "var patientDelegate: OCKPatientStoreDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/resetdelegate",
                "title" : "var resetDelegate: OCKResetDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/taskdelegate",
                "title" : "var taskDelegate: OCKTaskStoreDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attach(contactstore:)",
                "title" : "func attach(contactStore: OCKAnyContactStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attach(eventstore:)",
                "title" : "func attach(eventStore: OCKAnyEventStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attach(patientstore:)",
                "title" : "func attach(patientStore: OCKAnyPatientStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attach(planstore:)",
                "title" : "func attach(planStore: OCKAnyCarePlanStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attach(store:)",
                "title" : "func attach(store: OCKAnyStoreProtocol)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attachreadonly(careplanstore:)",
                "title" : "func attachReadOnly(carePlanStore: OCKAnyReadOnlyCarePlanStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attachreadonly(contactstore:)",
                "title" : "func attachReadOnly(contactStore: OCKAnyReadOnlyContactStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attachreadonly(eventstore:)",
                "title" : "func attachReadOnly(eventStore: OCKAnyReadOnlyEventStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attachreadonly(patientstore:)",
                "title" : "func attachReadOnly(patientStore: OCKAnyReadOnlyPatientStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/careplanstore(_:shouldhandlequery:)",
                "title" : "func carePlanStore(OCKAnyReadOnlyCarePlanStore, shouldHandleQuery: OCKCarePlanQuery) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/careplanstore(_:shouldhandlewritingcareplan:)",
                "title" : "func carePlanStore(OCKAnyCarePlanStore, shouldHandleWritingCarePlan: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/contactstore(_:shouldhandlequery:)",
                "title" : "func contactStore(OCKAnyReadOnlyContactStore, shouldHandleQuery: OCKContactQuery) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/contactstore(_:shouldhandlewritingcontact:)",
                "title" : "func contactStore(OCKAnyReadOnlyContactStore, shouldHandleWritingContact: OCKAnyContact) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/outcomestore(_:shouldhandlequery:)",
                "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, shouldHandleQuery: OCKOutcomeQuery) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/outcomestore(_:shouldhandlewritingoutcome:)",
                "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, shouldHandleWritingOutcome: OCKAnyOutcome) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/patientstore(_:shouldhandlequery:)",
                "title" : "func patientStore(OCKAnyReadOnlyPatientStore, shouldHandleQuery: OCKPatientQuery) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/patientstore(_:shouldhandlewritingpatient:)",
                "title" : "func patientStore(OCKAnyPatientStore, shouldHandleWritingPatient: OCKAnyPatient) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/reset()",
                "title" : "func reset() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/storedidreset(_:)",
                "title" : "func storeDidReset(OCKAnyResettableStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/taskstore(_:shouldhandlequery:)",
                "title" : "func taskStore(OCKAnyReadOnlyTaskStore, shouldHandleQuery: OCKTaskQuery) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/taskstore(_:shouldhandlewritingtask:)",
                "title" : "func taskStore(OCKAnyReadOnlyTaskStore, shouldHandleWritingTask: OCKAnyTask) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycareplan(_:)",
                    "title" : "func addAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycareplan(_:callbackqueue:completion:)",
                    "title" : "func addAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycareplans(_:)",
                    "title" : "func addAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycareplans(_:callbackqueue:completion:)",
                    "title" : "func addAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycareplan(_:)",
                    "title" : "func deleteAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycareplan(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycareplans(_:)",
                    "title" : "func deleteAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycareplans(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycareplan(_:)",
                    "title" : "func updateAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycareplan(_:callbackqueue:completion:)",
                    "title" : "func updateAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycareplans(_:)",
                    "title" : "func updateAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycareplans(_:callbackqueue:completion:)",
                    "title" : "func updateAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanycareplanstore-implementations",
                "title" : "OCKAnyCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycontact(_:)",
                    "title" : "func addAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycontact(_:callbackqueue:completion:)",
                    "title" : "func addAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycontacts(_:)",
                    "title" : "func addAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycontacts(_:callbackqueue:completion:)",
                    "title" : "func addAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyContact], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycontact(_:)",
                    "title" : "func deleteAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycontact(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycontacts(_:)",
                    "title" : "func deleteAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycontacts(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyContact], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycontact(_:)",
                    "title" : "func updateAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycontact(_:callbackqueue:completion:)",
                    "title" : "func updateAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycontacts(_:)",
                    "title" : "func updateAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycontacts(_:callbackqueue:completion:)",
                    "title" : "func updateAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyContact], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanycontactstore-implementations",
                "title" : "OCKAnyContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanyoutcome(_:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanyoutcomes(_:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanyoutcome(_:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanyoutcomes(_:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanyoutcome(_:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanyoutcomes(_:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyoutcomestore-implementations",
                "title" : "OCKAnyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanypatient(_:)",
                    "title" : "func addAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanypatient(_:callbackqueue:completion:)",
                    "title" : "func addAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanypatients(_:)",
                    "title" : "func addAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanypatients(_:callbackqueue:completion:)",
                    "title" : "func addAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanypatient(_:)",
                    "title" : "func deleteAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanypatient(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanypatients(_:)",
                    "title" : "func deleteAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanypatients(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanypatient(_:)",
                    "title" : "func updateAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanypatient(_:callbackqueue:completion:)",
                    "title" : "func updateAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanypatients(_:)",
                    "title" : "func updateAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanypatients(_:callbackqueue:completion:)",
                    "title" : "func updateAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanypatientstore-implementations",
                "title" : "OCKAnyPatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycareplan(withid:)",
                    "title" : "func fetchAnyCarePlan(withID: String) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycareplan(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycareplans(query:)",
                    "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycareplans(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKAnyCarePlan], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlycareplanstore-implementations",
                "title" : "OCKAnyReadOnlyCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycontact(withid:)",
                    "title" : "func fetchAnyContact(withID: String) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycontact(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycontacts(query:)",
                    "title" : "func fetchAnyContacts(query: OCKContactQuery) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycontacts(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKAnyContact], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlycontactstore-implementations",
                "title" : "OCKAnyReadOnlyContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchadherence(query:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery) async throws -> [OCKAdherence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchadherence(query:callbackqueue:completion:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAdherence]>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyevent(fortask:occurrence:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int) async throws -> OCKAnyEvent",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyevent(fortask:occurrence:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyEvent>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyevents(taskid:query:)",
                    "title" : "func fetchAnyEvents(taskID: String, query: OCKEventQuery) async throws -> [OCKAnyEvent]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyevents(taskid:query:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvents(taskID: String, query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyEvent]>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchinsights(query:)",
                    "title" : "func fetchInsights(query: OCKInsightQuery) async throws -> [Double]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchinsights(query:callbackqueue:completion:)",
                    "title" : "func fetchInsights(query: OCKInsightQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Double]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlyeventstore-implementations",
                "title" : "OCKAnyReadOnlyEventStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyoutcome(query:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyoutcome(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyoutcomes(query:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyoutcomes(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKAnyOutcome], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlyoutcomestore-implementations",
                "title" : "OCKAnyReadOnlyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanypatient(withid:)",
                    "title" : "func fetchAnyPatient(withID: String) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanypatient(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanypatients(query:)",
                    "title" : "func fetchAnyPatients(query: OCKPatientQuery) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanypatients(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlypatientstore-implementations",
                "title" : "OCKAnyReadOnlyPatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanytask(withid:)",
                    "title" : "func fetchAnyTask(withID: String) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanytask(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanytasks(query:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanytasks(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKAnyTask], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlytaskstore-implementations",
                "title" : "OCKAnyReadOnlyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanytask(_:)",
                    "title" : "func addAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanytask(_:callbackqueue:completion:)",
                    "title" : "func addAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanytasks(_:)",
                    "title" : "func addAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanytasks(_:callbackqueue:completion:)",
                    "title" : "func addAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanytask(_:)",
                    "title" : "func deleteAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanytask(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanytasks(_:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanytasks(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanytask(_:)",
                    "title" : "func updateAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanytask(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanytasks(_:)",
                    "title" : "func updateAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanytasks(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanytaskstore-implementations",
                "title" : "OCKAnyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/careplanstore(_:didaddcareplans:)",
                    "title" : "func carePlanStore(OCKAnyReadOnlyCarePlanStore, didAddCarePlans: [OCKAnyCarePlan])",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/careplanstore(_:diddeletecareplans:)",
                    "title" : "func carePlanStore(OCKAnyReadOnlyCarePlanStore, didDeleteCarePlans: [OCKAnyCarePlan])",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/careplanstore(_:didupdatecareplans:)",
                    "title" : "func carePlanStore(OCKAnyReadOnlyCarePlanStore, didUpdateCarePlans: [OCKAnyCarePlan])",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockcareplanstoredelegate-implementations",
                "title" : "OCKCarePlanStoreDelegate Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/contactstore(_:didaddcontacts:)",
                    "title" : "func contactStore(OCKAnyReadOnlyContactStore, didAddContacts: [OCKAnyContact])",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/contactstore(_:diddeletecontacts:)",
                    "title" : "func contactStore(OCKAnyReadOnlyContactStore, didDeleteContacts: [OCKAnyContact])",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/contactstore(_:didupdatecontacts:)",
                    "title" : "func contactStore(OCKAnyReadOnlyContactStore, didUpdateContacts: [OCKAnyContact])",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockcontactstoredelegate-implementations",
                "title" : "OCKContactStoreDelegate Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/outcomestore(_:didaddoutcomes:)",
                    "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, didAddOutcomes: [OCKAnyOutcome])",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/outcomestore(_:diddeleteoutcomes:)",
                    "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, didDeleteOutcomes: [OCKAnyOutcome])",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/outcomestore(_:didencounterunknownchange:)",
                    "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, didEncounterUnknownChange: String)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/outcomestore(_:didupdateoutcomes:)",
                    "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, didUpdateOutcomes: [OCKAnyOutcome])",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockoutcomestoredelegate-implementations",
                "title" : "OCKOutcomeStoreDelegate Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/patientstore(_:didaddpatients:)",
                    "title" : "func patientStore(OCKAnyReadOnlyPatientStore, didAddPatients: [OCKAnyPatient])",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/patientstore(_:diddeletepatients:)",
                    "title" : "func patientStore(OCKAnyReadOnlyPatientStore, didDeletePatients: [OCKAnyPatient])",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/patientstore(_:didupdatepatients:)",
                    "title" : "func patientStore(OCKAnyReadOnlyPatientStore, didUpdatePatients: [OCKAnyPatient])",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockpatientstoredelegate-implementations",
                "title" : "OCKPatientStoreDelegate Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/taskstore(_:didaddtasks:)",
                    "title" : "func taskStore(OCKAnyReadOnlyTaskStore, didAddTasks: [OCKAnyTask])",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/taskstore(_:diddeletetasks:)",
                    "title" : "func taskStore(OCKAnyReadOnlyTaskStore, didDeleteTasks: [OCKAnyTask])",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/taskstore(_:didupdatetasks:)",
                    "title" : "func taskStore(OCKAnyReadOnlyTaskStore, didUpdateTasks: [OCKAnyTask])",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ocktaskstoredelegate-implementations",
                "title" : "OCKTaskStoreDelegate Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockstorecoordinator",
            "title" : "OCKStoreCoordinator",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/automaticallysynchronizes",
                "title" : "var automaticallySynchronizes: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/delegate",
                "title" : "var delegate: OCKRemoteSynchronizationDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/chooseconflictresolution(conflicts:completion:)",
                "title" : "func chooseConflictResolution(conflicts: [OCKEntity], completion: OCKResultClosure<OCKEntity>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/pullrevisions(since:mergerevision:completion:)",
                "title" : "func pullRevisions(since: OCKRevisionRecord.KnowledgeVector, mergeRevision: (OCKRevisionRecord) -> Void, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/pushrevisions(devicerevision:completion:)",
                "title" : "func pushRevisions(deviceRevision: OCKRevisionRecord, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/reply(to:store:sendreply:)",
                "title" : "func reply(to: [String : Any], store: OCKStore, sendReply: (_ message: [String : Any]) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer",
            "title" : "OCKWatchConnectivityPeer",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyPatient) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanycareplan",
            "title" : "OCKAnyCarePlan",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplan(_:)",
                "title" : "func addAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplan(_:callbackqueue:completion:)-3zehz",
                        "title" : "func addAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplan(_:callbackqueue:completion:)-22ln2",
                "title" : "func addAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplans(_:)",
                "title" : "func addAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addanycareplans(_:callbackqueue:completion:)",
                        "title" : "func addAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplans(_:callbackqueue:completion:)",
                "title" : "func addAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplan(_:)",
                "title" : "func deleteAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplan(_:callbackqueue:completion:)-5p51",
                        "title" : "func deleteAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplan(_:callbackqueue:completion:)-2eqy7",
                "title" : "func deleteAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplans(_:)",
                "title" : "func deleteAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deleteanycareplans(_:callbackqueue:completion:)",
                        "title" : "func deleteAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplans(_:callbackqueue:completion:)",
                "title" : "func deleteAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplan(_:)",
                "title" : "func updateAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplan(_:callbackqueue:completion:)-3ctf",
                        "title" : "func updateAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplan(_:callbackqueue:completion:)-16z29",
                "title" : "func updateAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplans(_:)",
                "title" : "func updateAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updateanycareplans(_:callbackqueue:completion:)",
                        "title" : "func updateAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplans(_:callbackqueue:completion:)",
                "title" : "func updateAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanycareplanstore",
            "title" : "OCKAnyCarePlanStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/address",
                "title" : "var address: OCKPostalAddress?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/category",
                "title" : "var category: OCKContactCategory?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/emailaddresses",
                "title" : "var emailAddresses: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/messagingnumbers",
                "title" : "var messagingNumbers: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/name",
                "title" : "var name: PersonNameComponents",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/organization",
                "title" : "var organization: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/othercontactinfo",
                "title" : "var otherContactInfo: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/phonenumbers",
                "title" : "var phoneNumbers: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/role",
                "title" : "var role: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanycontact",
            "title" : "OCKAnyContact",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontact(_:)",
                "title" : "func addAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontact(_:callbackqueue:completion:)-1czln",
                        "title" : "func addAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontact(_:callbackqueue:completion:)-1ynz9",
                "title" : "func addAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontacts(_:)",
                "title" : "func addAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactstore\/addanycontacts(_:callbackqueue:completion:)",
                        "title" : "func addAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontacts(_:callbackqueue:completion:)",
                "title" : "func addAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontact(_:)",
                "title" : "func deleteAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontact(_:callbackqueue:completion:)-5unnv",
                        "title" : "func deleteAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontact(_:callbackqueue:completion:)-5xl3x",
                "title" : "func deleteAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontacts(_:)",
                "title" : "func deleteAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactstore\/deleteanycontacts(_:callbackqueue:completion:)",
                        "title" : "func deleteAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontacts(_:callbackqueue:completion:)",
                "title" : "func deleteAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontact(_:)",
                "title" : "func updateAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontact(_:callbackqueue:completion:)-7hfp",
                        "title" : "func updateAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontact(_:callbackqueue:completion:)-2aaxo",
                "title" : "func updateAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontacts(_:)",
                "title" : "func updateAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactstore\/updateanycontacts(_:callbackqueue:completion:)",
                        "title" : "func updateAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontacts(_:callbackqueue:completion:)",
                "title" : "func updateAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanycontactstore",
            "title" : "OCKAnyContactStore",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockanyeventstore",
            "title" : "OCKAnyEventStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/taskoccurrenceindex",
                "title" : "var taskOccurrenceIndex: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/values",
                "title" : "var values: [OCKOutcomeValue]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyTask) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyoutcome",
            "title" : "OCKAnyOutcome",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcome(_:)",
                "title" : "func addAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcome(_:callbackqueue:completion:)-1dvp7",
                        "title" : "func addAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcome(_:callbackqueue:completion:)-8fewj",
                "title" : "func addAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcomes(_:)",
                "title" : "func addAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addanyoutcomes(_:callbackqueue:completion:)",
                        "title" : "func addAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcomes(_:callbackqueue:completion:)",
                "title" : "func addAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcome(_:)",
                "title" : "func deleteAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcome(_:callbackqueue:completion:)-4ab2n",
                        "title" : "func deleteAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcome(_:callbackqueue:completion:)-7z9j9",
                "title" : "func deleteAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcomes(_:)",
                "title" : "func deleteAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteanyoutcomes(_:callbackqueue:completion:)",
                        "title" : "func deleteAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcomes(_:callbackqueue:completion:)",
                "title" : "func deleteAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcome(_:)",
                "title" : "func updateAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcome(_:callbackqueue:completion:)-8cd7b",
                        "title" : "func updateAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcome(_:callbackqueue:completion:)-6m13u",
                "title" : "func updateAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcomes(_:)",
                "title" : "func updateAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateanyoutcomes(_:callbackqueue:completion:)",
                        "title" : "func updateAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcomes(_:callbackqueue:completion:)",
                "title" : "func updateAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyoutcomestore",
            "title" : "OCKAnyOutcomeStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/allergies",
                "title" : "var allergies: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/birthday",
                "title" : "var birthday: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/name",
                "title" : "var name: PersonNameComponents",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/sex",
                "title" : "var sex: OCKBiologicalSex?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanypatient",
            "title" : "OCKAnyPatient",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatient(_:)",
                "title" : "func addAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatient(_:callbackqueue:completion:)-2br3j",
                        "title" : "func addAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatient(_:callbackqueue:completion:)-6ps1z",
                "title" : "func addAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatients(_:)",
                "title" : "func addAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientstore\/addanypatients(_:callbackqueue:completion:)",
                        "title" : "func addAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatients(_:callbackqueue:completion:)",
                "title" : "func addAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatient(_:)",
                "title" : "func deleteAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatient(_:callbackqueue:completion:)-53a1q",
                        "title" : "func deleteAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatient(_:callbackqueue:completion:)-567nr",
                "title" : "func deleteAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatients(_:)",
                "title" : "func deleteAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientstore\/deleteanypatients(_:callbackqueue:completion:)",
                        "title" : "func deleteAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatients(_:callbackqueue:completion:)",
                "title" : "func deleteAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatient(_:)",
                "title" : "func updateAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatient(_:callbackqueue:completion:)-6cgn3",
                        "title" : "func updateAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatient(_:callbackqueue:completion:)-73rnk",
                "title" : "func updateAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatients(_:)",
                "title" : "func updateAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientstore\/updateanypatients(_:callbackqueue:completion:)",
                        "title" : "func updateAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatients(_:callbackqueue:completion:)",
                "title" : "func updateAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanypatientstore",
            "title" : "OCKAnyPatientStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/careplandelegate",
                "title" : "var carePlanDelegate: OCKCarePlanStoreDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplan(withid:)",
                "title" : "func fetchAnyCarePlan(withID: String) async throws -> OCKAnyCarePlan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplan(withid:callbackqueue:completion:)-2g29x",
                        "title" : "func fetchAnyCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplan(withid:callbackqueue:completion:)-v9kd",
                "title" : "func fetchAnyCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplans(query:)",
                "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery) async throws -> [OCKAnyCarePlan]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchanycareplans(query:callbackqueue:completion:)",
                        "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplans(query:callbackqueue:completion:)",
                "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore",
            "title" : "OCKAnyReadOnlyCarePlanStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/contactdelegate",
                "title" : "var contactDelegate: OCKContactStoreDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontact(withid:)",
                "title" : "func fetchAnyContact(withID: String) async throws -> OCKAnyContact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontact(withid:callbackqueue:completion:)-5glpj",
                        "title" : "func fetchAnyContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontact(withid:callbackqueue:completion:)-iivk",
                "title" : "func fetchAnyContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontacts(query:)",
                "title" : "func fetchAnyContacts(query: OCKContactQuery) async throws -> [OCKAnyContact]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchanycontacts(query:callbackqueue:completion:)",
                        "title" : "func fetchAnyContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontacts(query:callbackqueue:completion:)",
                "title" : "func fetchAnyContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore",
            "title" : "OCKAnyReadOnlyContactStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchadherence(query:)",
                "title" : "func fetchAdherence(query: OCKAdherenceQuery) async throws -> [OCKAdherence]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchadherence(query:callbackqueue:completion:)-6s3hf",
                        "title" : "func fetchAdherence(query: OCKAdherenceQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAdherence]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchadherence(query:callbackqueue:completion:)-71pef",
                "title" : "func fetchAdherence(query: OCKAdherenceQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAdherence]>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchanyevent(fortask:occurrence:)",
                "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int) async throws -> OCKAnyEvent",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchanyevent(fortask:occurrence:callbackqueue:completion:)",
                        "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyEvent>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchanyevent(fortask:occurrence:callbackqueue:completion:)",
                "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyEvent>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchanyevents(taskid:query:)",
                "title" : "func fetchAnyEvents(taskID: String, query: OCKEventQuery) async throws -> [OCKAnyEvent]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchanyevents(taskid:query:callbackqueue:completion:)",
                        "title" : "func fetchAnyEvents(taskID: String, query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyEvent]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchanyevents(taskid:query:callbackqueue:completion:)",
                "title" : "func fetchAnyEvents(taskID: String, query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyEvent]>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchinsights(query:)",
                "title" : "func fetchInsights(query: OCKInsightQuery) async throws -> [Double]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchinsights(query:callbackqueue:completion:)-5ne1e",
                        "title" : "func fetchInsights(query: OCKInsightQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Double]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchinsights(query:callbackqueue:completion:)-9mvku",
                "title" : "func fetchInsights(query: OCKInsightQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Double]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore",
            "title" : "OCKAnyReadOnlyEventStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/outcomedelegate",
                "title" : "var outcomeDelegate: OCKOutcomeStoreDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcome(query:)",
                "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcome(query:callbackqueue:completion:)-7v674",
                        "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcome(query:callbackqueue:completion:)-17jly",
                "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcomes(query:)",
                "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery) async throws -> [OCKAnyOutcome]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchanyoutcomes(query:callbackqueue:completion:)",
                        "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcomes(query:callbackqueue:completion:)",
                "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore",
            "title" : "OCKAnyReadOnlyOutcomeStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/patientdelegate",
                "title" : "var patientDelegate: OCKPatientStoreDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatient(withid:)",
                "title" : "func fetchAnyPatient(withID: String) async throws -> OCKAnyPatient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatient(withid:callbackqueue:completion:)-30a0e",
                        "title" : "func fetchAnyPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatient(withid:callbackqueue:completion:)-4hg58",
                "title" : "func fetchAnyPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatients(query:)",
                "title" : "func fetchAnyPatients(query: OCKPatientQuery) async throws -> [OCKAnyPatient]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchanypatients(query:callbackqueue:completion:)",
                        "title" : "func fetchAnyPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadablePatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatients(query:callbackqueue:completion:)",
                "title" : "func fetchAnyPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore",
            "title" : "OCKAnyReadOnlyPatientStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/taskdelegate",
                "title" : "var taskDelegate: OCKTaskStoreDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytask(withid:)",
                "title" : "func fetchAnyTask(withID: String) async throws -> OCKAnyTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytask(withid:callbackqueue:completion:)-6gxsy",
                        "title" : "func fetchAnyTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytask(withid:callbackqueue:completion:)-60dim",
                "title" : "func fetchAnyTask(withID: String, callbackQueue: DispatchQueue, completion: (Result<OCKAnyTask, OCKStoreError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytasks(query:)",
                "title" : "func fetchAnyTasks(query: OCKTaskQuery) async throws -> [OCKAnyTask]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchanytasks(query:callbackqueue:completion:)",
                        "title" : "func fetchAnyTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytasks(query:callbackqueue:completion:)",
                "title" : "func fetchAnyTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore",
            "title" : "OCKAnyReadOnlyTaskStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyresettablestore\/resetdelegate",
                "title" : "var resetDelegate: OCKResetDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyresettablestore\/reset()",
                "title" : "func reset() throws",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyresettablestore",
            "title" : "OCKAnyResettableStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/impactsadherence",
                "title" : "var impactsAdherence: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/instructions",
                "title" : "var instructions: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/schedule",
                "title" : "var schedule: OCKSchedule",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanytask",
            "title" : "OCKAnyTask",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytask(_:)",
                "title" : "func addAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytask(_:callbackqueue:completion:)-1xk92",
                        "title" : "func addAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytask(_:callbackqueue:completion:)-37cfz",
                "title" : "func addAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: ((Result<OCKAnyTask, OCKStoreError>) -> Void)?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytasks(_:)",
                "title" : "func addAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskstore\/addanytasks(_:callbackqueue:completion:)",
                        "title" : "func addAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytasks(_:callbackqueue:completion:)",
                "title" : "func addAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytask(_:)",
                "title" : "func deleteAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytask(_:callbackqueue:completion:)-2gxka",
                        "title" : "func deleteAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytask(_:callbackqueue:completion:)-6i5s0",
                "title" : "func deleteAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: ((Result<OCKAnyTask, OCKStoreError>) -> Void)?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytasks(_:)",
                "title" : "func deleteAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskstore\/deleteanytasks(_:callbackqueue:completion:)",
                        "title" : "func deleteAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytasks(_:callbackqueue:completion:)",
                "title" : "func deleteAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytask(_:)",
                "title" : "func updateAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytask(_:callbackqueue:completion:)-6tcpx",
                        "title" : "func updateAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytask(_:callbackqueue:completion:)-2uvf7",
                "title" : "func updateAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: ((Result<OCKAnyTask, OCKStoreError>) -> Void)?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytasks(_:)",
                "title" : "func updateAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskstore\/updateanytasks(_:callbackqueue:completion:)",
                        "title" : "func updateAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytasks(_:callbackqueue:completion:)",
                "title" : "func updateAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanytaskstore",
            "title" : "OCKAnyTaskStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyversionabletask\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyversionabletask\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyversionabletask\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyversionabletask",
            "title" : "OCKAnyVersionableTask",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addcareplan(_:)",
                "title" : "func addCarePlan(Plan) async throws -> Plan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addcareplan(_:callbackqueue:completion:)-9x7bz",
                        "title" : "func addCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addcareplan(_:callbackqueue:completion:)-83d6",
                "title" : "func addCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addcareplans(_:)",
                "title" : "func addCarePlans([Plan]) async throws -> [Plan]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addcareplans(_:callbackqueue:completion:)",
                "title" : "func addCarePlans([Plan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Plan]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deletecareplan(_:)",
                "title" : "func deleteCarePlan(Plan) async throws -> Plan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deletecareplan(_:callbackqueue:completion:)-8xh5w",
                        "title" : "func deleteCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deletecareplan(_:callbackqueue:completion:)-2qmea",
                "title" : "func deleteCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deletecareplans(_:)",
                "title" : "func deleteCarePlans([Plan]) async throws -> [Plan]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deletecareplans(_:callbackqueue:completion:)",
                "title" : "func deleteCarePlans([Plan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Plan]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updatecareplan(_:)",
                "title" : "func updateCarePlan(Plan) async throws -> Plan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updatecareplan(_:callbackqueue:completion:)-3i8lp",
                        "title" : "func updateCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updatecareplan(_:callbackqueue:completion:)-8zwct",
                "title" : "func updateCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updatecareplans(_:)",
                "title" : "func updateCarePlans([Plan]) async throws -> [Plan]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updatecareplans(_:callbackqueue:completion:)",
                "title" : "func updateCarePlans([Plan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Plan]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcareplanstore",
            "title" : "OCKCarePlanStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstoredelegate\/careplanstore(_:didaddcareplans:)",
                "title" : "func carePlanStore(OCKAnyReadOnlyCarePlanStore, didAddCarePlans: [OCKAnyCarePlan])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstoredelegate\/careplanstore(_:diddeletecareplans:)",
                "title" : "func carePlanStore(OCKAnyReadOnlyCarePlanStore, didDeleteCarePlans: [OCKAnyCarePlan])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstoredelegate\/careplanstore(_:didupdatecareplans:)",
                "title" : "func carePlanStore(OCKAnyReadOnlyCarePlanStore, didUpdateCarePlans: [OCKAnyCarePlan])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcareplanstoredelegate",
            "title" : "OCKCarePlanStoreDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/addcontact(_:)",
                "title" : "func addContact(Contact) async throws -> Contact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactstore\/addcontact(_:callbackqueue:completion:)-34lme",
                        "title" : "func addContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/addcontact(_:callbackqueue:completion:)-4ol1p",
                "title" : "func addContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/addcontacts(_:)",
                "title" : "func addContacts([Contact]) async throws -> [Contact]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/addcontacts(_:callbackqueue:completion:)",
                "title" : "func addContacts([Contact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Contact]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/deletecontact(_:)",
                "title" : "func deleteContact(Contact) async throws -> Contact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactstore\/deletecontact(_:callbackqueue:completion:)-v7hh",
                        "title" : "func deleteContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/deletecontact(_:callbackqueue:completion:)-1m7m5",
                "title" : "func deleteContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/deletecontacts(_:)",
                "title" : "func deleteContacts([Contact]) async throws -> [Contact]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/deletecontacts(_:callbackqueue:completion:)",
                "title" : "func deleteContacts([Contact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Contact]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/updatecontact(_:)",
                "title" : "func updateContact(Contact) async throws -> Contact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactstore\/updatecontact(_:callbackqueue:completion:)-1bfxe",
                        "title" : "func updateContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/updatecontact(_:callbackqueue:completion:)-4pk6a",
                "title" : "func updateContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/updatecontacts(_:)",
                "title" : "func updateContacts([Contact]) async throws -> [Contact]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/updatecontacts(_:callbackqueue:completion:)",
                "title" : "func updateContacts([Contact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Contact]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcontactstore",
            "title" : "OCKContactStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstoredelegate\/contactstore(_:didaddcontacts:)",
                "title" : "func contactStore(OCKAnyReadOnlyContactStore, didAddContacts: [OCKAnyContact])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstoredelegate\/contactstore(_:diddeletecontacts:)",
                "title" : "func contactStore(OCKAnyReadOnlyContactStore, didDeleteContacts: [OCKAnyContact])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstoredelegate\/contactstore(_:didupdatecontacts:)",
                "title" : "func contactStore(OCKAnyReadOnlyContactStore, didUpdateContacts: [OCKAnyContact])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcontactstoredelegate",
            "title" : "OCKContactStoreDelegate",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockeventstore",
            "title" : "OCKEventStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addoutcome(_:)",
                "title" : "func addOutcome(Outcome) async throws -> Outcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addoutcome(_:callbackqueue:completion:)-sy1c",
                        "title" : "func addOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addoutcome(_:callbackqueue:completion:)-2ul82",
                "title" : "func addOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addoutcomes(_:)",
                "title" : "func addOutcomes([Outcome]) async throws -> [Outcome]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addoutcomes(_:callbackqueue:completion:)",
                "title" : "func addOutcomes([Outcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Outcome]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteoutcome(_:)",
                "title" : "func deleteOutcome(Outcome) async throws -> Outcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteoutcome(_:callbackqueue:completion:)-5zw45",
                        "title" : "func deleteOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteoutcome(_:callbackqueue:completion:)-8tvje",
                "title" : "func deleteOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteoutcomes(_:)",
                "title" : "func deleteOutcomes([Outcome]) async throws -> [Outcome]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteoutcomes(_:callbackqueue:completion:)",
                "title" : "func deleteOutcomes([Outcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Outcome]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateoutcome(_:)",
                "title" : "func updateOutcome(Outcome) async throws -> Outcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateoutcome(_:callbackqueue:completion:)-437j2",
                        "title" : "func updateOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateoutcome(_:callbackqueue:completion:)-1uub8",
                "title" : "func updateOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateoutcomes(_:)",
                "title" : "func updateOutcomes([Outcome]) async throws -> [Outcome]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateoutcomes(_:callbackqueue:completion:)",
                "title" : "func updateOutcomes([Outcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Outcome]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcomestore",
            "title" : "OCKOutcomeStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestoredelegate\/outcomestore(_:didaddoutcomes:)",
                "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, didAddOutcomes: [OCKAnyOutcome])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestoredelegate\/outcomestore(_:diddeleteoutcomes:)",
                "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, didDeleteOutcomes: [OCKAnyOutcome])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestoredelegate\/outcomestore(_:didencounterunknownchange:)",
                "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, didEncounterUnknownChange: String)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestoredelegate\/outcomestore(_:didupdateoutcomes:)",
                "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, didUpdateOutcomes: [OCKAnyOutcome])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcomestoredelegate",
            "title" : "OCKOutcomeStoreDelegate",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockoutcomevalueunderlyingtype",
            "title" : "OCKOutcomeValueUnderlyingType",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/addpatient(_:)",
                "title" : "func addPatient(Patient) async throws -> Patient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientstore\/addpatient(_:callbackqueue:completion:)-25zds",
                        "title" : "func addPatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/addpatient(_:callbackqueue:completion:)-6aoyv",
                "title" : "func addPatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/addpatients(_:)",
                "title" : "func addPatients([Patient]) async throws -> [Patient]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/addpatients(_:callbackqueue:completion:)",
                "title" : "func addPatients([Patient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Patient]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/deletepatient(_:)",
                "title" : "func deletePatient(Patient) async throws -> Patient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientstore\/deletepatient(_:callbackqueue:completion:)-7fglq",
                        "title" : "func deletePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/deletepatient(_:callbackqueue:completion:)-1zba2",
                "title" : "func deletePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/deletepatients(_:)",
                "title" : "func deletePatients([Patient]) async throws -> [Patient]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/deletepatients(_:callbackqueue:completion:)",
                "title" : "func deletePatients([Patient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Patient]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/updatepatient(_:)",
                "title" : "func updatePatient(Patient) async throws -> Patient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientstore\/updatepatient(_:callbackqueue:completion:)-194d",
                        "title" : "func updatePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/updatepatient(_:callbackqueue:completion:)-pln1",
                "title" : "func updatePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/updatepatients(_:)",
                "title" : "func updatePatients([Patient]) async throws -> [Patient]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/updatepatients(_:callbackqueue:completion:)",
                "title" : "func updatePatients([Patient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Patient]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockpatientstore",
            "title" : "OCKPatientStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstoredelegate\/patientstore(_:didaddpatients:)",
                "title" : "func patientStore(OCKAnyReadOnlyPatientStore, didAddPatients: [OCKAnyPatient])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstoredelegate\/patientstore(_:diddeletepatients:)",
                "title" : "func patientStore(OCKAnyReadOnlyPatientStore, didDeletePatients: [OCKAnyPatient])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstoredelegate\/patientstore(_:didupdatepatients:)",
                "title" : "func patientStore(OCKAnyReadOnlyPatientStore, didUpdatePatients: [OCKAnyPatient])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockpatientstoredelegate",
            "title" : "OCKPatientStoreDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevent(fortask:occurrence:)",
                "title" : "func fetchEvent(forTask: Task, occurrence: Int) async throws -> Event",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevent(fortask:occurrence:callbackqueue:completion:)-45rkb",
                        "title" : "func fetchEvent(forTask: Task, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<Event>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevent(fortask:occurrence:callbackqueue:completion:)-4v8pa",
                "title" : "func fetchEvent(forTask: Task, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<Event>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevents(taskid:query:)",
                "title" : "func fetchEvents(taskID: String, query: OCKEventQuery) async throws -> [Event]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevents(taskid:query:callbackqueue:completion:)-2vam7",
                        "title" : "func fetchEvents(taskID: String, query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKEvent<Task, Outcome>]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevents(taskid:query:callbackqueue:completion:)-1bdah",
                "title" : "func fetchEvents(taskID: String, query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Event]>)",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/event",
                "title" : "OCKReadOnlyEventStore.Event",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore",
            "title" : "OCKReadOnlyEventStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/plan",
                "title" : "Plan",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchcareplan(withid:)",
                "title" : "func fetchCarePlan(withID: String) async throws -> Plan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchcareplan(withid:callbackqueue:completion:)-63r0",
                        "title" : "func fetchCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchcareplan(withid:callbackqueue:completion:)-3an8l",
                "title" : "func fetchCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchcareplans(query:)",
                "title" : "func fetchCarePlans(query: OCKCarePlanQuery) async throws -> [Plan]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchcareplans(query:callbackqueue:completion:)",
                "title" : "func fetchCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Plan]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore",
            "title" : "OCKReadableCarePlanStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/contact",
                "title" : "Contact",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchcontact(withid:)",
                "title" : "func fetchContact(withID: String) async throws -> Contact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchcontact(withid:callbackqueue:completion:)-1leam",
                        "title" : "func fetchContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchcontact(withid:callbackqueue:completion:)-4pfxk",
                "title" : "func fetchContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchcontacts(query:)",
                "title" : "func fetchContacts(query: OCKContactQuery) async throws -> [Contact]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchcontacts(query:callbackqueue:completion:)",
                "title" : "func fetchContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Contact]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadablecontactstore",
            "title" : "OCKReadableContactStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/outcome",
                "title" : "Outcome",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchoutcome(query:)",
                "title" : "func fetchOutcome(query: OCKOutcomeQuery) async throws -> Outcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchoutcome(query:callbackqueue:completion:)-2dhk6",
                        "title" : "func fetchOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchoutcome(query:callbackqueue:completion:)-3kfq8",
                "title" : "func fetchOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchoutcomes(query:)",
                "title" : "func fetchOutcomes(query: OCKOutcomeQuery) async throws -> [Outcome]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchoutcomes(query:callbackqueue:completion:)",
                "title" : "func fetchOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Outcome]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore",
            "title" : "OCKReadableOutcomeStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/patient",
                "title" : "Patient",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchpatient(withid:)",
                "title" : "func fetchPatient(withID: String) async throws -> Patient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchpatient(withid:callbackqueue:completion:)-2vufs",
                        "title" : "func fetchPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadablePatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchpatient(withid:callbackqueue:completion:)-2k7xi",
                "title" : "func fetchPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchpatients(query:)",
                "title" : "func fetchPatients(query: OCKPatientQuery) async throws -> [Patient]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchpatients(query:callbackqueue:completion:)",
                "title" : "func fetchPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Patient]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadablepatientstore",
            "title" : "OCKReadablePatientStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/task",
                "title" : "Task",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchtask(withid:)",
                "title" : "func fetchTask(withID: String) async throws -> Task",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchtask(withid:callbackqueue:completion:)-89geb",
                        "title" : "func fetchTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchtask(withid:callbackqueue:completion:)-5wyob",
                "title" : "func fetchTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchtasks(query:)",
                "title" : "func fetchTasks(query: OCKTaskQuery) async throws -> [Task]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchtasks(query:callbackqueue:completion:)",
                "title" : "func fetchTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Task]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadabletaskstore",
            "title" : "OCKReadableTaskStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizable\/automaticallysynchronizes",
                "title" : "var automaticallySynchronizes: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizable\/delegate",
                "title" : "var delegate: OCKRemoteSynchronizationDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizable\/chooseconflictresolution(conflicts:completion:)",
                "title" : "func chooseConflictResolution(conflicts: [OCKEntity], completion: OCKResultClosure<OCKEntity>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizable\/pullrevisions(since:mergerevision:completion:)",
                "title" : "func pullRevisions(since: OCKRevisionRecord.KnowledgeVector, mergeRevision: (OCKRevisionRecord) -> Void, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizable\/pushrevisions(devicerevision:completion:)",
                "title" : "func pushRevisions(deviceRevision: OCKRevisionRecord, completion: (Error?) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockremotesynchronizable",
            "title" : "OCKRemoteSynchronizable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizationdelegate\/didrequestsynchronization(_:)",
                "title" : "func didRequestSynchronization(OCKRemoteSynchronizable)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizationdelegate\/remote(_:didupdateprogress:)",
                "title" : "func remote(OCKRemoteSynchronizable, didUpdateProgress: Double)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockremotesynchronizationdelegate",
            "title" : "OCKRemoteSynchronizationDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockresetdelegate\/storedidreset(_:)",
                "title" : "func storeDidReset(OCKAnyResettableStore)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockresetdelegate",
            "title" : "OCKResetDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/addtask(_:)",
                "title" : "func addTask(Task) async throws -> Task",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskstore\/addtask(_:callbackqueue:completion:)-9qer7",
                        "title" : "func addTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/addtask(_:callbackqueue:completion:)-hgtj",
                "title" : "func addTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/addtasks(_:)",
                "title" : "func addTasks([Task]) async throws -> [Task]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/addtasks(_:callbackqueue:completion:)",
                "title" : "func addTasks([Task], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Task]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/deletetask(_:)",
                "title" : "func deleteTask(Task) async throws -> Task",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskstore\/deletetask(_:callbackqueue:completion:)-1r1pf",
                        "title" : "func deleteTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/deletetask(_:callbackqueue:completion:)-135nm",
                "title" : "func deleteTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/deletetasks(_:)",
                "title" : "func deleteTasks([Task]) async throws -> [Task]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/deletetasks(_:callbackqueue:completion:)",
                "title" : "func deleteTasks([Task], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Task]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/updatetask(_:)",
                "title" : "func updateTask(Task) async throws -> Task",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskstore\/updatetask(_:callbackqueue:completion:)-s4q9",
                        "title" : "func updateTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/updatetask(_:callbackqueue:completion:)-8xfom",
                "title" : "func updateTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/updatetasks(_:)",
                "title" : "func updateTasks([Task]) async throws -> [Task]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/updatetasks(_:callbackqueue:completion:)",
                "title" : "func updateTasks([Task], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Task]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocktaskstore",
            "title" : "OCKTaskStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstoredelegate\/taskstore(_:didaddtasks:)",
                "title" : "func taskStore(OCKAnyReadOnlyTaskStore, didAddTasks: [OCKAnyTask])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstoredelegate\/taskstore(_:diddeletetasks:)",
                "title" : "func taskStore(OCKAnyReadOnlyTaskStore, didDeleteTasks: [OCKAnyTask])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstoredelegate\/taskstore(_:didupdatetasks:)",
                "title" : "func taskStore(OCKAnyReadOnlyTaskStore, didUpdateTasks: [OCKAnyTask])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocktaskstoredelegate",
            "title" : "OCKTaskStoreDelegate",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherencequery\/init(taskids:dateinterval:aggregator:)",
                "title" : "init(taskIDs: [String], dateInterval: DateInterval, aggregator: OCKAdherenceAggregator)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherencequery\/aggregator",
                "title" : "var aggregator: OCKAdherenceAggregator",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherencequery\/dateinterval",
                "title" : "var dateInterval: DateInterval",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherencequery\/taskids",
                "title" : "var taskIDs: [String]",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockadherencequery",
            "title" : "OCKAdherenceQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/init(task:outcome:scheduleevent:)",
                "title" : "init(task: OCKAnyTask, outcome: OCKAnyOutcome?, scheduleEvent: OCKScheduleEvent)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/id",
                "title" : "let id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/outcome",
                "title" : "let outcome: OCKAnyOutcome?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/scheduleevent",
                "title" : "let scheduleEvent: OCKScheduleEvent",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/task",
                "title" : "let task: OCKAnyTask",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyevent",
            "title" : "OCKAnyEvent",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/init(id:title:patientuuid:)",
                "title" : "init(id: String, title: String, patientUUID: UUID?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/id-3jbo7",
                "title" : "let id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/patientuuid",
                "title" : "var patientUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyPatient) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcareplan\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplan\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcareplan\/id-7bowr",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplan\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcareplan",
            "title" : "OCKCarePlan",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/init(id:)",
                "title" : "init(id: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/groupidentifiers",
                "title" : "var groupIdentifiers: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/ids",
                "title" : "var ids: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/limit",
                "title" : "var limit: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/offset",
                "title" : "var offset: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/patientids",
                "title" : "var patientIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/patientremoteids",
                "title" : "var patientRemoteIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/patientuuids",
                "title" : "var patientUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/remoteids",
                "title" : "var remoteIDs: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptors",
                "title" : "var sortDescriptors: [SortDescriptor]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/tags",
                "title" : "var tags: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/uuids",
                "title" : "var uuids: [UUID]",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptor\/effectivedate(ascending:)",
                    "title" : "case effectiveDate(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptor\/title(ascending:)",
                    "title" : "case title(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptor\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptor\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptor",
                "title" : "OCKCarePlanQuery.SortDescriptor",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcareplanquery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcareplanquery",
            "title" : "OCKCarePlanQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/init(id:givenname:familyname:careplanuuid:)",
                "title" : "init(id: String, givenName: String, familyName: String, carePlanUUID: UUID?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/init(id:name:careplanuuid:)",
                "title" : "init(id: String, name: PersonNameComponents, carePlanUUID: UUID?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/address",
                "title" : "var address: OCKPostalAddress?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/careplanuuid",
                "title" : "var carePlanUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/category",
                "title" : "var category: OCKContactCategory?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/emailaddresses",
                "title" : "var emailAddresses: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/id-6s41a",
                "title" : "let id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/messagingnumbers",
                "title" : "var messagingNumbers: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/name",
                "title" : "var name: PersonNameComponents",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/organization",
                "title" : "var organization: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/othercontactinfo",
                "title" : "var otherContactInfo: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/phonenumbers",
                "title" : "var phoneNumbers: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/role",
                "title" : "var role: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontact\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontact\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontact\/id-69f4s",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontact\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcontact",
            "title" : "OCKContact",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/init(id:)",
                "title" : "init(id: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/careplanids",
                "title" : "var carePlanIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/careplanremoteids",
                "title" : "var carePlanRemoteIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/careplanuuids",
                "title" : "var carePlanUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/groupidentifiers",
                "title" : "var groupIdentifiers: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/ids",
                "title" : "var ids: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/limit",
                "title" : "var limit: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/offset",
                "title" : "var offset: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/remoteids",
                "title" : "var remoteIDs: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptors",
                "title" : "var sortDescriptors: [SortDescriptor]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/tags",
                "title" : "var tags: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/uuids",
                "title" : "var uuids: [UUID]",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor\/effectivedate(ascending:)",
                    "title" : "case effectiveDate(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor\/familyname(ascending:)",
                    "title" : "case familyName(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor\/givenname(ascending:)",
                    "title" : "case givenName(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor",
                "title" : "OCKContactQuery.SortDescriptor",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactquery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcontactquery",
            "title" : "OCKContactQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/init(task:outcome:scheduleevent:)",
                "title" : "init(task: Task, outcome: Outcome?, scheduleEvent: OCKScheduleEvent)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/id-9f0k",
                "title" : "let id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/outcome",
                "title" : "var outcome: Outcome?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/scheduleevent",
                "title" : "let scheduleEvent: OCKScheduleEvent",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/task",
                "title" : "let task: Task",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockevent\/id-1biux",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockevent\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockevent",
            "title" : "OCKEvent",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventquery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventquery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventquery\/dateinterval",
                "title" : "var dateInterval: DateInterval",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockeventquery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockeventquery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockeventquery",
            "title" : "OCKEventQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/init(quantityidentifier:quantitytype:unit:)",
                "title" : "init(quantityIdentifier: HKQuantityTypeIdentifier, quantityType: QuantityType, unit: HKUnit)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantityidentifier",
                "title" : "var quantityIdentifier: HKQuantityTypeIdentifier",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.property",
                "title" : "var quantityType: QuantityType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/unit",
                "title" : "var unit: HKUnit",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/cumulative",
                    "title" : "case cumulative",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/discrete",
                    "title" : "case discrete",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/init(from:)",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/encode(to:)",
                        "title" : "func encode(to: Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum",
                "title" : "OCKHealthKitLinkage.QuantityType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage",
            "title" : "OCKHealthKitLinkage",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/init(taskuuid:taskoccurrenceindex:values:)",
                "title" : "init(taskUUID: UUID, taskOccurrenceIndex: Int, values: [OCKOutcomeValue])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/id-43fyc",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/isownedbyapp",
                "title" : "let isOwnedByApp: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/taskoccurrenceindex",
                "title" : "var taskOccurrenceIndex: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/taskuuid",
                "title" : "var taskUUID: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/values",
                "title" : "var values: [OCKOutcomeValue]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyTask) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/id-3hy0q",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome",
            "title" : "OCKHealthKitOutcome",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/init(id:title:careplanuuid:schedule:healthkitlinkage:)",
                "title" : "init(id: String, title: String?, carePlanUUID: UUID?, schedule: OCKSchedule, healthKitLinkage: OCKHealthKitLinkage)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/careplanuuid",
                "title" : "var carePlanUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/healthkitlinkage",
                "title" : "var healthKitLinkage: OCKHealthKitLinkage",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/id",
                "title" : "let id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/impactsadherence",
                "title" : "var impactsAdherence: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/instructions",
                "title" : "var instructions: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/schedule",
                "title" : "var schedule: OCKSchedule",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkittask\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockhealthkittask",
            "title" : "OCKHealthKitTask",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockinsightquery\/init(taskid:dateinterval:aggregator:)",
                "title" : "init(taskID: String, dateInterval: DateInterval, aggregator: OCKEventAggregator)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockinsightquery\/aggregator",
                "title" : "var aggregator: OCKEventAggregator",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockinsightquery\/dateinterval",
                "title" : "var dateInterval: DateInterval",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockinsightquery\/taskid",
                "title" : "var taskID: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockinsightquery",
            "title" : "OCKInsightQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/init(label:value:)",
                "title" : "init(label: String, value: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/label",
                "title" : "var label: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/value",
                "title" : "var value: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocklabeledvalue",
            "title" : "OCKLabeledValue",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocklog\/isenabled",
                "title" : "static var isEnabled: Bool",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocklog",
            "title" : "OCKLog",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocknote\/init(author:title:content:)",
                "title" : "init(author: String?, title: String?, content: String?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocknote\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocknote\/author",
                "title" : "var author: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocknote\/content",
                "title" : "var content: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocknote\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocknote\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocknote\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocknote",
            "title" : "OCKNote",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/init(taskuuid:taskoccurrenceindex:values:)",
                "title" : "init(taskUUID: UUID, taskOccurrenceIndex: Int, values: [OCKOutcomeValue])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/id-9p8tj",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/taskoccurrenceindex",
                "title" : "var taskOccurrenceIndex: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/taskuuid",
                "title" : "var taskUUID: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/values",
                "title" : "var values: [OCKOutcomeValue]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyTask) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcome\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcome\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcome\/id-4tawp",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcome\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcome",
            "title" : "OCKOutcome",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/groupidentifiers",
                "title" : "var groupIdentifiers: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/ids",
                "title" : "var ids: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/limit",
                "title" : "var limit: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/offset",
                "title" : "var offset: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/remoteids",
                "title" : "var remoteIDs: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/sortdescriptors",
                "title" : "var sortDescriptors: [SortDescriptor]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/tags",
                "title" : "var tags: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/taskids",
                "title" : "var taskIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/taskremoteids",
                "title" : "var taskRemoteIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/taskuuids",
                "title" : "var taskUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/uuids",
                "title" : "var uuids: [UUID]",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomequery\/sortdescriptor\/date(ascending:)",
                    "title" : "case date(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomequery\/sortdescriptor\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockoutcomequery\/sortdescriptor\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/sortdescriptor",
                "title" : "OCKOutcomeQuery.SortDescriptor",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomequery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcomequery",
            "title" : "OCKOutcomeQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/==(_:_:)",
                "title" : "static func == (OCKOutcomeValue, OCKOutcomeValue) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/init(_:units:)",
                "title" : "init(OCKOutcomeValueUnderlyingType, units: String?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/booleanvalue",
                "title" : "var booleanValue: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/createddate",
                "title" : "var createdDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/datavalue",
                "title" : "var dataValue: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/datevalue",
                "title" : "var dateValue: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/doublevalue",
                "title" : "var doubleValue: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/integervalue",
                "title" : "var integerValue: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/kind",
                "title" : "var kind: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/numbervalue",
                "title" : "var numberValue: NSNumber?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/stringvalue",
                "title" : "var stringValue: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/type",
                "title" : "var type: OCKOutcomeValueType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/units",
                "title" : "var units: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/value",
                "title" : "var value: OCKOutcomeValueUnderlyingType",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcomevalue",
            "title" : "OCKOutcomeValue",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/init(id:givenname:familyname:)",
                "title" : "init(id: String, givenName: String, familyName: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/init(id:name:)",
                "title" : "init(id: String, name: PersonNameComponents)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/age",
                "title" : "var age: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/allergies",
                "title" : "var allergies: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/birthday",
                "title" : "var birthday: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/id-3hyl8",
                "title" : "let id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/name",
                "title" : "var name: PersonNameComponents",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/sex",
                "title" : "var sex: OCKBiologicalSex?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatient\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatient\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatient\/id-8fhne",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatient\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockpatient",
            "title" : "OCKPatient",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/init(id:)",
                "title" : "init(id: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/groupidentifiers",
                "title" : "var groupIdentifiers: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/ids",
                "title" : "var ids: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/limit",
                "title" : "var limit: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/offset",
                "title" : "var offset: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/remoteids",
                "title" : "var remoteIDs: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptors",
                "title" : "var sortDescriptors: [SortDescriptor]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/tags",
                "title" : "var tags: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/uuids",
                "title" : "var uuids: [UUID]",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/effectivedate(ascending:)",
                    "title" : "case effectiveDate(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/familyname(ascending:)",
                    "title" : "case familyName(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/givenname(ascending:)",
                    "title" : "case givenName(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/groupidentifier(ascending:)",
                    "title" : "case groupIdentifier(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor",
                "title" : "OCKPatientQuery.SortDescriptor",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockpatientquery",
            "title" : "OCKPatientQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/_(_:_:)-4glug",
                    "title" : "static func < (OCKRevisionRecord.KnowledgeVector, OCKRevisionRecord.KnowledgeVector) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/init(_:)",
                    "title" : "init([UUID : Int])",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/processes",
                    "title" : "var processes: [UUID : Int]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/uuids",
                    "title" : "var uuids: [UUID]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/clock(for:)",
                    "title" : "func clock(for: UUID) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/increment(clockfor:)",
                    "title" : "func increment(clockFor: UUID)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/merge(with:)",
                    "title" : "func merge(with: KnowledgeVector)",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'...(_:)-4icmo",
                        "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'...(_:)-6ql4w",
                        "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'...(_:_:)",
                        "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'.._(_:)",
                        "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'.._(_:_:)",
                        "title" : "static func ..< (Self, Self) -> Range<Self>",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/-implementations",
                    "title" : " Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'...(_:)-4icmo",
                        "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'...(_:)-6ql4w",
                        "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'...(_:_:)",
                        "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'.._(_:)",
                        "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'.._(_:_:)",
                        "title" : "static func ..< (Self, Self) -> Range<Self>",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/-implementations",
                    "title" : " Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/_(_:_:)-8yqa5",
                        "title" : "static func > (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/_=(_:_:)-1a24z",
                        "title" : "static func >= (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/_=(_:_:)-h0ff",
                        "title" : "static func <= (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/comparable-implementations",
                    "title" : "Comparable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct",
                "title" : "OCKRevisionRecord.KnowledgeVector",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/init(entities:knowledgevector:)",
                "title" : "init(entities: [OCKEntity], knowledgeVector: KnowledgeVector)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/entities",
                "title" : "let entities: [OCKEntity]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.property",
                "title" : "let knowledgeVector: KnowledgeVector",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockrevisionrecord",
            "title" : "OCKRevisionRecord",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/init(composing:)-35hze",
                "title" : "init(composing: [OCKScheduleElement])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/init(composing:)-6h2mg",
                "title" : "init(composing: [OCKSchedule])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/elements",
                "title" : "let elements: [OCKScheduleElement]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/enddate()",
                "title" : "func endDate() -> Date?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/event(foroccurrenceindex:)",
                "title" : "func event(forOccurrenceIndex: Int) -> OCKScheduleEvent?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/events(from:to:)",
                "title" : "func events(from: Date, to: Date) -> [OCKScheduleEvent]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/offset(by:)",
                "title" : "func offset(by: DateComponents) -> OCKSchedule",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/startdate()",
                "title" : "func startDate() -> Date",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/subscript(_:)",
                "title" : "subscript(Int) -> OCKScheduleEvent",
                "type" : "subscript"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/dailyattime(hour:minutes:start:end:text:duration:targetvalues:)",
                "title" : "static func dailyAtTime(hour: Int, minutes: Int, start: Date, end: Date?, text: String?, duration: OCKScheduleElement.Duration, targetValues: [OCKOutcomeValue]) -> OCKSchedule",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/weeklyattime(weekday:hours:minutes:start:end:targetvalues:text:duration:)",
                "title" : "static func weeklyAtTime(weekday: Int, hours: Int, minutes: Int, start: Date, end: Date?, targetValues: [OCKOutcomeValue], text: String?, duration: OCKScheduleElement.Duration) -> OCKSchedule",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockschedule\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockschedule\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockschedule",
            "title" : "OCKSchedule",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/init(start:end:interval:text:targetvalues:duration:)",
                "title" : "init(start: Date, end: Date?, interval: DateComponents, text: String?, targetValues: [OCKOutcomeValue], duration: Duration)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.property",
                "title" : "var duration: Duration",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/elements",
                "title" : "var elements: [OCKScheduleElement]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/end",
                "title" : "var end: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/interval",
                "title" : "var interval: DateComponents",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/start",
                "title" : "let start: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/targetvalues",
                "title" : "var targetValues: [OCKOutcomeValue]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/text",
                "title" : "var text: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/date(ofoccurrence:)",
                "title" : "func date(ofOccurrence: Int) -> Date?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/events(betweenoccurrenceindex:and:)",
                "title" : "func events(betweenOccurrenceIndex: Int, and: Int) -> [OCKScheduleEvent?]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/events(from:to:)",
                "title" : "func events(from: Date, to: Date) -> [OCKScheduleEvent]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/offset(by:)",
                "title" : "func offset(by: DateComponents) -> OCKScheduleElement",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/subscript(_:)",
                "title" : "subscript(Int) -> OCKScheduleEvent",
                "type" : "subscript"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/allday",
                    "title" : "case allDay",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/seconds(_:)",
                    "title" : "case seconds(Double)",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/hours(_:)",
                    "title" : "static func hours(Double) -> Duration",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/minutes(_:)",
                    "title" : "static func minutes(Double) -> Duration",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum",
                "title" : "OCKScheduleElement.Duration",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockscheduleelement",
            "title" : "OCKScheduleElement",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/_(_:_:)-12wxa",
                "title" : "static func < (OCKScheduleEvent, OCKScheduleEvent) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/element",
                "title" : "let element: OCKScheduleElement",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/end",
                "title" : "let end: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/occurrence",
                "title" : "let occurrence: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/start",
                "title" : "let start: Date",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/'...(_:)-29kdj",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/'...(_:)-812x3",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/-implementations",
                "title" : " Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/'...(_:)-29kdj",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/'...(_:)-812x3",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/-implementations",
                "title" : " Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/_(_:_:)-60ccs",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/_=(_:_:)-3yvp5",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/_=(_:_:)-9ojc1",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockscheduleevent",
            "title" : "OCKScheduleEvent",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/_(_:_:)-38m1c",
                "title" : "static func < (OCKSemanticVersion, OCKSemanticVersion) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/init(_:)",
                "title" : "init?(String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/init(majorversion:minorversion:patchnumber:)",
                "title" : "init(majorVersion: Int, minorVersion: Int, patchNumber: Int)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/majorversion",
                "title" : "let majorVersion: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/minorversion",
                "title" : "let minorVersion: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/patchnumber",
                "title" : "let patchNumber: Int",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parse(_:)",
                "title" : "static func parse(String) throws -> OCKSemanticVersion",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/emptystring",
                    "title" : "case emptyString",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/invalidmajorversion",
                    "title" : "case invalidMajorVersion",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/invalidminorversion",
                    "title" : "case invalidMinorVersion",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/invalidpatchversion",
                    "title" : "case invalidPatchVersion",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/toomanyseparators",
                    "title" : "case tooManySeparators",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/localizeddescription",
                        "title" : "var localizedDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/error-implementations",
                    "title" : "Error Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror",
                "title" : "OCKSemanticVersion.ParsingError",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'...(_:)-fzx5",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'...(_:)-h0m2",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/-implementations",
                "title" : " Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'...(_:)-fzx5",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'...(_:)-h0m2",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/-implementations",
                "title" : " Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/_(_:_:)-1u2cp",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/_=(_:_:)-2fnev",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/_=(_:_:)-7c29c",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocksemanticversion",
            "title" : "OCKSemanticVersion",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/init(id:title:careplanuuid:schedule:)",
                "title" : "init(id: String, title: String?, carePlanUUID: UUID?, schedule: OCKSchedule)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/careplanuuid",
                "title" : "var carePlanUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/id",
                "title" : "let id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/impactsadherence",
                "title" : "var impactsAdherence: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/instructions",
                "title" : "var instructions: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/schedule",
                "title" : "var schedule: OCKSchedule",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocktask\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktask\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocktask",
            "title" : "OCKTask",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/init(id:)",
                "title" : "init(id: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/careplanids",
                "title" : "var carePlanIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/careplanremoteids",
                "title" : "var carePlanRemoteIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/careplanuuids",
                "title" : "var carePlanUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/excludestaskswithnoevents",
                "title" : "var excludesTasksWithNoEvents: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/groupidentifiers",
                "title" : "var groupIdentifiers: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/ids",
                "title" : "var ids: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/limit",
                "title" : "var limit: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/offset",
                "title" : "var offset: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/remoteids",
                "title" : "var remoteIDs: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptors",
                "title" : "var sortDescriptors: [SortDescriptor]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/tags",
                "title" : "var tags: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/uuids",
                "title" : "var uuids: [UUID]",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor\/effectivedate(ascending:)",
                    "title" : "case effectiveDate(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor\/groupidentifier(ascending:)",
                    "title" : "case groupIdentifier(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor\/title(ascending:)",
                    "title" : "case title(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor",
                "title" : "OCKTaskQuery.SortDescriptor",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocktaskquery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocktaskquery",
            "title" : "OCKTaskQuery",
            "type" : "struct"
          },
          {
            "title" : "Type Aliases",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockanystoreprotocol",
            "title" : "OCKAnyStoreProtocol",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockresultclosure",
            "title" : "OCKResultClosure",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockstoreprotocol",
            "title" : "OCKStoreProtocol",
            "type" : "typealias"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherence\/noevents",
                "title" : "case noEvents",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherence\/notasks",
                "title" : "case noTasks",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherence\/progress(_:)",
                "title" : "case progress(Double)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockadherence\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockadherence\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockadherence",
            "title" : "OCKAdherence",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/comparetargetvalues",
                "title" : "case compareTargetValues",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/custom(_:)",
                "title" : "case custom(([OCKAnyEvent]) -> OCKAdherence)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/outcomeexists",
                "title" : "case outcomeExists",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/percentofoutcomevaluesthatexist",
                "title" : "case percentOfOutcomeValuesThatExist",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/percentoftargetvaluesmet",
                "title" : "case percentOfTargetValuesMet",
                "type" : "case"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/aggregate(events:)",
                "title" : "func aggregate(events: [OCKAnyEvent]) -> OCKAdherence",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockadherenceaggregator",
            "title" : "OCKAdherenceAggregator",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/female",
                "title" : "case female",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/male",
                "title" : "case male",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/other(_:)",
                "title" : "case other(String)",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/init(from:)-1bbpq",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/rawvalue",
                "title" : "var rawValue: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/init(from:)-80psh",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockbiologicalsex",
            "title" : "OCKBiologicalSex",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactcategory\/careprovider",
                "title" : "case careProvider",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactcategory\/friendsandfamily",
                "title" : "case friendsAndFamily",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactcategory\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactcategory\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactcategory\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactcategory\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactcategory\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactcategory\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactcategory\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactcategory\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcontactcategory",
            "title" : "OCKContactCategory",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcoredatastoretype\/inmemory",
                "title" : "case inMemory",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcoredatastoretype\/ondisk(protection:)",
                "title" : "case onDisk(protection: FileProtectionType)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcoredatastoretype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcoredatastoretype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcoredatastoretype",
            "title" : "OCKCoreDataStoreType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/careplan(_:)",
                "title" : "case carePlan(OCKCarePlan)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/contact(_:)",
                "title" : "case contact(OCKContact)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/healthkittask(_:)",
                "title" : "case healthKitTask(OCKHealthKitTask)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/outcome(_:)",
                "title" : "case outcome(OCKOutcome)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/patient(_:)",
                "title" : "case patient(OCKPatient)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/task(_:)",
                "title" : "case task(OCKTask)",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.property",
                "title" : "var entityType: EntityType",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/careplan",
                    "title" : "case carePlan",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/contact",
                    "title" : "case contact",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/healthkittask",
                    "title" : "case healthKitTask",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/outcome",
                    "title" : "case outcome",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/patient",
                    "title" : "case patient",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/task",
                    "title" : "case task",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/init(intvalue:)",
                    "title" : "init?(intValue: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/init(stringvalue:)",
                    "title" : "init?(stringValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/codingkey-implementations",
                    "title" : "CodingKey Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/init(from:)",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/encode(to:)",
                        "title" : "func encode(to: Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum",
                "title" : "OCKEntity.EntityType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockentity\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockentity",
            "title" : "OCKEntity",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventaggregator\/countoutcomevalues",
                "title" : "case countOutcomeValues",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventaggregator\/countoutcomes",
                "title" : "case countOutcomes",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventaggregator\/custom(_:)",
                "title" : "case custom(([OCKAnyEvent]) -> Double)",
                "type" : "case"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventaggregator\/aggregate(events:)",
                "title" : "func aggregate(events: [OCKAnyEvent]) -> Double",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockeventaggregator",
            "title" : "OCKEventAggregator",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/binary",
                "title" : "case binary",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/boolean",
                "title" : "case boolean",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/date",
                "title" : "case date",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/double",
                "title" : "case double",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/integer",
                "title" : "case integer",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/text",
                "title" : "case text",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype",
            "title" : "OCKOutcomeValueType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/addfailed(reason:)",
                "title" : "case addFailed(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/deletefailed(reason:)",
                "title" : "case deleteFailed(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/fetchfailed(reason:)",
                "title" : "case fetchFailed(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/invalidvalue(reason:)",
                "title" : "case invalidValue(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/remotesynchronizationfailed(reason:)",
                "title" : "case remoteSynchronizationFailed(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/timedout(reason:)",
                "title" : "case timedOut(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/updatefailed(reason:)",
                "title" : "case updateFailed(reason: String)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/errordescription-4ygi8",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstoreerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstoreerror\/errordescription-71d97",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstoreerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstoreerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstoreerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockstoreerror",
            "title" : "OCKStoreError",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/carekitstore",
        "title" : "CareKitStore",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/init(contentview:highlightoptions:handlesselection:)",
                "title" : "init(contentView: OCKStackView?, highlightOptions: Set<OCKAnimatedButton<OCKStackView>.HighlightOption>, handlesSelection: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/detaillabel",
                "title" : "let detailLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/imageview",
                "title" : "let imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/titlelabel",
                "title" : "let titleLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockaddressbutton",
            "title" : "OCKAddressButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/init(contentview:highlightoptions:handlesselection:)",
                "title" : "init(contentView: Content?, highlightOptions: Set<HighlightOption>, handlesSelection: Bool)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/contentview",
                "title" : "let contentView: Content?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/customstyle",
                "title" : "var customStyle: OCKStyler?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/handlesselection",
                "title" : "var handlesSelection: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoptions",
                "title" : "let highlightOptions: Set<HighlightOption>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/ishighlighted",
                "title" : "var isHighlighted: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/isselected",
                "title" : "var isSelected: Bool",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/didmovetosuperview()",
                "title" : "func didMoveToSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/removefromsuperview()",
                "title" : "func removeFromSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/sethighlighted(_:animated:)",
                "title" : "func setHighlighted(Bool, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/setselected(_:animated:)",
                "title" : "func setSelected(Bool, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/setstyleforhighlightedstate(_:)",
                "title" : "func setStyleForHighlightedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/touchesended(_:with:)",
                "title" : "func touchesEnded(Set<UITouch>, with: UIEvent?)",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/delayonselect(delay:)",
                    "title" : "case delayOnSelect(delay: TimeInterval)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/fade(alpha:)",
                    "title" : "case fade(alpha: CGFloat)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/overlay(alpha:)",
                    "title" : "case overlay(alpha: CGFloat)",
                    "type" : "case"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/defaultdelayonselect",
                    "title" : "static var defaultDelayOnSelect: HighlightOption",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/defaultfade",
                    "title" : "static var defaultFade: HighlightOption",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/defaultoverlay",
                    "title" : "static var defaultOverlay: HighlightOption",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption",
                "title" : "OCKAnimatedButton.HighlightOption",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/style()",
                    "title" : "func style() -> OCKStyler",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/stylechildren()",
                    "title" : "func styleChildren()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/ockstylable-implementations",
                "title" : "OCKStylable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockanimatedbutton",
            "title" : "OCKAnimatedButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/instructionslabel",
                "title" : "let instructionsLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/logbuttonscollectionview",
                "title" : "var logButtonsCollectionView: UICollectionView!",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/collectionview(_:cellforitemat:)",
                "title" : "func collectionView(UICollectionView, cellForItemAt: IndexPath) -> UICollectionViewCell",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/collectionview(_:numberofitemsinsection:)",
                "title" : "func collectionView(UICollectionView, numberOfItemsInSection: Int) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/defaultcelltype",
                "title" : "OCKButtonLogTaskView.DefaultCellType",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/defaultcellidentifier",
                "title" : "static let defaultCellIdentifier: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview",
            "title" : "OCKButtonLogTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/init(type:)",
                "title" : "init(type: OCKCartesianGraphView.PlotType)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/delegate",
                "title" : "var delegate: OCKChartViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/graphview",
                "title" : "let graphView: OCKCartesianGraphView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcartesianchartview",
            "title" : "OCKCartesianChartView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/init(type:)",
                "title" : "init(type: PlotType)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/dataseries",
                "title" : "var dataSeries: [OCKDataSeries]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/horizontalaxismarkers",
                "title" : "var horizontalAxisMarkers: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/numberformatter",
                "title" : "var numberFormatter: NumberFormatter",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/selectedindex",
                "title" : "var selectedIndex: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/xmaximum",
                "title" : "var xMaximum: CGFloat?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/xminimum",
                "title" : "var xMinimum: CGFloat?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/ymaximum",
                "title" : "var yMaximum: CGFloat?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/yminimum",
                "title" : "var yMinimum: CGFloat?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/graphbounds()",
                "title" : "func graphBounds() -> CGRect",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/bar",
                    "title" : "case bar",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/line",
                    "title" : "case line",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/scatter",
                    "title" : "case scatter",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype",
                "title" : "OCKCartesianGraphView.PlotType",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcartesiangraphview",
            "title" : "OCKCartesianGraphView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/init(contentview:highlightoptions:handlesselection:)",
                "title" : "init(contentView: OCKStackView?, highlightOptions: Set<OCKAnimatedButton<OCKStackView>.HighlightOption>, handlesSelection: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/checkmarkbutton",
                "title" : "let checkmarkButton: OCKCheckmarkButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/label",
                "title" : "let label: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/setselected(_:animated:)",
                "title" : "func setSelected(Bool, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockchecklistitembutton",
            "title" : "OCKChecklistItemButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/instructionslabel",
                "title" : "let instructionsLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/items",
                "title" : "var items: [OCKChecklistItemButton]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/appenditem(withtitle:animated:)",
                "title" : "func appendItem(withTitle: String, animated: Bool) -> OCKChecklistItemButton",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/clearitems(animated:)",
                "title" : "func clearItems(animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/insertitem(withtitle:at:animated:)",
                "title" : "func insertItem(withTitle: String, at: Int, animated: Bool) -> OCKChecklistItemButton",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/removeitem(at:animated:)",
                "title" : "func removeItem(at: Int, animated: Bool) -> OCKChecklistItemButton?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/updateitem(at:withtitle:)",
                "title" : "func updateItem(at: Int, withTitle: String) -> OCKChecklistItemButton?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockchecklisttaskview",
            "title" : "OCKChecklistTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/init(contentview:highlightoptions:handlesselection:)",
                "title" : "init(contentView: UIView?, highlightOptions: Set<OCKAnimatedButton<UIView>.HighlightOption>, handlesSelection: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/imageview",
                "title" : "let imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/intrinsiccontentsize",
                "title" : "var intrinsicContentSize: CGSize",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/layoutsubviews()",
                "title" : "func layoutSubviews()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/setselected(_:animated:)",
                "title" : "func setSelected(Bool, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcheckmarkbutton",
            "title" : "OCKCheckmarkButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/init(contentview:highlightoptions:handlesselection:)",
                "title" : "init(contentView: OCKStackView?, highlightOptions: Set<OCKAnimatedButton<OCKStackView>.HighlightOption>, handlesSelection: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/completionstate",
                "title" : "var completionState: OCKCompletionState",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/label",
                "title" : "let label: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/ring",
                "title" : "let ring: OCKCompletionRingView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/setstate(_:animated:)",
                "title" : "func setState(OCKCompletionState, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcompletionringbutton",
            "title" : "OCKCompletionRingButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/duration",
                "title" : "var duration: TimeInterval",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/intrinsiccontentsize",
                "title" : "var intrinsicContentSize: CGSize",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/linewidth",
                "title" : "var lineWidth: CGFloat",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/progress",
                "title" : "var progress: CGFloat",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/strokecolor",
                "title" : "var strokeColor: UIColor",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/setprogress(_:animated:)",
                "title" : "func setProgress(CGFloat, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcompletionringview",
            "title" : "OCKCompletionRingView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/init(contentview:highlightoptions:handlesselection:)",
                "title" : "init(contentView: OCKStackView?, highlightOptions: Set<OCKAnimatedButton<OCKStackView>.HighlightOption>, handlesSelection: Bool)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/init(type:)",
                "title" : "init(type: Type)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/imageview",
                "title" : "let imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/label",
                "title" : "let label: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/call",
                    "title" : "case call",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/email",
                    "title" : "case email",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/message",
                    "title" : "case message",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/type",
                "title" : "OCKContactButton.Type",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcontactbutton",
            "title" : "OCKContactButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdetailview\/styledhtml\/init(html:css:)",
                    "title" : "init(html: String, css: String?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdetailview\/styledhtml\/css",
                    "title" : "let css: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdetailview\/styledhtml\/html",
                    "title" : "let html: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdetailview\/styledhtml",
                "title" : "OCKDetailView.StyledHTML",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/init(html:imageoverlaystyle:showsclosebutton:)",
                "title" : "init(html: StyledHTML?, imageOverlayStyle: UIUserInterfaceStyle, showsCloseButton: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/bodylabel",
                "title" : "let bodyLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/closebutton",
                "title" : "var closeButton: UIButton?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/html",
                "title" : "var html: StyledHTML?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/imagelabel",
                "title" : "var imageLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/imageview",
                "title" : "var imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/titlelabel",
                "title" : "let titleLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/layoutsubviews()",
                "title" : "func layoutSubviews()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/scrollviewdidscroll(_:)",
                "title" : "func scrollViewDidScroll(UIScrollView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockdetailview",
            "title" : "OCKDetailView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/addressbutton",
                "title" : "let addressButton: OCKAddressButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/callbutton",
                "title" : "let callButton: OCKContactButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/delegate",
                "title" : "var delegate: OCKContactViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/emailbutton",
                "title" : "let emailButton: OCKContactButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/instructionslabel",
                "title" : "let instructionsLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/messagebutton",
                "title" : "let messageButton: OCKContactButton",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/defaultimage",
                "title" : "static let defaultImage: UIImage",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockdetailedcontactview",
            "title" : "OCKDetailedContactView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/init(imageoverlaystyle:)",
                "title" : "init(imageOverlayStyle: UIUserInterfaceStyle)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/cardview",
                "title" : "var cardView: UIView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/contentview",
                "title" : "var contentView: UIView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/delegate",
                "title" : "var delegate: OCKFeaturedContentViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/imageview",
                "title" : "var imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/intrinsiccontentsize",
                "title" : "var intrinsicContentSize: CGSize",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/label",
                "title" : "var label: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/enablecardstyling(_:style:)",
                    "title" : "func enableCardStyling(Bool, style: OCKStyler)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/ockcardable-implementations",
                "title" : "OCKCardable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockfeaturedcontentview",
            "title" : "OCKFeaturedContentView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskcell\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskcell\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskcell\/completionbutton",
                "title" : "let completionButton: OCKLabeledCheckmarkButton",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskcell\/prepareforreuse()",
                "title" : "func prepareForReuse()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockgridtaskcell",
            "title" : "OCKGridTaskCell",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/collectionview",
                "title" : "var collectionView: UICollectionView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/instructionslabel",
                "title" : "let instructionsLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/collectionview(_:didselectitemat:)",
                "title" : "func collectionView(UICollectionView, didSelectItemAt: IndexPath)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/defaultcelltype",
                "title" : "OCKGridTaskView.DefaultCellType",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/defaultcellidentifier",
                "title" : "static let defaultCellIdentifier: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockgridtaskview",
            "title" : "OCKGridTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockheaderview\/configuration\/showsdetaildisclosure",
                    "title" : "var showsDetailDisclosure: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockheaderview\/configuration\/showsiconimage",
                    "title" : "var showsIconImage: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockheaderview\/configuration\/showsseparator",
                    "title" : "var showsSeparator: Bool",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockheaderview\/configuration",
                "title" : "OCKHeaderView.Configuration",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/init(configurationhandler:)",
                "title" : "init(configurationHandler: (inout Configuration) -> Void)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/detaildisclosureimage",
                "title" : "let detailDisclosureImage: UIImageView?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/detaillabel",
                "title" : "let detailLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/iconimageview",
                "title" : "let iconImageView: UIImageView?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/titlelabel",
                "title" : "let titleLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockheaderview",
            "title" : "OCKHeaderView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/completionbutton",
                "title" : "let completionButton: OCKLabeledButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/instructionslabel",
                "title" : "let instructionsLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockinstructionstaskview",
            "title" : "OCKInstructionsTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/init(textstyle:weight:)",
                "title" : "init(textStyle: UIFont.TextStyle, weight: UIFont.Weight)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/animatestextchanges",
                "title" : "var animatesTextChanges: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/customstyle",
                "title" : "var customStyle: OCKStyler?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/text",
                "title" : "var text: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/didmovetosuperview()",
                "title" : "func didMoveToSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/removefromsuperview()",
                "title" : "func removeFromSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ocklabel\/style()",
                    "title" : "func style() -> OCKStyler",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ocklabel\/stylechildren()",
                    "title" : "func styleChildren()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ocklabel\/ockstylable-implementations",
                "title" : "OCKStylable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklabel",
            "title" : "OCKLabel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/init(contentview:highlightoptions:handlesselection:)",
                "title" : "init(contentView: OCKLabel?, highlightOptions: Set<OCKAnimatedButton<OCKLabel>.HighlightOption>, handlesSelection: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/label",
                "title" : "let label: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklabeledbutton",
            "title" : "OCKLabeledButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/init(contentview:highlightoptions:handlesselection:)",
                "title" : "init(contentView: OCKStackView?, highlightOptions: Set<OCKAnimatedButton<OCKStackView>.HighlightOption>, handlesSelection: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/checkmarkbutton",
                "title" : "let checkmarkButton: OCKCheckmarkButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/label",
                "title" : "let label: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/setselected(_:animated:)",
                "title" : "func setSelected(Bool, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton",
            "title" : "OCKLabeledCheckmarkButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklocalization\/localized(_:tablename:bundle:value:comment:)",
                "title" : "static func localized(String, tableName: String?, bundle: Bundle?, value: String, comment: String) -> String",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklocalization",
            "title" : "OCKLocalization",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogbuttoncell\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogbuttoncell\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogbuttoncell\/logbutton",
                "title" : "let logButton: OCKLabeledButton",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogbuttoncell\/prepareforreuse()",
                "title" : "func prepareForReuse()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklogbuttoncell",
            "title" : "OCKLogButtonCell",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/init(contentview:highlightoptions:handlesselection:)",
                "title" : "init(contentView: OCKStackView?, highlightOptions: Set<OCKAnimatedButton<OCKStackView>.HighlightOption>, handlesSelection: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/detaillabel",
                "title" : "let detailLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/imageview",
                "title" : "let imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/titlelabel",
                "title" : "let titleLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklogitembutton",
            "title" : "OCKLogItemButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/items",
                "title" : "var items: [OCKLogItemButton]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/appenditem(withtitle:detail:animated:)",
                "title" : "func appendItem(withTitle: String?, detail: String?, animated: Bool) -> OCKLogItemButton",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/clearitems(animated:)",
                "title" : "func clearItems(animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/insertitem(withtitle:detail:at:animated:)",
                "title" : "func insertItem(withTitle: String?, detail: String?, at: Int, animated: Bool) -> OCKLogItemButton",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/removeitem(at:animated:)",
                "title" : "func removeItem(at: Int, animated: Bool) -> OCKLogItemButton?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/updateitem(at:withtitle:detail:)",
                "title" : "func updateItem(at: Int, withTitle: String?, detail: String?) -> OCKLogItemButton?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklogtaskview",
            "title" : "OCKLogTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockseparatorview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockseparatorview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockseparatorview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockseparatorview\/didmovetosuperview()",
                "title" : "func didMoveToSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockseparatorview\/removefromsuperview()",
                "title" : "func removeFromSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockseparatorview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockseparatorview",
            "title" : "OCKSeparatorView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimplecontactview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimplecontactview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimplecontactview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimplecontactview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimplecontactview\/delegate",
                "title" : "var delegate: OCKContactViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimplecontactview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimplecontactview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocksimplecontactview",
            "title" : "OCKSimpleContactView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimpletaskview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimpletaskview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimpletaskview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimpletaskview\/completionbutton",
                "title" : "let completionButton: OCKCheckmarkButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimpletaskview\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimpletaskview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimpletaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocksimpletaskview",
            "title" : "OCKSimpleTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/init(coder:)",
                "title" : "init(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/init(style:)",
                "title" : "init(style: Style)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/arrangedsubviews",
                "title" : "var arrangedSubviews: [UIView]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/customstyle",
                "title" : "var customStyle: OCKStyler?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/showsouterseparators",
                "title" : "var showsOuterSeparators: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.property",
                "title" : "let style: Style",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/addarrangedsubview(_:)",
                "title" : "func addArrangedSubview(UIView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/addarrangedsubview(_:animated:)",
                "title" : "func addArrangedSubview(UIView, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/clear(animated:)",
                "title" : "func clear(animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/didmovetosuperview()",
                "title" : "func didMoveToSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/insertarrangedsubview(_:at:)",
                "title" : "func insertArrangedSubview(UIView, at: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/insertarrangedsubview(_:at:animated:)",
                "title" : "func insertArrangedSubview(UIView, at: Int, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/removearrangedsubview(_:)",
                "title" : "func removeArrangedSubview(UIView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/removearrangedsubview(_:animated:)",
                "title" : "func removeArrangedSubview(UIView, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/removefromsuperview()",
                "title" : "func removeFromSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.enum\/plain",
                    "title" : "case plain",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.enum\/separated",
                    "title" : "case separated",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.enum",
                "title" : "OCKStackView.Style",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstackview\/style()",
                    "title" : "func style() -> OCKStyler",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstackview\/stylechildren()",
                    "title" : "func styleChildren()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstackview\/ockstylable-implementations",
                "title" : "OCKStylable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockstackview",
            "title" : "OCKStackView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/customstyle",
                "title" : "var customStyle: OCKStyler?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/didmovetosuperview()",
                "title" : "func didMoveToSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/removefromsuperview()",
                "title" : "func removeFromSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockview\/style()",
                    "title" : "func style() -> OCKStyler",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockview\/stylechildren()",
                    "title" : "func styleChildren()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockview\/ockstylable-implementations",
                "title" : "OCKStylable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockview",
            "title" : "OCKView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/init(weekofdate:)",
                "title" : "init(weekOfDate: Date)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/completionringbuttons",
                "title" : "var completionRingButtons: [OCKCompletionRingButton]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/dateinterval",
                "title" : "var dateInterval: DateInterval",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/delegate",
                "title" : "var delegate: OCKCalendarViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/selecteddate",
                "title" : "var selectedDate: Date",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/completionringfor(date:)",
                "title" : "func completionRingFor(date: Date) -> OCKCompletionRingButton?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/selectdate(_:)",
                "title" : "func selectDate(Date)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/showdate(_:)",
                "title" : "func showDate(Date)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockweekcalendarview",
            "title" : "OCKWeekCalendarView",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockanimationstyler\/statechangeduration-9ixfj",
                        "title" : "var stateChangeDuration: Double",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAnimationStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockanimationstyler\/statechangeduration-486fh",
                "title" : "var stateChangeDuration: Double",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockanimationstyler",
            "title" : "OCKAnimationStyler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/borderwidth1-8u9qc",
                        "title" : "var borderWidth1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/borderwidth1-4zuu7",
                "title" : "var borderWidth1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/borderwidth2-7xdal",
                        "title" : "var borderWidth2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/borderwidth2-14duf",
                "title" : "var borderWidth2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/cornerradius1-9wq2z",
                        "title" : "var cornerRadius1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/cornerradius1-924wr",
                "title" : "var cornerRadius1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/cornerradius2-1vwqq",
                        "title" : "var cornerRadius2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/cornerradius2-63w9y",
                "title" : "var cornerRadius2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/linewidth1-sdz6",
                        "title" : "var lineWidth1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/linewidth1-gjxx",
                "title" : "var lineWidth1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/opacity1-2o75b",
                        "title" : "var opacity1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/opacity1-15ihz",
                "title" : "var opacity1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowoffset1-7rrqj",
                        "title" : "var shadowOffset1: CGSize",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowoffset1-4hagz",
                "title" : "var shadowOffset1: CGSize",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowopacity1-r59",
                        "title" : "var shadowOpacity1: Float",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowopacity1-3xc01",
                "title" : "var shadowOpacity1: Float",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowradius1-5latu",
                        "title" : "var shadowRadius1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowradius1-7t7xw",
                "title" : "var shadowRadius1: CGFloat",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockappearancestyler",
            "title" : "OCKAppearanceStyler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcalendardisplayable\/delegate",
                "title" : "var delegate: OCKCalendarViewDelegate?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcalendardisplayable",
            "title" : "OCKCalendarDisplayable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcalendarviewdelegate\/calendarview(_:didselectdate:at:sender:)",
                "title" : "func calendarView(UIView & OCKCalendarDisplayable, didSelectDate: Date, at: Int, sender: Any?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcalendarviewdelegate",
            "title" : "OCKCalendarViewDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcardable\/cardview",
                "title" : "var cardView: UIView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcardable\/contentview",
                "title" : "var contentView: UIView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcardable\/enablecardstyling(_:style:)",
                "title" : "func enableCardStyling(Bool, style: OCKStyler)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcardable",
            "title" : "OCKCardable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchartdisplayable\/delegate",
                "title" : "var delegate: OCKChartViewDelegate?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockchartdisplayable",
            "title" : "OCKChartDisplayable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchartviewdelegate\/didselectchartview(_:)",
                "title" : "func didSelectChartView(UIView & OCKChartDisplayable)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockchartviewdelegate",
            "title" : "OCKChartViewDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/black-1xinu",
                        "title" : "var black: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/black-4ae83",
                "title" : "var black: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/clear-3cpls",
                        "title" : "var clear: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/clear-h4j",
                "title" : "var clear: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/custombackground-5n4g3",
                        "title" : "var customBackground: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/custombackground-j89q",
                "title" : "var customBackground: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customblue-5ytu3",
                        "title" : "var customBlue: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customblue-69xy6",
                "title" : "var customBlue: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customfill-7zf7y",
                        "title" : "var customFill: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customfill-lp9l",
                "title" : "var customFill: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray-9n9u3",
                        "title" : "var customGray: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray-2dzf1",
                "title" : "var customGray: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray2-4bbhc",
                        "title" : "var customGray2: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray2-7v4ud",
                "title" : "var customGray2: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray3-xmv5",
                        "title" : "var customGray3: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray3-91bsn",
                "title" : "var customGray3: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray4-8ce3e",
                        "title" : "var customGray4: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray4-3csgm",
                "title" : "var customGray4: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray5-97510",
                        "title" : "var customGray5: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray5-yn4o",
                "title" : "var customGray5: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgroupedbackground-8mvsk",
                        "title" : "var customGroupedBackground: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgroupedbackground-2znid",
                "title" : "var customGroupedBackground: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/label-60yfj",
                        "title" : "var label: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/label-3e23d",
                "title" : "var label: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/quaternarycustomfill-40fnf",
                        "title" : "var quaternaryCustomFill: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/quaternarycustomfill-9s8ur",
                "title" : "var quaternaryCustomFill: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarycustombackground-7sr38",
                        "title" : "var secondaryCustomBackground: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarycustombackground-13bdt",
                "title" : "var secondaryCustomBackground: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarycustomfill-4hhw0",
                        "title" : "var secondaryCustomFill: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarycustomfill-4dn43",
                "title" : "var secondaryCustomFill: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarycustomgroupedbackground-3ir7n",
                        "title" : "var secondaryCustomGroupedBackground: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarycustomgroupedbackground-8g427",
                "title" : "var secondaryCustomGroupedBackground: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarylabel-l1uz",
                        "title" : "var secondaryLabel: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarylabel-45w1p",
                "title" : "var secondaryLabel: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/separator-2el66",
                        "title" : "var separator: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/separator-7r6nr",
                "title" : "var separator: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarycustomfill-7uiae",
                        "title" : "var tertiaryCustomFill: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarycustomfill-9u7ey",
                "title" : "var tertiaryCustomFill: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarycustomgroupedbackground-5kucy",
                        "title" : "var tertiaryCustomGroupedBackground: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarycustomgroupedbackground-7rq1a",
                "title" : "var tertiaryCustomGroupedBackground: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarylabel-9uszd",
                        "title" : "var tertiaryLabel: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarylabel-99xfq",
                "title" : "var tertiaryLabel: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/white-99mye",
                        "title" : "var white: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/white-7s4h5",
                "title" : "var white: UIColor",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcolorstyler",
            "title" : "OCKColorStyler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactdisplayable\/delegate",
                "title" : "var delegate: OCKContactViewDelegate?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcontactdisplayable",
            "title" : "OCKContactDisplayable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactviewdelegate\/contactview(_:senderdidinitiateaddresslookup:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateAddressLookup: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactviewdelegate\/contactview(_:senderdidinitiatecall:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateCall: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactviewdelegate\/contactview(_:senderdidinitiateemail:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateEmail: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactviewdelegate\/contactview(_:senderdidinitiatemessage:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateMessage: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactviewdelegate\/didselectcontactview(_:)",
                "title" : "func didSelectContactView(UIView & OCKContactDisplayable)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcontactviewdelegate",
            "title" : "OCKContactViewDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight1-5t0dv",
                        "title" : "var buttonHeight1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight1-1gn8r",
                "title" : "var buttonHeight1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight2-xj2o",
                        "title" : "var buttonHeight2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight2-5g07h",
                "title" : "var buttonHeight2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight3-9em9o",
                        "title" : "var buttonHeight3: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight3-49mwa",
                "title" : "var buttonHeight3: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight4-9qiq",
                        "title" : "var buttonHeight4: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight4-9oq5h",
                "title" : "var buttonHeight4: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/directionalinsets1-25rqk",
                        "title" : "var directionalInsets1: NSDirectionalEdgeInsets",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/directionalinsets1-7cgzb",
                "title" : "var directionalInsets1: NSDirectionalEdgeInsets",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/directionalinsets2-4ocny",
                        "title" : "var directionalInsets2: NSDirectionalEdgeInsets",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/directionalinsets2-1twdh",
                "title" : "var directionalInsets2: NSDirectionalEdgeInsets",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/imageheight1-7etz2",
                        "title" : "var imageHeight1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/imageheight1-1x99t",
                "title" : "var imageHeight1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/imageheight2-2ml2c",
                        "title" : "var imageHeight2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/imageheight2-4o2o",
                "title" : "var imageHeight2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/linewidth1-3b104",
                        "title" : "var lineWidth1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/linewidth1-3qm0n",
                "title" : "var lineWidth1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize1-vuhh",
                        "title" : "var pointSize1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize1-2nbm7",
                "title" : "var pointSize1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize2-860n4",
                        "title" : "var pointSize2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize2-el1k",
                "title" : "var pointSize2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize3-3n6sl",
                        "title" : "var pointSize3: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize3-913cu",
                "title" : "var pointSize3: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/separatorheight-81wnm",
                        "title" : "var separatorHeight: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/separatorheight-5524o",
                "title" : "var separatorHeight: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/stackspacing1-3vaq0",
                        "title" : "var stackSpacing1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/stackspacing1-4hvub",
                "title" : "var stackSpacing1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize1-4sbnw",
                        "title" : "var symbolPointSize1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize1-8tr5c",
                "title" : "var symbolPointSize1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize2-7q373",
                        "title" : "var symbolPointSize2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize2-ps1m",
                "title" : "var symbolPointSize2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize3-385c1",
                        "title" : "var symbolPointSize3: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize3-4umae",
                "title" : "var symbolPointSize3: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize4-6vxyp",
                        "title" : "var symbolPointSize4: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize4-9f4ey",
                "title" : "var symbolPointSize4: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize5-8xmbc",
                        "title" : "var symbolPointSize5: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize5-lwd6",
                "title" : "var symbolPointSize5: CGFloat",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockdimensionstyler",
            "title" : "OCKDimensionStyler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentviewdelegate\/didtapview(_:)",
                "title" : "func didTapView(OCKFeaturedContentView)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockfeaturedcontentviewdelegate",
            "title" : "OCKFeaturedContentViewDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstylable\/customstyle",
                "title" : "var customStyle: OCKStyler?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockstylable\/style()-4ubfv",
                        "title" : "func style() -> OCKStyler",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKStylable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstylable\/style()-1pdd6",
                "title" : "func style() -> OCKStyler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstylable\/stylechildren()",
                "title" : "func styleChildren()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstylable\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockstylable",
            "title" : "OCKStylable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockstyler\/animation-5kmua",
                        "title" : "var animation: OCKAnimationStyler",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstyler\/animation-27hei",
                "title" : "var animation: OCKAnimationStyler",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockstyler\/appearance-705c6",
                        "title" : "var appearance: OCKAppearanceStyler",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstyler\/appearance-2f8aq",
                "title" : "var appearance: OCKAppearanceStyler",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockstyler\/color-50nry",
                        "title" : "var color: OCKColorStyler",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstyler\/color-7cq8t",
                "title" : "var color: OCKColorStyler",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockstyler\/dimension-8j1b7",
                        "title" : "var dimension: OCKDimensionStyler",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstyler\/dimension-4gu38",
                "title" : "var dimension: OCKDimensionStyler",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockstyler",
            "title" : "OCKStyler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocktaskdisplayable\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocktaskdisplayable",
            "title" : "OCKTaskDisplayable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocktaskviewdelegate\/didselecttaskview(_:eventindexpath:)",
                "title" : "func didSelectTaskView(UIView & OCKTaskDisplayable, eventIndexPath: IndexPath)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocktaskviewdelegate\/taskview(_:didcompleteevent:at:sender:)",
                "title" : "func taskView(UIView & OCKTaskDisplayable, didCompleteEvent: Bool, at: IndexPath, sender: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocktaskviewdelegate\/taskview(_:didcreateoutcomevalueat:eventindexpath:sender:)",
                "title" : "func taskView(UIView & OCKTaskDisplayable, didCreateOutcomeValueAt: Int, eventIndexPath: IndexPath, sender: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocktaskviewdelegate\/taskview(_:didselectoutcomevalueat:eventindexpath:sender:)",
                "title" : "func taskView(UIView & OCKTaskDisplayable, didSelectOutcomeValueAt: Int, eventIndexPath: IndexPath, sender: Any?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocktaskviewdelegate",
            "title" : "OCKTaskViewDelegate",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/cardview\/init(content:)",
                "title" : "init(content: () -> Content)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/cardview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(activationpoint:)-1vx1g",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(activationpoint:)-22rl2",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaction(named:_:)",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityactivationpoint(_:)-59ve7",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityactivationpoint(_:)-nckv",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-1gsnh",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-3eia2",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-5u5vi",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-5uo1r",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-67wje",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-8h0wj",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-8j7im",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-9528v",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityhint(_:)-4kscv",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityhint(_:)-5vfhp",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityhint(_:)-7esec",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityinputlabels(_:)-2n1vm",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityinputlabels(_:)-37pj4",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityinputlabels(_:)-5uqio",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitylabel(_:)-32a61",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitylabel(_:)-5vpqi",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitylabel(_:)-838dg",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:)-3gdzb",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:)-5j8z5",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:)-5nvwi",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:)-bsol",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entryid:entrylabel:)-3f91",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entryid:entrylabel:)-66qlo",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8fyyy",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entryid:entrylabel:)-gp3y",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entrylabel:)-1ww4i",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entrylabel:)-45ra8",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entrylabel:)-658f0",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entrylabel:)-gu6r",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:textranges:)-1mwyw",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:textranges:)-3nxqu",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:textranges:)-5rafh",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:textranges:)-67qih",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityvalue(_:)-15vdl",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityvalue(_:)-6rpfl",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityvalue(_:)-7kswa",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:)-3vj8s",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:)-7cs0x",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:)-9b53o",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:message:)-2dp84",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:message:)-8vfhj",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:message:)-nmxg",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:)-2qr3r",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:)-4uwvj",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:)-mz1b",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:message:)-17zbp",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:message:)-2qda4",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:message:)-4kmlv",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alignmentguide(_:computevalue:)-4blkc",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alignmentguide(_:computevalue:)-6sdau",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/aspectratio(_:contentmode:)-38luf",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/aspectratio(_:contentmode:)-z28v",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(_:in:fillstyle:)-35zzp",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(_:in:fillstyle:)-6zog",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(in:fillstyle:)-67xpq",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(in:fillstyle:)-9f04u",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/badge(_:)-1yazt",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/badge(_:)-35jcj",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/badge(_:)-6t6g0",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/badge(_:)-xmaq",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/buttonstyle(_:)-9w1dt",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/buttonstyle(_:)-qn63",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2xjkw",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5qyki",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-l3n3",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1gkqa",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4inkk",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-74tp",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-6wzif",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-8e8cz",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-8rdxo",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-23xf5",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-279ak",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8psmx",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dynamictypesize(_:)-3cdd",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dynamictypesize(_:)-41rgq",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-8rzgd",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-8zja9",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-19svt",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-4vj6y",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedscenevalue(_:_:)",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedvalue(_:_:)",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/help(_:)-51bog",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/help(_:)-6927a",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/help(_:)-8mhun",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyboardshortcut(_:)-4u3i5",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyboardshortcut(_:)-6i0p4",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listitemtint(_:)-2nnb4",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listitemtint(_:)-73tr0",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:)-2xbfz",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:)-310t3",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:)-4lbnm",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:displaymode:)-1g9hq",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:displaymode:)-21mt7",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:displaymode:)-2xvrb",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationtitle(_:)-4r6qc",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationtitle(_:)-5k9ao",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationtitle(_:)-6aj79",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationtitle(_:)-9fvcl",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:delegate:)-1ke9d",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:delegate:)-53p08",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:istargeted:perform:)-269sk",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:istargeted:perform:)-4iiaw",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:istargeted:perform:)-91f5h",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:istargeted:perform:)-9qer2",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/padding(_:)-28l3c",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/padding(_:)-9rsft",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/safeareainset(edge:alignment:spacing:content:)-6poa5",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/safeareainset(edge:alignment:spacing:content:)-6q6oi",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scaleeffect(_:anchor:)-7m1w9",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scaleeffect(_:anchor:)-7s2sz",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchcompletion(_:)-4i4ev",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchcompletion(_:)-5duuk",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:)-4sjdw",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:)-6dmm0",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:)-7drue",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:suggestions:)-1v6f5",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:suggestions:)-4ol34",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:suggestions:)-mudv",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:scope:placement:prompt:scopes:)-2un70",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:scope:placement:prompt:scopes:)-5h2ah",
                    "title" : "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:scope:placement:prompt:scopes:)-9jwhu",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-1ql4s",
                    "title" : "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-32ulh",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-8wcex",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:placement:prompt:token:)-6y09u",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:placement:prompt:token:)-8b41q",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:placement:prompt:token:)-8dkq1",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:placement:prompt:token:suggestions:)-3s3r8",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:placement:prompt:token:suggestions:)-6jhak",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:placement:prompt:token:suggestions:)-np6n",
                    "title" : "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-77sbf",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-7adk8",
                    "title" : "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-9qbl7",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-1jq3q",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-3k9w8",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-6br2g",
                    "title" : "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-36rwa",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9qzz8",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9t0f0",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/texttransition(_:)",
                    "title" : "func textTransition(Text.Transition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbar(_:in:)",
                    "title" : "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbar(content:)-8man3",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbar(content:)-r0mf",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbarbackground(_:in:)-5zrth",
                    "title" : "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbarbackground(_:in:)-9ugti",
                    "title" : "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbarcolorscheme(_:in:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/cardview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/cardview",
            "title" : "CardView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/circularcompletionview\/init(iscomplete:content:)",
                "title" : "init(isComplete: Bool, content: () -> Content)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/circularcompletionview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(activationpoint:)-1cid1",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(activationpoint:)-4vt5s",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaction(named:_:)",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityactivationpoint(_:)-7mzv2",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityactivationpoint(_:)-9otwa",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-16nvr",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-24b8k",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-2o4c5",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-2zba3",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-4ra10",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-4ti5z",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-66acj",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-89tgr",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityhint(_:)-41hf6",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityhint(_:)-6qou1",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityhint(_:)-mlsd",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityinputlabels(_:)-97ydq",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityinputlabels(_:)-9wbsg",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityinputlabels(_:)-utqj",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitylabel(_:)-1xpq5",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitylabel(_:)-5vdls",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitylabel(_:)-74h12",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:)-4kl0p",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:)-506bt",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:)-5cdla",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:)-7f2vm",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1hf4j",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8789e",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-895sx",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9msj3",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-1fcw8",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-4n3x8",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-7r4d1",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-99v74",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:textranges:)-6r32z",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:textranges:)-71lsa",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:textranges:)-74gwl",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:textranges:)-qm56",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityvalue(_:)-30jqq",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityvalue(_:)-7idx1",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityvalue(_:)-8we2e",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:)-34lbp",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:)-72eqw",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:)-7n2hn",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:message:)-3m7a4",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:message:)-6ihw1",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:message:)-7khz5",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:)-72fib",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:)-7mie5",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:)-t6ni",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:message:)-6rye9",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:message:)-9ab1v",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:message:)-9dcbs",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alignmentguide(_:computevalue:)-91me3",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alignmentguide(_:computevalue:)-9psjr",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/aspectratio(_:contentmode:)-2ggca",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/aspectratio(_:contentmode:)-8nc5x",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(_:in:fillstyle:)-983i3",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(_:in:fillstyle:)-9gvkq",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(in:fillstyle:)-2rfpk",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(in:fillstyle:)-5gheh",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/badge(_:)-1evuy",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/badge(_:)-67baq",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/badge(_:)-6d1gj",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/badge(_:)-hf28",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/buttonstyle(_:)-2s5ki",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/buttonstyle(_:)-5x92a",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-55hya",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-7zvos",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-lxd8",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-80i92",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-8y0ak",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-9lja1",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3t5vj",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4oamn",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-94coa",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-1y6k7",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-4nwxy",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7lbeh",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dynamictypesize(_:)-3dwjk",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dynamictypesize(_:)-7m20b",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-1k55f",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-4g4io",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-5cydn",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-83z3l",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedscenevalue(_:_:)",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedvalue(_:_:)",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/help(_:)-1zwt5",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/help(_:)-4mgbq",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/help(_:)-wfb6",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyboardshortcut(_:)-32hyl",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyboardshortcut(_:)-49n0v",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listitemtint(_:)-4vsji",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listitemtint(_:)-8rny",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:)-1cw92",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:)-2nqis",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:)-8w3dd",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:displaymode:)-356rk",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:displaymode:)-7xv47",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:displaymode:)-8jc3t",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationtitle(_:)-1nj0x",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationtitle(_:)-5040b",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationtitle(_:)-5md3c",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationtitle(_:)-op5u",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:delegate:)-4s353",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:delegate:)-5rmf1",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:istargeted:perform:)-1n884",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:istargeted:perform:)-1sqjm",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:istargeted:perform:)-5pxis",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:istargeted:perform:)-8520y",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/padding(_:)-3g9dd",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/padding(_:)-84cea",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/safeareainset(edge:alignment:spacing:content:)-2w3ru",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/safeareainset(edge:alignment:spacing:content:)-7rec1",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scaleeffect(_:anchor:)-4xxc5",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scaleeffect(_:anchor:)-83lqz",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchcompletion(_:)-89kgr",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchcompletion(_:)-i65z",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:)-1go1h",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:)-7lf1k",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:)-i8f6",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:suggestions:)-3fu1h",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:suggestions:)-4dc4f",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:suggestions:)-7wgiv",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:scope:placement:prompt:scopes:)-227um",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:scope:placement:prompt:scopes:)-5uvd7",
                    "title" : "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:scope:placement:prompt:scopes:)-m1ra",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-32s86",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-33ze2",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-5u1c",
                    "title" : "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:placement:prompt:token:)-6bw59",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:placement:prompt:token:)-6ody9",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:placement:prompt:token:)-9q9y1",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:placement:prompt:token:suggestions:)-4rm55",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:placement:prompt:token:suggestions:)-8r0on",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:placement:prompt:token:suggestions:)-96asz",
                    "title" : "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-75lxo",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-84jv3",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-9tnfj",
                    "title" : "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-2yqu4",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-3mpmd",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-4yvj4",
                    "title" : "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-3khv7",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8wf4c",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-puu",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/texttransition(_:)",
                    "title" : "func textTransition(Text.Transition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbar(_:in:)",
                    "title" : "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbar(content:)-26d7x",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbar(content:)-603dm",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbarbackground(_:in:)-44d6k",
                    "title" : "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbarbackground(_:in:)-4k92c",
                    "title" : "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbarcolorscheme(_:in:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/circularcompletionview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/circularcompletionview",
            "title" : "CircularCompletionView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/headerview\/init(title:detail:image:)",
                "title" : "init(title: Text, detail: Text?, image: Image?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/headerview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(activationpoint:)-3ullp",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(activationpoint:)-8r11c",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaction(named:_:)",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityactivationpoint(_:)-26ze8",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityactivationpoint(_:)-9wspj",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-1z5bl",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-455tl",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-4d88k",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-4vc8v",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-509qq",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-672uw",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-78fhn",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-9smzt",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityhint(_:)-2usu5",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityhint(_:)-3d89o",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityhint(_:)-89kxg",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityinputlabels(_:)-1g26i",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityinputlabels(_:)-6r378",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityinputlabels(_:)-jhj9",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitylabel(_:)-5e4dx",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitylabel(_:)-99ac9",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitylabel(_:)-9kkjb",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:)-1hv4u",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:)-78b5a",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:)-82kjz",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:)-9407q",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-795lp",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9iz29",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9luyw",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-cvfh",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entrylabel:)-4de7t",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entrylabel:)-4dr6h",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entrylabel:)-9yi0u",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entrylabel:)-rywo",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:textranges:)-4ibxf",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:textranges:)-6qvng",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:textranges:)-d1i4",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:textranges:)-xou5",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityvalue(_:)-3t4ll",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityvalue(_:)-8zas2",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityvalue(_:)-99pjk",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:)-2ytud",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:)-5xhf1",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:)-6vfa0",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:message:)-5qtvw",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:message:)-77mjy",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:message:)-8jtx9",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:)-17qvs",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:)-3mxka",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:)-92xlr",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:message:)-3qs7u",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:message:)-48tdl",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:message:)-8pf1e",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alignmentguide(_:computevalue:)-2c1lp",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alignmentguide(_:computevalue:)-5fuhe",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/aspectratio(_:contentmode:)-1ahc2",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/aspectratio(_:contentmode:)-3a80s",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(_:in:fillstyle:)-54pkv",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(_:in:fillstyle:)-70vb3",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(in:fillstyle:)-3dur9",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(in:fillstyle:)-uur5",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/badge(_:)-47svk",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/badge(_:)-540xj",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/badge(_:)-5dhqm",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/badge(_:)-5mack",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/buttonstyle(_:)-3i6h1",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/buttonstyle(_:)-5lqbf",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2anby",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-42nbf",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5vg0n",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-5u9me",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-7wbfl",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-9v7dk",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1dqcf",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-6o5mq",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-7yvyf",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-164i9",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-2io6h",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-auyo",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dynamictypesize(_:)-1p06g",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dynamictypesize(_:)-2mf9p",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-3rinj",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-63lny",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-5jn52",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-9krdk",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedscenevalue(_:_:)",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedvalue(_:_:)",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/help(_:)-1wxxd",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/help(_:)-6zjpw",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/help(_:)-mp2b",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyboardshortcut(_:)-3isxi",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyboardshortcut(_:)-62twl",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listitemtint(_:)-2dssr",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listitemtint(_:)-68cwh",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:)-2i13v",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:)-9i0ng",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:)-unqf",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:displaymode:)-15oat",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:displaymode:)-29ids",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:displaymode:)-9lce",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationtitle(_:)-1dqx6",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationtitle(_:)-1sbvs",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationtitle(_:)-4p24a",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationtitle(_:)-c8o5",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:delegate:)-5ut5h",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:delegate:)-90f95",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:istargeted:perform:)-1vam8",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:istargeted:perform:)-1wj7j",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:istargeted:perform:)-6gq6n",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:istargeted:perform:)-7sv2n",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/padding(_:)-36sgc",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/padding(_:)-69den",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/safeareainset(edge:alignment:spacing:content:)-5tb31",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/safeareainset(edge:alignment:spacing:content:)-73kgz",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scaleeffect(_:anchor:)-1utqa",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scaleeffect(_:anchor:)-h85r",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchcompletion(_:)-11i53",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchcompletion(_:)-3ggib",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:)-24qo6",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:)-2u45j",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:)-70rfz",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:suggestions:)-1vzph",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:suggestions:)-3itj7",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:suggestions:)-7dua",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:scope:placement:prompt:scopes:)-1s9n2",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:scope:placement:prompt:scopes:)-24f2e",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:scope:placement:prompt:scopes:)-imq8",
                    "title" : "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-2m80w",
                    "title" : "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-77hk7",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-77uy9",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:placement:prompt:token:)-1gxrx",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:placement:prompt:token:)-6kj7r",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:placement:prompt:token:)-9fmlq",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:placement:prompt:token:suggestions:)-504op",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:placement:prompt:token:suggestions:)-67g5u",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:placement:prompt:token:suggestions:)-kvx8",
                    "title" : "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-51o0g",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-5nus1",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-80gie",
                    "title" : "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-27gwo",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-4wvtk",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-6uh1f",
                    "title" : "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-4vtuy",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9ucwa",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-t3il",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/texttransition(_:)",
                    "title" : "func textTransition(Text.Transition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbar(_:in:)",
                    "title" : "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbar(content:)-3xv24",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbar(content:)-5jt90",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbarbackground(_:in:)-25ndd",
                    "title" : "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbarbackground(_:in:)-8lvur",
                    "title" : "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbarcolorscheme(_:in:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/headerview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/headerview",
            "title" : "HeaderView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/instructionstaskview\/init(instructions:header:footer:)",
                "title" : "init(instructions: Text?, header: () -> Header, footer: () -> Footer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/instructionstaskview\/init(instructions:iscomplete:action:header:)",
                "title" : "init(instructions: Text?, isComplete: Bool, action: () -> Void, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/instructionstaskview\/init(title:detail:instructions:footer:)",
                "title" : "init(title: Text, detail: Text?, instructions: Text?, footer: () -> Footer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/instructionstaskview\/init(title:detail:instructions:iscomplete:action:)",
                "title" : "init(title: Text, detail: Text?, instructions: Text?, isComplete: Bool, action: () -> Void)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/instructionstaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(activationpoint:)-562pp",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(activationpoint:)-9pfmo",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaction(named:_:)",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityactivationpoint(_:)-41bkk",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityactivationpoint(_:)-6vhcw",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-1ynqo",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-45tc8",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-46olv",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-4a4nd",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-7wcss",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-82t3f",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-8mxym",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-oe05",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityhint(_:)-184wn",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityhint(_:)-238kr",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityhint(_:)-23npy",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityinputlabels(_:)-5684a",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityinputlabels(_:)-5r7bz",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityinputlabels(_:)-62vu2",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitylabel(_:)-17q6b",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitylabel(_:)-1depy",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitylabel(_:)-smwt",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:)-21nuj",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:)-2im63",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:)-5tegn",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:)-7ythx",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-21i1u",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-43h3r",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-69ci0",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9h9u6",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-34pid",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-46wmi",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-7w2jn",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-9suhy",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:textranges:)-21qeo",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:textranges:)-3a3wu",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:textranges:)-6jvl0",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:textranges:)-911pv",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityvalue(_:)-2712v",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityvalue(_:)-4samc",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityvalue(_:)-7bqrn",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:)-4b5dq",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:)-eiqi",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:)-lerr",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:message:)-1k0wc",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:message:)-4pwd4",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:message:)-8eseq",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:)-50j8g",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:)-5o8f7",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:)-pndb",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:message:)-2l4eq",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:message:)-34pc9",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:message:)-9tue",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alignmentguide(_:computevalue:)-65vb0",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alignmentguide(_:computevalue:)-6srwf",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/aspectratio(_:contentmode:)-59a72",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/aspectratio(_:contentmode:)-66ec8",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(_:in:fillstyle:)-99q5g",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(_:in:fillstyle:)-jwxj",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(in:fillstyle:)-3hsyk",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(in:fillstyle:)-67cdc",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/badge(_:)-13n4e",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/badge(_:)-2sbqq",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/badge(_:)-5n0ah",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/badge(_:)-7avry",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/buttonstyle(_:)-2w3gk",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/buttonstyle(_:)-4b16n",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2zizp",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-3eoa0",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-3ho8n",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3kad5",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4c85l",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-954gd",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1uh1r",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4pkqs",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-9w88r",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-5tctg",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7am10",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7mk1o",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dynamictypesize(_:)-9wyq3",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dynamictypesize(_:)-owc",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-3z0jh",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-9ea14",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-3jyxi",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-81exf",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedscenevalue(_:_:)",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedvalue(_:_:)",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/help(_:)-5iiw1",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/help(_:)-64kgl",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/help(_:)-7subj",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyboardshortcut(_:)-7jk4t",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyboardshortcut(_:)-9oned",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listitemtint(_:)-2gqch",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listitemtint(_:)-7ugpx",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:)-71mim",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:)-7ftc8",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:)-8mggz",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:displaymode:)-509a7",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:displaymode:)-8s1is",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:displaymode:)-9ht03",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationtitle(_:)-6jccd",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationtitle(_:)-7qbtk",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationtitle(_:)-8wcut",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationtitle(_:)-zjki",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:delegate:)-6ewzx",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:delegate:)-8gunn",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:istargeted:perform:)-2uh77",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:istargeted:perform:)-5fqtv",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:istargeted:perform:)-6qzgo",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:istargeted:perform:)-7yod0",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/padding(_:)-5049x",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/padding(_:)-61he4",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/safeareainset(edge:alignment:spacing:content:)-2zses",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/safeareainset(edge:alignment:spacing:content:)-55w7p",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scaleeffect(_:anchor:)-32cyg",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scaleeffect(_:anchor:)-8dqat",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchcompletion(_:)-5oqty",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchcompletion(_:)-6wje0",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:)-1qa2j",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:)-42why",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:)-9o5v",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:suggestions:)-20mmq",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:suggestions:)-2q327",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:suggestions:)-5cv50",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:scope:placement:prompt:scopes:)-314ve",
                    "title" : "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:scope:placement:prompt:scopes:)-3h317",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:scope:placement:prompt:scopes:)-4yd73",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-2cld9",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-3bn6r",
                    "title" : "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-8novk",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:)-29mjq",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:)-68mnj",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:)-86tql",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-2bnj2",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-6rz0m",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-8anv9",
                    "title" : "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-1ygu7",
                    "title" : "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-36xgk",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-7uskq",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-2gtxb",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-7hh45",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-m261",
                    "title" : "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-1n6cy",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-25if4",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-7u40h",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/texttransition(_:)",
                    "title" : "func textTransition(Text.Transition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbar(_:in:)",
                    "title" : "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbar(content:)-3rkuu",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbar(content:)-5c8qr",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbarbackground(_:in:)-1gdan",
                    "title" : "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbarbackground(_:in:)-8dpjj",
                    "title" : "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbarcolorscheme(_:in:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/instructionstaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/instructionstaskview",
            "title" : "InstructionsTaskView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/init(header:detaildisclosure:)",
                "title" : "init(header: () -> Header, detailDisclosure: () -> DetailDisclosure)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/init(state:header:)",
                "title" : "init(state: LabeledValueTaskViewState, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/init(title:detail:detaildisclosure:)",
                "title" : "init(title: Text, detail: Text?, detailDisclosure: () -> DetailDisclosure)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/init(title:detail:state:)",
                "title" : "init(title: Text, detail: Text?, state: LabeledValueTaskViewState)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(activationpoint:)-23iiu",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(activationpoint:)-6v44k",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaction(named:_:)",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityactivationpoint(_:)-7kmwx",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityactivationpoint(_:)-8pltu",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-2kp61",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-2lmg8",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-4jg49",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-55p34",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-5pu5h",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-8bypj",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-9vodl",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-klpj",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityhint(_:)-535jk",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityhint(_:)-9lk5",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityhint(_:)-grik",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityinputlabels(_:)-7ajy0",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityinputlabels(_:)-7aqrm",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityinputlabels(_:)-95cgo",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitylabel(_:)-5cj2c",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitylabel(_:)-6du45",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitylabel(_:)-6wof4",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-1v4u2",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-6z019",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-8clu4",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-8qhb7",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-2h6g9",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6ykwt",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9elfb",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-f105",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-49mw9",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-6nfa3",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-6vjjb",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-9vum1",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-2bkez",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-35yj0",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-3qrqh",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-dlyz",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityvalue(_:)-40cde",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityvalue(_:)-5p9tg",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityvalue(_:)-84bu3",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:)-3kkuo",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:)-5nzo3",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:)-84h10",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:message:)-51t48",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:message:)-56l3t",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:message:)-56ul8",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:)-48qte",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:)-6c0aw",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:)-8kqik",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:message:)-3qivw",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:message:)-5v0vc",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:message:)-9rbfy",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alignmentguide(_:computevalue:)-9s9vf",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alignmentguide(_:computevalue:)-xie8",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/aspectratio(_:contentmode:)-19dnh",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/aspectratio(_:contentmode:)-1mfua",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(_:in:fillstyle:)-3ferv",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(_:in:fillstyle:)-9oj84",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(in:fillstyle:)-4ylqa",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(in:fillstyle:)-9u628",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/badge(_:)-2z4w3",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/badge(_:)-34gxu",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/badge(_:)-5y7f2",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/badge(_:)-70pck",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/buttonstyle(_:)-29uuh",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/buttonstyle(_:)-4m79",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1bwng",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-9eay0",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-9oqmf",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1roas",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4cd2j",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-7srwl",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-101eg",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-21cn",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-uj6o",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-1lahy",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-k7gw",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-t0q5",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dynamictypesize(_:)-39edt",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dynamictypesize(_:)-6ibkp",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5n1jh",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-91dfz",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-2goa2",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-3868i",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedscenevalue(_:_:)",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedvalue(_:_:)",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/help(_:)-233a3",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/help(_:)-3luhj",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/help(_:)-8pdmt",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyboardshortcut(_:)-25qk1",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyboardshortcut(_:)-7feuh",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listitemtint(_:)-2xd3a",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listitemtint(_:)-67zo6",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:)-2s534",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:)-32zg2",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:)-50leu",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:displaymode:)-3qlh0",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:displaymode:)-89h52",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:displaymode:)-9b53q",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationtitle(_:)-1m4sd",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationtitle(_:)-1nbfd",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationtitle(_:)-2n184",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationtitle(_:)-5iiji",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:delegate:)-3zp2x",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:delegate:)-4u3wt",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-3cmbr",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-8fb2r",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-8mhfp",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-8zy3t",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/padding(_:)-4f0fj",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/padding(_:)-4vz01",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/safeareainset(edge:alignment:spacing:content:)-2c9ip",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/safeareainset(edge:alignment:spacing:content:)-9s148",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scaleeffect(_:anchor:)-1jdqr",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scaleeffect(_:anchor:)-9mirl",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchcompletion(_:)-346sr",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchcompletion(_:)-8qnve",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:)-3wdpb",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:)-5507c",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:)-5uvhn",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:suggestions:)-12o8y",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:suggestions:)-2g3sk",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:suggestions:)-31a7o",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:scope:placement:prompt:scopes:)-3ja08",
                    "title" : "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:scope:placement:prompt:scopes:)-5meq9",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:scope:placement:prompt:scopes:)-8rp1f",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-3hzvp",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-3v1ql",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-wffj",
                    "title" : "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:)-227p1",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:)-2wj0x",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:)-7kird",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-1pf43",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-6qgyj",
                    "title" : "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-8bppc",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-3w5hq",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-5vv3y",
                    "title" : "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-8hthb",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-4ui6k",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-5ige0",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-5omv1",
                    "title" : "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-36wr8",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-3t4u",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8yd95",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/texttransition(_:)",
                    "title" : "func textTransition(Text.Transition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbar(_:in:)",
                    "title" : "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbar(content:)-5svjs",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbar(content:)-6vws2",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbarbackground(_:in:)-9f4wu",
                    "title" : "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbarbackground(_:in:)-rscf",
                    "title" : "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbarcolorscheme(_:in:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/labeledvaluetaskview",
            "title" : "LabeledValueTaskView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/linkview\/init(instructions:header:footer:)",
                "title" : "init(instructions: Text?, header: () -> Header, footer: () -> Footer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/linkview\/init(instructions:links:header:)",
                "title" : "init(instructions: Text?, links: [LinkItem], header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/linkview\/init(title:detail:instructions:footer:)",
                "title" : "init(title: Text, detail: Text?, instructions: Text?, footer: () -> Footer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/linkview\/init(title:detail:instructions:links:)",
                "title" : "init(title: Text, detail: Text?, instructions: Text?, links: [LinkItem])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/linkview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(activationpoint:)-449po",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(activationpoint:)-9n6ud",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaction(named:_:)",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityactivationpoint(_:)-1d6ok",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityactivationpoint(_:)-xexh",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-1dt48",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-1zf5b",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-2fw6i",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-34c5e",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-353f0",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-5fn5q",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-5qoe9",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-6f5z1",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityhint(_:)-6t0cb",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityhint(_:)-6vi6s",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityhint(_:)-8g49a",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityinputlabels(_:)-37mlj",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityinputlabels(_:)-5f3lr",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityinputlabels(_:)-99n8p",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitylabel(_:)-61lc8",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitylabel(_:)-71wmb",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitylabel(_:)-833sl",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:)-30gf7",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:)-4jswm",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:)-74yfo",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:)-84e1e",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entryid:entrylabel:)-2rexz",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entryid:entrylabel:)-5ur2p",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8tba5",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9djmc",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entrylabel:)-5wiwo",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entrylabel:)-7szw3",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entrylabel:)-97163",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entrylabel:)-zohz",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:textranges:)-4ci9c",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:textranges:)-4kzta",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:textranges:)-4m1in",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:textranges:)-97c83",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityvalue(_:)-5nmva",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityvalue(_:)-8gzop",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityvalue(_:)-8idjo",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:)-4lz5h",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:)-7ejgs",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:)-8avx2",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:message:)-57nvp",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:message:)-63p2z",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:message:)-8yqc8",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:)-1ngm5",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:)-3i9de",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:)-6i07f",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:message:)-5mvbz",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:message:)-86fgz",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:message:)-95xp4",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alignmentguide(_:computevalue:)-3muef",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alignmentguide(_:computevalue:)-9331r",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/aspectratio(_:contentmode:)-3z1to",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/aspectratio(_:contentmode:)-8fwlv",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(_:in:fillstyle:)-2zm2s",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(_:in:fillstyle:)-75mhj",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(in:fillstyle:)-6b8nn",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(in:fillstyle:)-84k8r",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/badge(_:)-144q8",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/badge(_:)-16qvc",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/badge(_:)-1mxfo",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/badge(_:)-6d0b6",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/buttonstyle(_:)-24pib",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/buttonstyle(_:)-3y3yi",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4aque",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4qcdy",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-8g9ym",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1o5cl",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-5epqb",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-8sqhe",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-17z8q",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1oegh",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3xdek",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-29sf1",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-40wpq",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-anms",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dynamictypesize(_:)-10qfk",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dynamictypesize(_:)-1smix",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-1ea19",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6ucyl",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-21vz0",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-525ss",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedscenevalue(_:_:)",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedvalue(_:_:)",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/help(_:)-1wewq",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/help(_:)-8jsu",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/help(_:)-o2yz",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyboardshortcut(_:)-2yvgc",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyboardshortcut(_:)-6r7f0",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listitemtint(_:)-1pdbj",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listitemtint(_:)-3l7z2",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:)-14pyh",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:)-8kyjc",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:)-9cz9t",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:displaymode:)-26boi",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:displaymode:)-43teg",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:displaymode:)-8rkm5",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationtitle(_:)-578pr",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationtitle(_:)-6ngl7",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationtitle(_:)-6p0j3",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationtitle(_:)-7klnn",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:delegate:)-5ctsh",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:delegate:)-9nots",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:istargeted:perform:)-5lul7",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:istargeted:perform:)-61m5y",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:istargeted:perform:)-6retw",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:istargeted:perform:)-9buo3",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/padding(_:)-dcv7",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/padding(_:)-prog",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/safeareainset(edge:alignment:spacing:content:)-7rqar",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/safeareainset(edge:alignment:spacing:content:)-y71a",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scaleeffect(_:anchor:)-3dsi4",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scaleeffect(_:anchor:)-4n63t",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchcompletion(_:)-4s6j1",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchcompletion(_:)-6uvh0",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:)-2qwco",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:)-2z3cz",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:)-8zhax",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:suggestions:)-1892m",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:suggestions:)-4v3de",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:suggestions:)-5kwws",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:scope:placement:prompt:scopes:)-10407",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:scope:placement:prompt:scopes:)-2h9aa",
                    "title" : "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:scope:placement:prompt:scopes:)-3sqw9",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-55z6g",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-5c2yh",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-9tvr7",
                    "title" : "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:placement:prompt:token:)-2l2wg",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:placement:prompt:token:)-5voi",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:placement:prompt:token:)-70o3v",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:placement:prompt:token:suggestions:)-3octm",
                    "title" : "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:placement:prompt:token:suggestions:)-8rqwv",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:placement:prompt:token:suggestions:)-97a5b",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-4mqw0",
                    "title" : "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-5xck0",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-66e1m",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-5smps",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-5y1o",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-726xd",
                    "title" : "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-1r4mn",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-2k550",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8ly8h",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/texttransition(_:)",
                    "title" : "func textTransition(Text.Transition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbar(_:in:)",
                    "title" : "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbar(content:)-5c5dn",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbar(content:)-5glx",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbarbackground(_:in:)-884gt",
                    "title" : "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbarbackground(_:in:)-904bq",
                    "title" : "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbarcolorscheme(_:in:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/linkview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/linkview",
            "title" : "LinkView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/init(instructions:header:content:)",
                "title" : "init(instructions: Text?, header: () -> Header, content: () -> Content)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/init(progress:goal:instructions:iscomplete:header:)",
                "title" : "init(progress: Text, goal: Text, instructions: Text?, isComplete: Bool, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/init(title:detail:instructions:content:)",
                "title" : "init(title: Text, detail: Text?, instructions: Text?, content: () -> Content)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/init(title:detail:progress:goal:instructions:iscomplete:)",
                "title" : "init(title: Text, detail: Text?, progress: Text, goal: Text, instructions: Text?, isComplete: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(activationpoint:)-2vc4n",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(activationpoint:)-4tke9",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaction(named:_:)",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityactivationpoint(_:)-51vtv",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityactivationpoint(_:)-9tnp2",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-1frm",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-1ghpc",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-1w898",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-2mleb",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-319ii",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-4jnp7",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-84ewu",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-90yl7",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityhint(_:)-1iyim",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityhint(_:)-51wq3",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityhint(_:)-zrmy",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityinputlabels(_:)-19tdv",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityinputlabels(_:)-2yg6m",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityinputlabels(_:)-5fwgl",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitylabel(_:)-3e4bz",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitylabel(_:)-51osz",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitylabel(_:)-5b72e",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:)-103iw",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:)-8g4ij",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:)-8n0es",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:)-8yx0b",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-3utdl",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-4ee8y",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-5lq5f",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-ubuz",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-2k23g",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-3hdnp",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-6gkz2",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-9ici7",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-5gowo",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-6f4dv",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-7oqug",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-7ykt7",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityvalue(_:)-943nx",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityvalue(_:)-9hkwn",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityvalue(_:)-r9ap",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:)-5cilp",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:)-6rb6t",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:)-96vky",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:message:)-23j2a",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:message:)-8b9vt",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:message:)-9uxwe",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:)-30t30",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:)-9eyu3",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:)-tvlv",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:message:)-1xjmu",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:message:)-8s6qp",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:message:)-daic",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alignmentguide(_:computevalue:)-4hl1c",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alignmentguide(_:computevalue:)-mgfr",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/aspectratio(_:contentmode:)-4vdt3",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/aspectratio(_:contentmode:)-5vpey",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(_:in:fillstyle:)-1f95p",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(_:in:fillstyle:)-8or85",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(in:fillstyle:)-18jui",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(in:fillstyle:)-53s10",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/badge(_:)-1wpt",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/badge(_:)-8857w",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/badge(_:)-8up1h",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/badge(_:)-9bh97",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/buttonstyle(_:)-1cl4e",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/buttonstyle(_:)-6kaw4",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-17tns",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1gmvt",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4hbbr",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-2pda6",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6r7ss",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-7170r",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-33e5x",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4r5f1",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-h0h9",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-10tuq",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8aon5",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-9bfa7",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dynamictypesize(_:)-4qg05",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dynamictypesize(_:)-9u3ry",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5268l",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5i61a",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-1x49d",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-4sx2o",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedscenevalue(_:_:)",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedvalue(_:_:)",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/help(_:)-1jiu1",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/help(_:)-71rsq",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/help(_:)-sljs",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyboardshortcut(_:)-9hg0y",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyboardshortcut(_:)-9z6ay",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listitemtint(_:)-728xi",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listitemtint(_:)-nelk",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:)-472rx",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:)-5s0ca",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:)-9sba3",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:displaymode:)-26s0h",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:displaymode:)-3rdo4",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:displaymode:)-6h9zd",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationtitle(_:)-16h4k",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationtitle(_:)-5rsmp",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationtitle(_:)-6rgag",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationtitle(_:)-h812",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:delegate:)-46frb",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:delegate:)-6crxh",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-14xdb",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-31n9d",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-32r9n",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-731oi",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/padding(_:)-34wzd",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/padding(_:)-4gnw1",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/safeareainset(edge:alignment:spacing:content:)-70qrm",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/safeareainset(edge:alignment:spacing:content:)-88fli",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scaleeffect(_:anchor:)-35thi",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scaleeffect(_:anchor:)-96xli",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchcompletion(_:)-2vcvu",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchcompletion(_:)-6r1qw",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:)-3mhky",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:)-575ul",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:)-rjt0",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:suggestions:)-2dqg8",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:suggestions:)-37zfx",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:suggestions:)-m9rx",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:scope:placement:prompt:scopes:)-2moyn",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:scope:placement:prompt:scopes:)-3xc1v",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:scope:placement:prompt:scopes:)-8g0lb",
                    "title" : "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-37qqc",
                    "title" : "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-8qh1t",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-wwut",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:)-5eoyh",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:)-5hnit",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:)-7yr9r",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-3e4js",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-4jbkk",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-6eopg",
                    "title" : "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-13i68",
                    "title" : "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-5i0pw",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-70yxw",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-127i4",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-89rfy",
                    "title" : "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-8vsm5",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-12zio",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-21sy3",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-5oqct",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/texttransition(_:)",
                    "title" : "func textTransition(Text.Transition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbar(_:in:)",
                    "title" : "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbar(content:)-kv8l",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbar(content:)-mbea",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbarbackground(_:in:)-56gwu",
                    "title" : "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbarbackground(_:in:)-5a32k",
                    "title" : "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbarcolorscheme(_:in:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/numericprogresstaskview",
            "title" : "NumericProgressTaskView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimationstyle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimationstyle\/statechangeduration",
                    "title" : "var stateChangeDuration: Double",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockanimationstyle\/ockanimationstyler-implementations",
                "title" : "OCKAnimationStyler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockanimationstyle",
            "title" : "OCKAnimationStyle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockappearancestyle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/borderwidth1",
                    "title" : "var borderWidth1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/borderwidth2",
                    "title" : "var borderWidth2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/cornerradius1",
                    "title" : "var cornerRadius1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/cornerradius2",
                    "title" : "var cornerRadius2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/linewidth1",
                    "title" : "var lineWidth1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/opacity1",
                    "title" : "var opacity1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/shadowoffset1",
                    "title" : "var shadowOffset1: CGSize",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/shadowopacity1",
                    "title" : "var shadowOpacity1: Float",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/shadowradius1",
                    "title" : "var shadowRadius1: CGFloat",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyle\/ockappearancestyler-implementations",
                "title" : "OCKAppearanceStyler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockappearancestyle",
            "title" : "OCKAppearanceStyle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/black",
                    "title" : "var black: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/clear",
                    "title" : "var clear: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/custombackground",
                    "title" : "var customBackground: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customblue",
                    "title" : "var customBlue: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customfill",
                    "title" : "var customFill: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgray",
                    "title" : "var customGray: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgray2",
                    "title" : "var customGray2: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgray3",
                    "title" : "var customGray3: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgray4",
                    "title" : "var customGray4: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgray5",
                    "title" : "var customGray5: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgroupedbackground",
                    "title" : "var customGroupedBackground: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/label",
                    "title" : "var label: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/quaternarycustomfill",
                    "title" : "var quaternaryCustomFill: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/secondarycustombackground",
                    "title" : "var secondaryCustomBackground: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/secondarycustomfill",
                    "title" : "var secondaryCustomFill: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/secondarycustomgroupedbackground",
                    "title" : "var secondaryCustomGroupedBackground: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/secondarylabel",
                    "title" : "var secondaryLabel: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/separator",
                    "title" : "var separator: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/tertiarycustomfill",
                    "title" : "var tertiaryCustomFill: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/tertiarycustomgroupedbackground",
                    "title" : "var tertiaryCustomGroupedBackground: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/tertiarylabel",
                    "title" : "var tertiaryLabel: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/white",
                    "title" : "var white: UIColor",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyle\/ockcolorstyler-implementations",
                "title" : "OCKColorStyler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcolorstyle",
            "title" : "OCKColorStyle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/init(datapoints:title:gradientstartcolor:gradientendcolor:size:)",
                "title" : "init(dataPoints: [CGPoint], title: String, gradientStartColor: UIColor, gradientEndColor: UIColor, size: CGFloat)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/init(datapoints:title:size:color:)",
                "title" : "init(dataPoints: [CGPoint], title: String, size: CGFloat, color: UIColor?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/init(values:title:gradientstartcolor:gradientendcolor:size:)",
                "title" : "init(values: [CGFloat], title: String, gradientStartColor: UIColor, gradientEndColor: UIColor, size: CGFloat)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/init(values:title:size:color:)",
                "title" : "init(values: [CGFloat], title: String, size: CGFloat, color: UIColor?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/accessibilitylabels",
                "title" : "var accessibilityLabels: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/datapoints",
                "title" : "var dataPoints: [CGPoint]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/gradientendcolor",
                "title" : "var gradientEndColor: UIColor?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/gradientstartcolor",
                "title" : "var gradientStartColor: UIColor?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/size",
                "title" : "var size: CGFloat",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdataseries\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdataseries\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockdataseries",
            "title" : "OCKDataSeries",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdimensionstyle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/buttonheight1",
                    "title" : "var buttonHeight1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/buttonheight2",
                    "title" : "var buttonHeight2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/buttonheight3",
                    "title" : "var buttonHeight3: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/buttonheight4",
                    "title" : "var buttonHeight4: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/directionalinsets1",
                    "title" : "var directionalInsets1: NSDirectionalEdgeInsets",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/directionalinsets2",
                    "title" : "var directionalInsets2: NSDirectionalEdgeInsets",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/imageheight1",
                    "title" : "var imageHeight1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/imageheight2",
                    "title" : "var imageHeight2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/linewidth1",
                    "title" : "var lineWidth1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/pointsize1",
                    "title" : "var pointSize1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/pointsize2",
                    "title" : "var pointSize2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/pointsize3",
                    "title" : "var pointSize3: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/separatorheight",
                    "title" : "var separatorHeight: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/stackspacing1",
                    "title" : "var stackSpacing1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/symbolpointsize1",
                    "title" : "var symbolPointSize1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/symbolpointsize2",
                    "title" : "var symbolPointSize2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/symbolpointsize3",
                    "title" : "var symbolPointSize3: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/symbolpointsize4",
                    "title" : "var symbolPointSize4: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/symbolpointsize5",
                    "title" : "var symbolPointSize5: CGFloat",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyle\/ockdimensionstyler-implementations",
                "title" : "OCKDimensionStyler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockdimensionstyle",
            "title" : "OCKDimensionStyle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklog\/level",
                "title" : "static var level: OSLogType",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklog",
            "title" : "OCKLog",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/rule\/init(layout:greaterthanorequaltocontentsizecategory:)",
                    "title" : "init(layout: Layout, greaterThanOrEqualToContentSizeCategory: UIContentSizeCategory)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/rule\/contentsizecategory",
                    "title" : "let contentSizeCategory: UIContentSizeCategory",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/rule\/layout",
                    "title" : "let layout: Layout",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/rule",
                "title" : "OCKResponsiveLayout.Rule",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassruleset\/init(sizeclass:rules:)",
                    "title" : "init(sizeClass: SizeClass, rules: [OCKResponsiveLayout<LayoutOption>.Rule<LayoutOption>])",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassruleset\/init(sizeclasses:rules:)",
                    "title" : "init(sizeClasses: [SizeClass], rules: [OCKResponsiveLayout<LayoutOption>.Rule<LayoutOption>])",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassruleset\/rules",
                    "title" : "let rules: [OCKResponsiveLayout<LayoutOption>.Rule<LayoutOption>]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassruleset\/sizeclasses",
                    "title" : "let sizeClasses: [SizeClass]",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassruleset",
                "title" : "OCKResponsiveLayout.SizeClassRuleSet",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/init(defaultlayout:anysizeclassruleset:sizeclassspecificrulesets:)",
                "title" : "init(defaultLayout: LayoutOption, anySizeClassRuleSet: [OCKResponsiveLayout.Rule<LayoutOption>], sizeClassSpecificRuleSets: [SizeClassRuleSet<LayoutOption>])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/defaultruleset",
                "title" : "let defaultRuleSet: SizeClassRuleSet<LayoutOption>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassspecificrulesets",
                "title" : "let sizeClassSpecificRuleSets: [SizeClassRuleSet<LayoutOption>]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/responsivelayoutrule(traitcollection:)",
                "title" : "func responsiveLayoutRule(traitCollection: UITraitCollection) -> LayoutOption",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclass",
                "title" : "OCKResponsiveLayout.SizeClass",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockresponsivelayout",
            "title" : "OCKResponsiveLayout",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstyle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstyle\/animation",
                    "title" : "var animation: OCKAnimationStyler",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstyle\/appearance",
                    "title" : "var appearance: OCKAppearanceStyler",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstyle\/color",
                    "title" : "var color: OCKColorStyler",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstyle\/dimension",
                    "title" : "var dimension: OCKDimensionStyler",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstyle\/ockstyler-implementations",
                "title" : "OCKStyler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockstyle",
            "title" : "OCKStyle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/rectangularcompletionview\/init(iscomplete:content:)",
                "title" : "init(isComplete: Bool, content: () -> Content)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/rectangularcompletionview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(activationpoint:)-1g3i4",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(activationpoint:)-5687a",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaction(named:_:)",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityactivationpoint(_:)-1bf69",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityactivationpoint(_:)-4k0ht",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-1pwh7",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-2t9j5",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-32kgu",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-53fg7",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-6xuoh",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-70762",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-8q2ae",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-zewq",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityhint(_:)-5gvx6",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityhint(_:)-9gf37",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityhint(_:)-9n33l",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityinputlabels(_:)-18auc",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityinputlabels(_:)-3gbdg",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityinputlabels(_:)-6wrfi",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitylabel(_:)-1ckt",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitylabel(_:)-5bbvh",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitylabel(_:)-87n2q",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:)-1ze7k",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:)-2noa3",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:)-7a1xt",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:)-82c9s",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-57443",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6m8ne",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9amsh",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-uqqd",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-3o0ev",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-4mnfq",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-5n92k",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-6jnxc",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:textranges:)-19v1p",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:textranges:)-50h5q",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:textranges:)-5gxpa",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:textranges:)-62zem",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityvalue(_:)-34ncv",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityvalue(_:)-5lm3g",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityvalue(_:)-6a040",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:)-1s71u",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:)-4b0tz",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:)-9a5me",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:message:)-8ffyn",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:message:)-8jvnp",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:message:)-9kumq",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:)-24bsk",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:)-4if8y",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:)-57176",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:message:)-3um8u",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:message:)-59vx8",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:message:)-eccf",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alignmentguide(_:computevalue:)-1v2dp",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alignmentguide(_:computevalue:)-48h77",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/aspectratio(_:contentmode:)-3tblw",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/aspectratio(_:contentmode:)-4e2ar",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(_:in:fillstyle:)-4kfwz",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(_:in:fillstyle:)-8mhz2",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(in:fillstyle:)-3q3vn",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(in:fillstyle:)-6m0uz",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/badge(_:)-30krk",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/badge(_:)-5vq9e",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/badge(_:)-6y969",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/badge(_:)-8f344",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/buttonstyle(_:)-811bz",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/buttonstyle(_:)-9xhvx",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-73hlf",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-89kmz",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-a86r",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-62opj",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-sup7",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-u53w",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3tkoa",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-57npp",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-5k9mz",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-2w7x0",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7us4n",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-hrbk",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dynamictypesize(_:)-13on3",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dynamictypesize(_:)-3foti",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5nl3s",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6f237",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-12t6c",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-nwhu",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedscenevalue(_:_:)",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedvalue(_:_:)",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/help(_:)-1yikw",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/help(_:)-76wtt",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/help(_:)-8sbt6",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyboardshortcut(_:)-4gshc",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyboardshortcut(_:)-92vno",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listitemtint(_:)-40rk1",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listitemtint(_:)-8fwrs",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:)-6itrd",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:)-6ovdl",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:)-8y94x",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:displaymode:)-3b8yk",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:displaymode:)-4yik9",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:displaymode:)-7ixnw",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationtitle(_:)-7hnmx",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationtitle(_:)-89jqy",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationtitle(_:)-emdq",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationtitle(_:)-s6b9",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:delegate:)-522mu",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:delegate:)-6oddc",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:istargeted:perform:)-3lqlx",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:istargeted:perform:)-4yjy8",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:istargeted:perform:)-65um1",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:istargeted:perform:)-6umd6",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/padding(_:)-3vzv6",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/padding(_:)-9eq9x",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/safeareainset(edge:alignment:spacing:content:)-4hh4q",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/safeareainset(edge:alignment:spacing:content:)-4owd9",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scaleeffect(_:anchor:)-3v3av",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scaleeffect(_:anchor:)-9uo1o",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchcompletion(_:)-2byg4",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchcompletion(_:)-6nlrl",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:)-3hw25",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:)-8v0x5",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:)-e06s",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:suggestions:)-3uzy0",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:suggestions:)-3z1as",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:suggestions:)-6wdjr",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:scope:placement:prompt:scopes:)-10mmz",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:scope:placement:prompt:scopes:)-6fmun",
                    "title" : "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:scope:placement:prompt:scopes:)-92qk4",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-2p787",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-33xqd",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-5iwna",
                    "title" : "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:placement:prompt:token:)-59pz4",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:placement:prompt:token:)-5mh85",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:placement:prompt:token:)-7my4g",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:placement:prompt:token:suggestions:)-828ej",
                    "title" : "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:placement:prompt:token:suggestions:)-98at",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:placement:prompt:token:suggestions:)-9qfvy",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-1g1up",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-2kws4",
                    "title" : "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-qaam",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-3nvto",
                    "title" : "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-3yr3w",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-59ukf",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-468pq",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-6knp",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8qhe7",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/texttransition(_:)",
                    "title" : "func textTransition(Text.Transition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbar(_:in:)",
                    "title" : "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbar(content:)-532cy",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbar(content:)-o4v6",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbarbackground(_:in:)-30dbd",
                    "title" : "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbarbackground(_:in:)-31gss",
                    "title" : "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbarcolorscheme(_:in:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/rectangularcompletionview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/rectangularcompletionview",
            "title" : "RectangularCompletionView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/simpletaskview\/init(action:header:detaildisclosure:)",
                "title" : "init(action: () -> Void, header: () -> Header, detailDisclosure: () -> DetailDisclosure)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/simpletaskview\/init(iscomplete:action:header:)",
                "title" : "init(isComplete: Bool, action: () -> Void, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/simpletaskview\/init(title:detail:action:detaildisclosure:)",
                "title" : "init(title: Text, detail: Text?, action: () -> Void, detailDisclosure: () -> DetailDisclosure)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/simpletaskview\/init(title:detail:iscomplete:action:)",
                "title" : "init(title: Text, detail: Text?, isComplete: Bool, action: () -> Void)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/simpletaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(activationpoint:)-408pk",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(activationpoint:)-5olrw",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaction(named:_:)",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityactivationpoint(_:)-2mnzt",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityactivationpoint(_:)-9k23b",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-13roy",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-2us44",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-35p1b",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-35zst",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-42ouu",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-8slwr",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-jkui",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-kw06",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityhint(_:)-6u6or",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityhint(_:)-9pvlz",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityhint(_:)-me0z",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityinputlabels(_:)-5p528",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityinputlabels(_:)-5q7ud",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityinputlabels(_:)-7f7ev",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitylabel(_:)-5pa25",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitylabel(_:)-6306l",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitylabel(_:)-l2dn",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:)-3u6vn",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:)-8o3g0",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:)-95424",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:)-9vljd",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1girv",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1kn1q",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-54ry8",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-5mxhp",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-3qqjm",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-5rdb1",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-5yur4",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-7py0z",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:textranges:)-2p1k4",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:textranges:)-754jl",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:textranges:)-7cxd0",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:textranges:)-84fg8",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityvalue(_:)-3uuxs",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityvalue(_:)-522bi",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityvalue(_:)-53a4h",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:)-5vo28",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:)-8io7m",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:)-93oxi",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:message:)-2s28d",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:message:)-9yozw",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:message:)-k9gp",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:)-2njox",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:)-3xe3c",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:)-5cwd8",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:message:)-1us0p",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:message:)-5vyg6",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:message:)-671w8",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alignmentguide(_:computevalue:)-2593s",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alignmentguide(_:computevalue:)-99ljb",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/aspectratio(_:contentmode:)-3dfwo",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/aspectratio(_:contentmode:)-6x88k",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(_:in:fillstyle:)-4z1q4",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(_:in:fillstyle:)-75b37",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(in:fillstyle:)-7ee0z",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(in:fillstyle:)-y3q4",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/badge(_:)-1ds72",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/badge(_:)-1fjzi",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/badge(_:)-2ka7p",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/badge(_:)-8vwt1",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/buttonstyle(_:)-3ue4q",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/buttonstyle(_:)-sxq7",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1zs4m",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-43omv",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-7x7mt",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-149ak",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3g182",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6eiw8",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-5d5qs",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-7ffm3",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-wgc9",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-3c99x",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8223o",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8gzm5",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dynamictypesize(_:)-53x2q",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dynamictypesize(_:)-55y",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6npyb",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-8dcvd",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-8gcj9",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-9azvv",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedscenevalue(_:_:)",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedvalue(_:_:)",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/help(_:)-2cbos",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/help(_:)-6mlko",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/help(_:)-x4h8",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyboardshortcut(_:)-2lxbl",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyboardshortcut(_:)-7jns3",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listitemtint(_:)-3xa40",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listitemtint(_:)-5sich",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:)-4b7pg",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:)-5z9xp",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:)-91o3",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:displaymode:)-2hh5z",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:displaymode:)-4rsyc",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:displaymode:)-8jls4",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationtitle(_:)-14n83",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationtitle(_:)-2hsdb",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationtitle(_:)-7345",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationtitle(_:)-8iw80",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:delegate:)-3o29b",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:delegate:)-9bgpx",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:istargeted:perform:)-3zdr6",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:istargeted:perform:)-4ddg",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:istargeted:perform:)-58x5i",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:istargeted:perform:)-6asbp",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/padding(_:)-1l7vx",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/padding(_:)-8fvad",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/safeareainset(edge:alignment:spacing:content:)-2b4r9",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/safeareainset(edge:alignment:spacing:content:)-5hll7",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scaleeffect(_:anchor:)-7cugy",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scaleeffect(_:anchor:)-97oo8",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchcompletion(_:)-51uw7",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchcompletion(_:)-soy2",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:)-1iudg",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:)-1o6ol",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:)-7l30c",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:suggestions:)-31y3a",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:suggestions:)-39pkz",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:suggestions:)-y2e0",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:scope:placement:prompt:scopes:)-5mqjt",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:scope:placement:prompt:scopes:)-5u7ml",
                    "title" : "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:scope:placement:prompt:scopes:)-9fvxc",
                    "title" : "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-2de7m",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-2qd7z",
                    "title" : "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-33d4h",
                    "title" : "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:placement:prompt:token:)-2kjsg",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:placement:prompt:token:)-673lp",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:placement:prompt:token:)-7bawk",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-55gji",
                    "title" : "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-7mcy4",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:placement:prompt:token:suggestions:)-lfb7",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-249sp",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-6ab2y",
                    "title" : "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-8ioi8",
                    "title" : "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-3d9zm",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-4623o",
                    "title" : "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-5f1c5",
                    "title" : "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-67pci",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-7b2he",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-7fjvt",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/texttransition(_:)",
                    "title" : "func textTransition(Text.Transition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbar(_:in:)",
                    "title" : "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbar(content:)-3q42t",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbar(content:)-5oyhp",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbarbackground(_:in:)-20lbi",
                    "title" : "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbarbackground(_:in:)-37qrs",
                    "title" : "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbarcolorscheme(_:in:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/simpletaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/simpletaskview",
            "title" : "SimpleTaskView",
            "type" : "struct"
          },
          {
            "title" : "Functions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/carekitui\/loc(_:_:arguments:)",
            "title" : "func loc(String, String, arguments: [CVarArg]) -> String",
            "type" : "func"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskviewstate\/complete(_:_:)",
                "title" : "case complete(Text, Text?)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskviewstate\/incomplete(_:)",
                "title" : "case incomplete(Text)",
                "type" : "case"
              }
            ],
            "path" : "\/documentation\/carekitui\/labeledvaluetaskviewstate",
            "title" : "LabeledValueTaskViewState",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/appstore(id:title:)",
                "title" : "case appStore(id: String, title: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/call(phonenumber:title:)",
                "title" : "case call(phoneNumber: String, title: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/email(recipient:title:)",
                "title" : "case email(recipient: String, title: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/location(_:_:title:)",
                "title" : "case location(String, String, title: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/message(phonenumber:title:)",
                "title" : "case message(phoneNumber: String, title: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/url(_:title:symbol:)",
                "title" : "case url(URL, title: String, symbol: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/website(_:title:)",
                "title" : "case website(String, title: String)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/url",
                "title" : "var url: URL?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkitem\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitui\/linkitem\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/linkitem",
            "title" : "LinkItem",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionstate\/dimmed",
                "title" : "case dimmed",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionstate\/empty",
                "title" : "case empty",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionstate\/progress(_:)",
                "title" : "case progress(CGFloat)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionstate\/zero",
                "title" : "case zero",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcompletionstate\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcompletionstate\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcompletionstate",
            "title" : "OCKCompletionState",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/carekitui",
        "title" : "CareKitUI",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 0
  }
}